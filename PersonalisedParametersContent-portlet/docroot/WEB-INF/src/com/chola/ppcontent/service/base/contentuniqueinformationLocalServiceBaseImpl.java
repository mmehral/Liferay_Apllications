/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.chola.ppcontent.service.base;

import aQute.bnd.annotation.ProviderType;

import com.chola.ppcontent.model.contentuniqueinformation;
import com.chola.ppcontent.service.contentuniqueinformationLocalService;
import com.chola.ppcontent.service.persistence.contentuniqueinformationPersistence;
import com.chola.ppcontent.service.persistence.contentupdateFinder;
import com.chola.ppcontent.service.persistence.contentupdatePersistence;
import com.chola.ppcontent.service.persistence.personalisedparameterscontentstorePersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the contentuniqueinformation local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.chola.ppcontent.service.impl.contentuniqueinformationLocalServiceImpl}.
 * </p>
 *
 * @author cloverliferay01
 * @see com.chola.ppcontent.service.impl.contentuniqueinformationLocalServiceImpl
 * @see com.chola.ppcontent.service.contentuniqueinformationLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class contentuniqueinformationLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements contentuniqueinformationLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.chola.ppcontent.service.contentuniqueinformationLocalServiceUtil} to access the contentuniqueinformation local service.
	 */

	/**
	 * Adds the contentuniqueinformation to the database. Also notifies the appropriate model listeners.
	 *
	 * @param contentuniqueinformation the contentuniqueinformation
	 * @return the contentuniqueinformation that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public contentuniqueinformation addcontentuniqueinformation(
		contentuniqueinformation contentuniqueinformation) {
		contentuniqueinformation.setNew(true);

		return contentuniqueinformationPersistence.update(contentuniqueinformation);
	}

	/**
	 * Creates a new contentuniqueinformation with the primary key. Does not add the contentuniqueinformation to the database.
	 *
	 * @param id the primary key for the new contentuniqueinformation
	 * @return the new contentuniqueinformation
	 */
	@Override
	public contentuniqueinformation createcontentuniqueinformation(long id) {
		return contentuniqueinformationPersistence.create(id);
	}

	/**
	 * Deletes the contentuniqueinformation with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param id the primary key of the contentuniqueinformation
	 * @return the contentuniqueinformation that was removed
	 * @throws PortalException if a contentuniqueinformation with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public contentuniqueinformation deletecontentuniqueinformation(long id)
		throws PortalException {
		return contentuniqueinformationPersistence.remove(id);
	}

	/**
	 * Deletes the contentuniqueinformation from the database. Also notifies the appropriate model listeners.
	 *
	 * @param contentuniqueinformation the contentuniqueinformation
	 * @return the contentuniqueinformation that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public contentuniqueinformation deletecontentuniqueinformation(
		contentuniqueinformation contentuniqueinformation) {
		return contentuniqueinformationPersistence.remove(contentuniqueinformation);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(contentuniqueinformation.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return contentuniqueinformationPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.chola.ppcontent.model.impl.contentuniqueinformationModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return contentuniqueinformationPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.chola.ppcontent.model.impl.contentuniqueinformationModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return contentuniqueinformationPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return contentuniqueinformationPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return contentuniqueinformationPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public contentuniqueinformation fetchcontentuniqueinformation(long id) {
		return contentuniqueinformationPersistence.fetchByPrimaryKey(id);
	}

	/**
	 * Returns the contentuniqueinformation with the primary key.
	 *
	 * @param id the primary key of the contentuniqueinformation
	 * @return the contentuniqueinformation
	 * @throws PortalException if a contentuniqueinformation with the primary key could not be found
	 */
	@Override
	public contentuniqueinformation getcontentuniqueinformation(long id)
		throws PortalException {
		return contentuniqueinformationPersistence.findByPrimaryKey(id);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(contentuniqueinformationLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(contentuniqueinformation.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(contentuniqueinformationLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(contentuniqueinformation.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(contentuniqueinformationLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(contentuniqueinformation.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return contentuniqueinformationLocalService.deletecontentuniqueinformation((contentuniqueinformation)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return contentuniqueinformationPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the contentuniqueinformations.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.chola.ppcontent.model.impl.contentuniqueinformationModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of contentuniqueinformations
	 * @param end the upper bound of the range of contentuniqueinformations (not inclusive)
	 * @return the range of contentuniqueinformations
	 */
	@Override
	public List<contentuniqueinformation> getcontentuniqueinformations(
		int start, int end) {
		return contentuniqueinformationPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of contentuniqueinformations.
	 *
	 * @return the number of contentuniqueinformations
	 */
	@Override
	public int getcontentuniqueinformationsCount() {
		return contentuniqueinformationPersistence.countAll();
	}

	/**
	 * Updates the contentuniqueinformation in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param contentuniqueinformation the contentuniqueinformation
	 * @return the contentuniqueinformation that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public contentuniqueinformation updatecontentuniqueinformation(
		contentuniqueinformation contentuniqueinformation) {
		return contentuniqueinformationPersistence.update(contentuniqueinformation);
	}

	/**
	 * Returns the contentuniqueinformation local service.
	 *
	 * @return the contentuniqueinformation local service
	 */
	public contentuniqueinformationLocalService getcontentuniqueinformationLocalService() {
		return contentuniqueinformationLocalService;
	}

	/**
	 * Sets the contentuniqueinformation local service.
	 *
	 * @param contentuniqueinformationLocalService the contentuniqueinformation local service
	 */
	public void setcontentuniqueinformationLocalService(
		contentuniqueinformationLocalService contentuniqueinformationLocalService) {
		this.contentuniqueinformationLocalService = contentuniqueinformationLocalService;
	}

	/**
	 * Returns the contentuniqueinformation persistence.
	 *
	 * @return the contentuniqueinformation persistence
	 */
	public contentuniqueinformationPersistence getcontentuniqueinformationPersistence() {
		return contentuniqueinformationPersistence;
	}

	/**
	 * Sets the contentuniqueinformation persistence.
	 *
	 * @param contentuniqueinformationPersistence the contentuniqueinformation persistence
	 */
	public void setcontentuniqueinformationPersistence(
		contentuniqueinformationPersistence contentuniqueinformationPersistence) {
		this.contentuniqueinformationPersistence = contentuniqueinformationPersistence;
	}

	/**
	 * Returns the contentupdate local service.
	 *
	 * @return the contentupdate local service
	 */
	public com.chola.ppcontent.service.contentupdateLocalService getcontentupdateLocalService() {
		return contentupdateLocalService;
	}

	/**
	 * Sets the contentupdate local service.
	 *
	 * @param contentupdateLocalService the contentupdate local service
	 */
	public void setcontentupdateLocalService(
		com.chola.ppcontent.service.contentupdateLocalService contentupdateLocalService) {
		this.contentupdateLocalService = contentupdateLocalService;
	}

	/**
	 * Returns the contentupdate persistence.
	 *
	 * @return the contentupdate persistence
	 */
	public contentupdatePersistence getcontentupdatePersistence() {
		return contentupdatePersistence;
	}

	/**
	 * Sets the contentupdate persistence.
	 *
	 * @param contentupdatePersistence the contentupdate persistence
	 */
	public void setcontentupdatePersistence(
		contentupdatePersistence contentupdatePersistence) {
		this.contentupdatePersistence = contentupdatePersistence;
	}

	/**
	 * Returns the contentupdate finder.
	 *
	 * @return the contentupdate finder
	 */
	public contentupdateFinder getcontentupdateFinder() {
		return contentupdateFinder;
	}

	/**
	 * Sets the contentupdate finder.
	 *
	 * @param contentupdateFinder the contentupdate finder
	 */
	public void setcontentupdateFinder(contentupdateFinder contentupdateFinder) {
		this.contentupdateFinder = contentupdateFinder;
	}

	/**
	 * Returns the personalisedparameterscontentstore local service.
	 *
	 * @return the personalisedparameterscontentstore local service
	 */
	public com.chola.ppcontent.service.personalisedparameterscontentstoreLocalService getpersonalisedparameterscontentstoreLocalService() {
		return personalisedparameterscontentstoreLocalService;
	}

	/**
	 * Sets the personalisedparameterscontentstore local service.
	 *
	 * @param personalisedparameterscontentstoreLocalService the personalisedparameterscontentstore local service
	 */
	public void setpersonalisedparameterscontentstoreLocalService(
		com.chola.ppcontent.service.personalisedparameterscontentstoreLocalService personalisedparameterscontentstoreLocalService) {
		this.personalisedparameterscontentstoreLocalService = personalisedparameterscontentstoreLocalService;
	}

	/**
	 * Returns the personalisedparameterscontentstore persistence.
	 *
	 * @return the personalisedparameterscontentstore persistence
	 */
	public personalisedparameterscontentstorePersistence getpersonalisedparameterscontentstorePersistence() {
		return personalisedparameterscontentstorePersistence;
	}

	/**
	 * Sets the personalisedparameterscontentstore persistence.
	 *
	 * @param personalisedparameterscontentstorePersistence the personalisedparameterscontentstore persistence
	 */
	public void setpersonalisedparameterscontentstorePersistence(
		personalisedparameterscontentstorePersistence personalisedparameterscontentstorePersistence) {
		this.personalisedparameterscontentstorePersistence = personalisedparameterscontentstorePersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.chola.ppcontent.model.contentuniqueinformation",
			contentuniqueinformationLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.chola.ppcontent.model.contentuniqueinformation");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return contentuniqueinformationLocalService.class.getName();
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return contentuniqueinformation.class;
	}

	protected String getModelClassName() {
		return contentuniqueinformation.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = contentuniqueinformationPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = contentuniqueinformationLocalService.class)
	protected contentuniqueinformationLocalService contentuniqueinformationLocalService;
	@BeanReference(type = contentuniqueinformationPersistence.class)
	protected contentuniqueinformationPersistence contentuniqueinformationPersistence;
	@BeanReference(type = com.chola.ppcontent.service.contentupdateLocalService.class)
	protected com.chola.ppcontent.service.contentupdateLocalService contentupdateLocalService;
	@BeanReference(type = contentupdatePersistence.class)
	protected contentupdatePersistence contentupdatePersistence;
	@BeanReference(type = contentupdateFinder.class)
	protected contentupdateFinder contentupdateFinder;
	@BeanReference(type = com.chola.ppcontent.service.personalisedparameterscontentstoreLocalService.class)
	protected com.chola.ppcontent.service.personalisedparameterscontentstoreLocalService personalisedparameterscontentstoreLocalService;
	@BeanReference(type = personalisedparameterscontentstorePersistence.class)
	protected personalisedparameterscontentstorePersistence personalisedparameterscontentstorePersistence;
	@BeanReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@BeanReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@BeanReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private ClassLoader _classLoader;
	private contentuniqueinformationLocalServiceClpInvoker _clpInvoker = new contentuniqueinformationLocalServiceClpInvoker();
}