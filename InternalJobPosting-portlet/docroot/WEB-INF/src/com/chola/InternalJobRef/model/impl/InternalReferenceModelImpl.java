/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.chola.InternalJobRef.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.chola.InternalJobRef.model.InternalReference;
import com.chola.InternalJobRef.model.InternalReferenceModel;
import com.chola.InternalJobRef.model.InternalReferenceSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the InternalReference service. Represents a row in the &quot;empp_InternalReference&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link InternalReferenceModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link InternalReferenceImpl}.
 * </p>
 *
 * @author CloverLiferay03
 * @see InternalReferenceImpl
 * @see InternalReference
 * @see InternalReferenceModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class InternalReferenceModelImpl extends BaseModelImpl<InternalReference>
	implements InternalReferenceModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a internal reference model instance should use the {@link InternalReference} interface instead.
	 */
	public static final String TABLE_NAME = "empp_InternalReference";
	public static final Object[][] TABLE_COLUMNS = {
			{ "refId", Types.BIGINT },
			{ "title", Types.VARCHAR },
			{ "from_", Types.VARCHAR },
			{ "to_", Types.VARCHAR },
			{ "body", Types.VARCHAR },
			{ "flag", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("refId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("from_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("to_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("body", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("flag", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table empp_InternalReference (refId LONG not null primary key,title VARCHAR(200) null,from_ VARCHAR(200) null,to_ VARCHAR(200) null,body VARCHAR(1000) null,flag LONG,createDate DATE null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table empp_InternalReference";
	public static final String ORDER_BY_JPQL = " ORDER BY internalReference.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY empp_InternalReference.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.chola.InternalJobRef.model.InternalReference"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.chola.InternalJobRef.model.InternalReference"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static InternalReference toModel(InternalReferenceSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		InternalReference model = new InternalReferenceImpl();

		model.setRefId(soapModel.getRefId());
		model.setTitle(soapModel.getTitle());
		model.setFrom(soapModel.getFrom());
		model.setTo(soapModel.getTo());
		model.setBody(soapModel.getBody());
		model.setFlag(soapModel.getFlag());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<InternalReference> toModels(
		InternalReferenceSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<InternalReference> models = new ArrayList<InternalReference>(soapModels.length);

		for (InternalReferenceSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.chola.InternalJobRef.model.InternalReference"));

	public InternalReferenceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _refId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRefId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _refId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return InternalReference.class;
	}

	@Override
	public String getModelClassName() {
		return InternalReference.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("refId", getRefId());
		attributes.put("title", getTitle());
		attributes.put("from", getFrom());
		attributes.put("to", getTo());
		attributes.put("body", getBody());
		attributes.put("flag", getFlag());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long refId = (Long)attributes.get("refId");

		if (refId != null) {
			setRefId(refId);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String from = (String)attributes.get("from");

		if (from != null) {
			setFrom(from);
		}

		String to = (String)attributes.get("to");

		if (to != null) {
			setTo(to);
		}

		String body = (String)attributes.get("body");

		if (body != null) {
			setBody(body);
		}

		Long flag = (Long)attributes.get("flag");

		if (flag != null) {
			setFlag(flag);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@JSON
	@Override
	public long getRefId() {
		return _refId;
	}

	@Override
	public void setRefId(long refId) {
		_refId = refId;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	@Override
	public String getFrom() {
		if (_from == null) {
			return StringPool.BLANK;
		}
		else {
			return _from;
		}
	}

	@Override
	public void setFrom(String from) {
		_from = from;
	}

	@JSON
	@Override
	public String getTo() {
		if (_to == null) {
			return StringPool.BLANK;
		}
		else {
			return _to;
		}
	}

	@Override
	public void setTo(String to) {
		_to = to;
	}

	@JSON
	@Override
	public String getBody() {
		if (_body == null) {
			return StringPool.BLANK;
		}
		else {
			return _body;
		}
	}

	@Override
	public void setBody(String body) {
		_body = body;
	}

	@JSON
	@Override
	public long getFlag() {
		return _flag;
	}

	@Override
	public void setFlag(long flag) {
		_flag = flag;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			InternalReference.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public InternalReference toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (InternalReference)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		InternalReferenceImpl internalReferenceImpl = new InternalReferenceImpl();

		internalReferenceImpl.setRefId(getRefId());
		internalReferenceImpl.setTitle(getTitle());
		internalReferenceImpl.setFrom(getFrom());
		internalReferenceImpl.setTo(getTo());
		internalReferenceImpl.setBody(getBody());
		internalReferenceImpl.setFlag(getFlag());
		internalReferenceImpl.setCreateDate(getCreateDate());
		internalReferenceImpl.setModifiedDate(getModifiedDate());

		internalReferenceImpl.resetOriginalValues();

		return internalReferenceImpl;
	}

	@Override
	public int compareTo(InternalReference internalReference) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(),
				internalReference.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof InternalReference)) {
			return false;
		}

		InternalReference internalReference = (InternalReference)obj;

		long primaryKey = internalReference.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		InternalReferenceModelImpl internalReferenceModelImpl = this;

		internalReferenceModelImpl._setModifiedDate = false;
	}

	@Override
	public CacheModel<InternalReference> toCacheModel() {
		InternalReferenceCacheModel internalReferenceCacheModel = new InternalReferenceCacheModel();

		internalReferenceCacheModel.refId = getRefId();

		internalReferenceCacheModel.title = getTitle();

		String title = internalReferenceCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			internalReferenceCacheModel.title = null;
		}

		internalReferenceCacheModel.from = getFrom();

		String from = internalReferenceCacheModel.from;

		if ((from != null) && (from.length() == 0)) {
			internalReferenceCacheModel.from = null;
		}

		internalReferenceCacheModel.to = getTo();

		String to = internalReferenceCacheModel.to;

		if ((to != null) && (to.length() == 0)) {
			internalReferenceCacheModel.to = null;
		}

		internalReferenceCacheModel.body = getBody();

		String body = internalReferenceCacheModel.body;

		if ((body != null) && (body.length() == 0)) {
			internalReferenceCacheModel.body = null;
		}

		internalReferenceCacheModel.flag = getFlag();

		Date createDate = getCreateDate();

		if (createDate != null) {
			internalReferenceCacheModel.createDate = createDate.getTime();
		}
		else {
			internalReferenceCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			internalReferenceCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			internalReferenceCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return internalReferenceCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{refId=");
		sb.append(getRefId());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", from=");
		sb.append(getFrom());
		sb.append(", to=");
		sb.append(getTo());
		sb.append(", body=");
		sb.append(getBody());
		sb.append(", flag=");
		sb.append(getFlag());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.chola.InternalJobRef.model.InternalReference");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>refId</column-name><column-value><![CDATA[");
		sb.append(getRefId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>from</column-name><column-value><![CDATA[");
		sb.append(getFrom());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>to</column-name><column-value><![CDATA[");
		sb.append(getTo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>body</column-name><column-value><![CDATA[");
		sb.append(getBody());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>flag</column-name><column-value><![CDATA[");
		sb.append(getFlag());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = InternalReference.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			InternalReference.class
		};
	private long _refId;
	private String _title;
	private String _from;
	private String _to;
	private String _body;
	private long _flag;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private InternalReference _escapedModel;
}