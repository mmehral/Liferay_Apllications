/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.chola.videogallery.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.chola.videogallery.model.videogallery;
import com.chola.videogallery.model.videogalleryModel;
import com.chola.videogallery.model.videogallerySoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the videogallery service. Represents a row in the &quot;cholav_videogallery&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link videogalleryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link videogalleryImpl}.
 * </p>
 *
 * @author CloverLiferay02
 * @see videogalleryImpl
 * @see videogallery
 * @see videogalleryModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class videogalleryModelImpl extends BaseModelImpl<videogallery>
	implements videogalleryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a videogallery model instance should use the {@link videogallery} interface instead.
	 */
	public static final String TABLE_NAME = "cholav_videogallery";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "content_id", Types.BIGINT },
			{ "albumName", Types.VARCHAR },
			{ "albumDesc", Types.VARCHAR },
			{ "albumId", Types.VARCHAR },
			{ "createdDate", Types.TIMESTAMP },
			{ "createdBy", Types.VARCHAR },
			{ "flag", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("content_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("albumName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("albumDesc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("albumId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createdBy", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("flag", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table cholav_videogallery (id_ LONG not null primary key,content_id LONG,albumName VARCHAR(200) null,albumDesc VARCHAR(500) null,albumId VARCHAR(75) null,createdDate DATE null,createdBy VARCHAR(75) null,flag VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table cholav_videogallery";
	public static final String ORDER_BY_JPQL = " ORDER BY videogallery.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY cholav_videogallery.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.chola.videogallery.model.videogallery"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.chola.videogallery.model.videogallery"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static videogallery toModel(videogallerySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		videogallery model = new videogalleryImpl();

		model.setId(soapModel.getId());
		model.setContent_id(soapModel.getContent_id());
		model.setAlbumName(soapModel.getAlbumName());
		model.setAlbumDesc(soapModel.getAlbumDesc());
		model.setAlbumId(soapModel.getAlbumId());
		model.setCreatedDate(soapModel.getCreatedDate());
		model.setCreatedBy(soapModel.getCreatedBy());
		model.setFlag(soapModel.getFlag());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<videogallery> toModels(videogallerySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<videogallery> models = new ArrayList<videogallery>(soapModels.length);

		for (videogallerySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.chola.videogallery.model.videogallery"));

	public videogalleryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return videogallery.class;
	}

	@Override
	public String getModelClassName() {
		return videogallery.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("content_id", getContent_id());
		attributes.put("albumName", getAlbumName());
		attributes.put("albumDesc", getAlbumDesc());
		attributes.put("albumId", getAlbumId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("flag", getFlag());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long content_id = (Long)attributes.get("content_id");

		if (content_id != null) {
			setContent_id(content_id);
		}

		String albumName = (String)attributes.get("albumName");

		if (albumName != null) {
			setAlbumName(albumName);
		}

		String albumDesc = (String)attributes.get("albumDesc");

		if (albumDesc != null) {
			setAlbumDesc(albumDesc);
		}

		String albumId = (String)attributes.get("albumId");

		if (albumId != null) {
			setAlbumId(albumId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String createdBy = (String)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		String flag = (String)attributes.get("flag");

		if (flag != null) {
			setFlag(flag);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public long getContent_id() {
		return _content_id;
	}

	@Override
	public void setContent_id(long content_id) {
		_content_id = content_id;
	}

	@JSON
	@Override
	public String getAlbumName() {
		if (_albumName == null) {
			return StringPool.BLANK;
		}
		else {
			return _albumName;
		}
	}

	@Override
	public void setAlbumName(String albumName) {
		_albumName = albumName;
	}

	@JSON
	@Override
	public String getAlbumDesc() {
		if (_albumDesc == null) {
			return StringPool.BLANK;
		}
		else {
			return _albumDesc;
		}
	}

	@Override
	public void setAlbumDesc(String albumDesc) {
		_albumDesc = albumDesc;
	}

	@JSON
	@Override
	public String getAlbumId() {
		if (_albumId == null) {
			return StringPool.BLANK;
		}
		else {
			return _albumId;
		}
	}

	@Override
	public void setAlbumId(String albumId) {
		_albumId = albumId;
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@JSON
	@Override
	public String getCreatedBy() {
		if (_createdBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _createdBy;
		}
	}

	@Override
	public void setCreatedBy(String createdBy) {
		_createdBy = createdBy;
	}

	@JSON
	@Override
	public String getFlag() {
		if (_flag == null) {
			return StringPool.BLANK;
		}
		else {
			return _flag;
		}
	}

	@Override
	public void setFlag(String flag) {
		_flag = flag;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			videogallery.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public videogallery toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (videogallery)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		videogalleryImpl videogalleryImpl = new videogalleryImpl();

		videogalleryImpl.setId(getId());
		videogalleryImpl.setContent_id(getContent_id());
		videogalleryImpl.setAlbumName(getAlbumName());
		videogalleryImpl.setAlbumDesc(getAlbumDesc());
		videogalleryImpl.setAlbumId(getAlbumId());
		videogalleryImpl.setCreatedDate(getCreatedDate());
		videogalleryImpl.setCreatedBy(getCreatedBy());
		videogalleryImpl.setFlag(getFlag());

		videogalleryImpl.resetOriginalValues();

		return videogalleryImpl;
	}

	@Override
	public int compareTo(videogallery videogallery) {
		long primaryKey = videogallery.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof videogallery)) {
			return false;
		}

		videogallery videogallery = (videogallery)obj;

		long primaryKey = videogallery.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<videogallery> toCacheModel() {
		videogalleryCacheModel videogalleryCacheModel = new videogalleryCacheModel();

		videogalleryCacheModel.id = getId();

		videogalleryCacheModel.content_id = getContent_id();

		videogalleryCacheModel.albumName = getAlbumName();

		String albumName = videogalleryCacheModel.albumName;

		if ((albumName != null) && (albumName.length() == 0)) {
			videogalleryCacheModel.albumName = null;
		}

		videogalleryCacheModel.albumDesc = getAlbumDesc();

		String albumDesc = videogalleryCacheModel.albumDesc;

		if ((albumDesc != null) && (albumDesc.length() == 0)) {
			videogalleryCacheModel.albumDesc = null;
		}

		videogalleryCacheModel.albumId = getAlbumId();

		String albumId = videogalleryCacheModel.albumId;

		if ((albumId != null) && (albumId.length() == 0)) {
			videogalleryCacheModel.albumId = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			videogalleryCacheModel.createdDate = createdDate.getTime();
		}
		else {
			videogalleryCacheModel.createdDate = Long.MIN_VALUE;
		}

		videogalleryCacheModel.createdBy = getCreatedBy();

		String createdBy = videogalleryCacheModel.createdBy;

		if ((createdBy != null) && (createdBy.length() == 0)) {
			videogalleryCacheModel.createdBy = null;
		}

		videogalleryCacheModel.flag = getFlag();

		String flag = videogalleryCacheModel.flag;

		if ((flag != null) && (flag.length() == 0)) {
			videogalleryCacheModel.flag = null;
		}

		return videogalleryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", content_id=");
		sb.append(getContent_id());
		sb.append(", albumName=");
		sb.append(getAlbumName());
		sb.append(", albumDesc=");
		sb.append(getAlbumDesc());
		sb.append(", albumId=");
		sb.append(getAlbumId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", flag=");
		sb.append(getFlag());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.chola.videogallery.model.videogallery");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>content_id</column-name><column-value><![CDATA[");
		sb.append(getContent_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>albumName</column-name><column-value><![CDATA[");
		sb.append(getAlbumName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>albumDesc</column-name><column-value><![CDATA[");
		sb.append(getAlbumDesc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>albumId</column-name><column-value><![CDATA[");
		sb.append(getAlbumId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>flag</column-name><column-value><![CDATA[");
		sb.append(getFlag());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = videogallery.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			videogallery.class
		};
	private long _id;
	private long _content_id;
	private String _albumName;
	private String _albumDesc;
	private String _albumId;
	private Date _createdDate;
	private String _createdBy;
	private String _flag;
	private videogallery _escapedModel;
}