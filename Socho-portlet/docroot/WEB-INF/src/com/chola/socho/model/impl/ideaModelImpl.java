/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.chola.socho.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.chola.socho.model.idea;
import com.chola.socho.model.ideaModel;
import com.chola.socho.model.ideaSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the idea service. Represents a row in the &quot;socho_idea&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ideaModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ideaImpl}.
 * </p>
 *
 * @author CloverLiferay02
 * @see ideaImpl
 * @see idea
 * @see ideaModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ideaModelImpl extends BaseModelImpl<idea> implements ideaModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a idea model instance should use the {@link idea} interface instead.
	 */
	public static final String TABLE_NAME = "socho_idea";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "topic", Types.VARCHAR },
			{ "sharedIdea", Types.VARCHAR },
			{ "sharedFile", Types.VARCHAR },
			{ "sharedDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("topic", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sharedIdea", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sharedFile", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sharedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table socho_idea (id_ LONG not null primary key,userId LONG,topic VARCHAR(200) null,sharedIdea TEXT null,sharedFile VARCHAR(1000) null,sharedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table socho_idea";
	public static final String ORDER_BY_JPQL = " ORDER BY idea.sharedDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY socho_idea.sharedDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.chola.socho.model.idea"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.chola.socho.model.idea"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.chola.socho.model.idea"),
			true);
	public static final long TOPIC_COLUMN_BITMASK = 1L;
	public static final long SHAREDDATE_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static idea toModel(ideaSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		idea model = new ideaImpl();

		model.setId(soapModel.getId());
		model.setUserId(soapModel.getUserId());
		model.setTopic(soapModel.getTopic());
		model.setSharedIdea(soapModel.getSharedIdea());
		model.setSharedFile(soapModel.getSharedFile());
		model.setSharedDate(soapModel.getSharedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<idea> toModels(ideaSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<idea> models = new ArrayList<idea>(soapModels.length);

		for (ideaSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.chola.socho.model.idea"));

	public ideaModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return idea.class;
	}

	@Override
	public String getModelClassName() {
		return idea.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("userId", getUserId());
		attributes.put("topic", getTopic());
		attributes.put("sharedIdea", getSharedIdea());
		attributes.put("sharedFile", getSharedFile());
		attributes.put("sharedDate", getSharedDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String topic = (String)attributes.get("topic");

		if (topic != null) {
			setTopic(topic);
		}

		String sharedIdea = (String)attributes.get("sharedIdea");

		if (sharedIdea != null) {
			setSharedIdea(sharedIdea);
		}

		String sharedFile = (String)attributes.get("sharedFile");

		if (sharedFile != null) {
			setSharedFile(sharedFile);
		}

		Date sharedDate = (Date)attributes.get("sharedDate");

		if (sharedDate != null) {
			setSharedDate(sharedDate);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getTopic() {
		if (_topic == null) {
			return StringPool.BLANK;
		}
		else {
			return _topic;
		}
	}

	@Override
	public void setTopic(String topic) {
		_columnBitmask |= TOPIC_COLUMN_BITMASK;

		if (_originalTopic == null) {
			_originalTopic = _topic;
		}

		_topic = topic;
	}

	public String getOriginalTopic() {
		return GetterUtil.getString(_originalTopic);
	}

	@JSON
	@Override
	public String getSharedIdea() {
		if (_sharedIdea == null) {
			return StringPool.BLANK;
		}
		else {
			return _sharedIdea;
		}
	}

	@Override
	public void setSharedIdea(String sharedIdea) {
		_sharedIdea = sharedIdea;
	}

	@JSON
	@Override
	public String getSharedFile() {
		if (_sharedFile == null) {
			return StringPool.BLANK;
		}
		else {
			return _sharedFile;
		}
	}

	@Override
	public void setSharedFile(String sharedFile) {
		_sharedFile = sharedFile;
	}

	@JSON
	@Override
	public Date getSharedDate() {
		return _sharedDate;
	}

	@Override
	public void setSharedDate(Date sharedDate) {
		_columnBitmask = -1L;

		_sharedDate = sharedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			idea.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public idea toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (idea)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ideaImpl ideaImpl = new ideaImpl();

		ideaImpl.setId(getId());
		ideaImpl.setUserId(getUserId());
		ideaImpl.setTopic(getTopic());
		ideaImpl.setSharedIdea(getSharedIdea());
		ideaImpl.setSharedFile(getSharedFile());
		ideaImpl.setSharedDate(getSharedDate());

		ideaImpl.resetOriginalValues();

		return ideaImpl;
	}

	@Override
	public int compareTo(idea idea) {
		int value = 0;

		value = DateUtil.compareTo(getSharedDate(), idea.getSharedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof idea)) {
			return false;
		}

		idea idea = (idea)obj;

		long primaryKey = idea.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ideaModelImpl ideaModelImpl = this;

		ideaModelImpl._originalTopic = ideaModelImpl._topic;

		ideaModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<idea> toCacheModel() {
		ideaCacheModel ideaCacheModel = new ideaCacheModel();

		ideaCacheModel.id = getId();

		ideaCacheModel.userId = getUserId();

		ideaCacheModel.topic = getTopic();

		String topic = ideaCacheModel.topic;

		if ((topic != null) && (topic.length() == 0)) {
			ideaCacheModel.topic = null;
		}

		ideaCacheModel.sharedIdea = getSharedIdea();

		String sharedIdea = ideaCacheModel.sharedIdea;

		if ((sharedIdea != null) && (sharedIdea.length() == 0)) {
			ideaCacheModel.sharedIdea = null;
		}

		ideaCacheModel.sharedFile = getSharedFile();

		String sharedFile = ideaCacheModel.sharedFile;

		if ((sharedFile != null) && (sharedFile.length() == 0)) {
			ideaCacheModel.sharedFile = null;
		}

		Date sharedDate = getSharedDate();

		if (sharedDate != null) {
			ideaCacheModel.sharedDate = sharedDate.getTime();
		}
		else {
			ideaCacheModel.sharedDate = Long.MIN_VALUE;
		}

		return ideaCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", topic=");
		sb.append(getTopic());
		sb.append(", sharedIdea=");
		sb.append(getSharedIdea());
		sb.append(", sharedFile=");
		sb.append(getSharedFile());
		sb.append(", sharedDate=");
		sb.append(getSharedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.chola.socho.model.idea");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>topic</column-name><column-value><![CDATA[");
		sb.append(getTopic());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sharedIdea</column-name><column-value><![CDATA[");
		sb.append(getSharedIdea());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sharedFile</column-name><column-value><![CDATA[");
		sb.append(getSharedFile());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sharedDate</column-name><column-value><![CDATA[");
		sb.append(getSharedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = idea.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			idea.class
		};
	private long _id;
	private long _userId;
	private String _topic;
	private String _originalTopic;
	private String _sharedIdea;
	private String _sharedFile;
	private Date _sharedDate;
	private long _columnBitmask;
	private idea _escapedModel;
}