package com.chola.socho;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import javax.portlet.ActionRequest;
import javax.portlet.ActionResponse;
import javax.portlet.PortletException;
import javax.portlet.ResourceRequest;
import javax.portlet.ResourceResponse;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

import com.chola.socho.model.idea;
import com.chola.socho.model.topics;
import com.chola.socho.service.ideaLocalServiceUtil;
import com.chola.socho.service.topicsLocalServiceUtil;
import com.chola.socho.service.persistence.topicsPersistence;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.liferay.counter.kernel.service.CounterLocalServiceUtil;
import com.liferay.document.library.kernel.model.DLFileEntry;
import com.liferay.document.library.kernel.model.DLFolder;
import com.liferay.document.library.kernel.model.DLFolderConstants;
import com.liferay.document.library.kernel.service.DLAppServiceUtil;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.portlet.LiferayPortletConfig;
import com.liferay.portal.kernel.portlet.bridges.mvc.MVCPortlet;
import com.liferay.portal.kernel.repository.model.FileEntry;
import com.liferay.portal.kernel.repository.model.Folder;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.ServiceContextFactory;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.servlet.SessionErrors;
import com.liferay.portal.kernel.servlet.SessionMessages;
import com.liferay.portal.kernel.theme.ThemeDisplay;
import com.liferay.portal.kernel.upload.FileItem;
import com.liferay.portal.kernel.upload.UploadPortletRequest;
import com.liferay.portal.kernel.util.FileUtil;
import com.liferay.portal.kernel.util.ParamUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.WebKeys;
import com.liferay.util.portlet.PortletProps;

public class Socho extends MVCPortlet {
	
	@Override
	public void serveResource(ResourceRequest resourceRequest, ResourceResponse resourceResponse)
			throws IOException, PortletException {
		System.out.println("Inside Ajax");
		
		String topicId = resourceRequest.getParameter("topicId");
		System.out.println("Topic ID : "+topicId);
		
		List lt = ideaLocalServiceUtil.customFinder(topicId);
		
		System.out.println("Data : "+lt.toString());
		
		PrintWriter writer = resourceResponse.getWriter();
		Iterator it = lt.iterator();
		String json = new Gson().toJson(lt);
	    System.out.println("Strings : "+json);
		System.out.println("Object : " + json);
		writer.print(json);
	}

public String fileUpload(ActionRequest request, ActionResponse response) throws IOException
{
	ThemeDisplay themeDisplay = (ThemeDisplay) request.getAttribute(WebKeys.THEME_DISPLAY);
	String fileName = null;
	UploadPortletRequest uploadRequest = PortalUtil.getUploadPortletRequest(request);
    //Creating the folder Structure in Tomcat as WebApps/SochoUpload/userId folder will create

    String str = "SochoUpload";

	long userId = themeDisplay.getUserId();
	java.util.Properties properties = PortalUtil.getPortalProperties();
	System.out.println("my properties is...." + properties);
	File contestfolder = new File(properties.getProperty("liferay.home") + "/tomcat-8.0.32/webapps/" + str);
	File destinationFile = new File(
			properties.getProperty("liferay.home") + "/tomcat-8.0.32/webapps/" + str + "/" + userId);

	if (!contestfolder.exists()) {
		destinationFile.mkdirs();
		System.out.println("type directory exists");
	}
	System.out.println("my directory is : " + contestfolder);

	if (!destinationFile.exists()) {
		destinationFile.mkdirs();
		System.out.println("type directory exists");
	}
	System.out.println("my directory is : " + destinationFile);
	
			
			
	File sourceFile = uploadRequest.getFile("uploadedFile");
	fileName = uploadRequest.getFileName("uploadedFile");
		
	if(fileName!=null){
			/**************** SAVE THE DOC ********************************/
		if (destinationFile.exists()) {
			fileName.lastIndexOf(".");
			String fileNa = fileName.substring(0,fileName.lastIndexOf("."));
			System.out.println("fileName : " + fileNa);
			String fileExtension = fileName.substring(fileName.lastIndexOf("."), fileName.length());
			System.out.println("fileExtension : "+ fileExtension);
			//System.out.println("FileName:-" + fileNa + " File Extension:-"+ fileExtension4);
			fileName = fileNa;
			SimpleDateFormat df2 = new SimpleDateFormat("dd_MM_yyyy_HH_mm_ss");
			Date date = new Date();
			String testDateString = df2.format(date);
			fileName = fileName +"_"+testDateString +fileExtension;

			destinationFile = new File(
					properties.getProperty("liferay.home") + "/tomcat-8.0.32/webapps/" + str + "/" + userId + "/" + fileName);

			System.out.println("destinationFile : " + destinationFile);

		}
		System.out.println("File : " + fileName);
		FileUtil.copyFile(sourceFile, destinationFile);
		
		
		String FilePath = destinationFile.toString();
		System.out.println("Successfully Saved the Document");
		/*************** ENDED THE SAVING ******************/
		System.out.println(FilePath);
}
	return fileName;
}
	
	public void save(ActionRequest request, ActionResponse response) throws PortalException, IOException {
		
		ThemeDisplay themeDisplay = (ThemeDisplay) request.getAttribute(WebKeys.THEME_DISPLAY);
		
		UploadPortletRequest uploadPortletRequest = PortalUtil.getUploadPortletRequest(request);
		String sourceFileName = uploadPortletRequest.getFileName("uploadedFile");
		
		System.out.println("File Name : "+sourceFileName);
		
		String fileName=null;
		if(!sourceFileName.equalsIgnoreCase(""))
		{
			System.out.println("File selected by user");
			fileName = fileUpload(request,response);
		}
		else
		{
			System.out.println("File not selected by user");
		}
		
		String idea = request.getParameter("idea");
		idea = idea.replace("\n", " ").replace("\r", " ");
		System.out.println("Idea : "+idea+" shared by : "+themeDisplay.getUserId());
		
		String topic = request.getParameter("topic");
		System.out.println("Topic : "+topic);
		
		//check that a topic already exists
		List list = topicsLocalServiceUtil.customFinder(topic);
		
		if(!list.isEmpty())
		{
			System.out.println("Topic already there");
			SessionErrors.add(request, "topic-already-there");
			SessionMessages.add(request, PortalUtil.getPortletId(request) + SessionMessages.KEY_SUFFIX_HIDE_DEFAULT_ERROR_MESSAGE);
		}
		else
		{
			System.out.println("Proceed");
		
		topics topics = topicsLocalServiceUtil.createtopics(CounterLocalServiceUtil.increment());
		topics.setTopicName(topic);
		topics.setFlag(Long.parseLong("1"));
		topics.setCreatedBy(themeDisplay.getUserId());
		topics.setCreatedOn(new Date());
		topics =topicsLocalServiceUtil.addtopics(topics);
				
		
		com.chola.socho.model.idea ideas = ideaLocalServiceUtil.createidea(CounterLocalServiceUtil.increment());
		ideas.setUserId(themeDisplay.getUserId());
		ideas.setTopic(String.valueOf(topics.getId()));
		ideas.setSharedIdea(idea);
		ideas.setSharedDate(new Date());
		ideas.setSharedFile(fileName);
		ideas = ideaLocalServiceUtil.addidea(ideas);
		
		System.out.println("Idea created without topic : "+ideas.getId());
		
		}
	}
	
	public void add(ActionRequest request, ActionResponse response) throws PortalException {
		
		System.out.println("Inside Add Method");
		ThemeDisplay themeDisplay = (ThemeDisplay) request.getAttribute(WebKeys.THEME_DISPLAY);
		
		String topic = request.getParameter("topic");
		topic = topic.replace("\n", " ").replace("\r", " ");
		System.out.println("topic : "+topic);
		
		List list = topicsLocalServiceUtil.customFinder(topic);
		
		if(!list.isEmpty())
		{
			System.out.println("Topic already there");
			SessionErrors.add(request, "topic-already-there");
			SessionMessages.add(request, PortalUtil.getPortletId(request) + SessionMessages.KEY_SUFFIX_HIDE_DEFAULT_ERROR_MESSAGE);
		}
		else
		{
			System.out.println("Proceed");
		
		topics topicClass = topicsLocalServiceUtil.createtopics(CounterLocalServiceUtil.increment());
		topicClass.setTopicName(topic);
		topicClass.setFlag(1);
		topicClass.setCreatedBy(themeDisplay.getUserId());
		topicClass.setCreatedOn(new Date());
		
		topicClass = topicsLocalServiceUtil.addtopics(topicClass);
		
		System.out.println("Topic created and ID generated : "+topicClass.getId());
		}
	}
	
	public void share(ActionRequest request, ActionResponse response) throws PortalException, IOException {
		ThemeDisplay themeDisplay = (ThemeDisplay) request.getAttribute(WebKeys.THEME_DISPLAY);
		
		UploadPortletRequest uploadPortletRequest = PortalUtil.getUploadPortletRequest(request);
		String sourceFileName = uploadPortletRequest.getFileName("uploadedFile");
		
		System.out.println("File Name : "+sourceFileName);
		
		String fileName=null;
		if(!sourceFileName.equalsIgnoreCase(""))
		{
			System.out.println("File selected by user");
			fileName = fileUpload(request,response);
		}
		else
		{
			System.out.println("File not selected by user");
		}
		
		
		String topic = request.getParameter("topicSelect");
		System.out.println("topic : "+topic);
		
		String idea = request.getParameter("idea");
		idea = idea.replace("\n", " ").replace("\r", " ");
		System.out.println("idea : "+idea);
		
		com.chola.socho.model.idea ideas = ideaLocalServiceUtil.createidea(CounterLocalServiceUtil.increment());
		ideas.setUserId(themeDisplay.getUserId());
		ideas.setTopic(topic);
		ideas.setSharedIdea(idea);
		ideas.setSharedDate(new Date());
		ideas.setSharedFile(fileName);
		ideas = ideaLocalServiceUtil.addidea(ideas);
		
		System.out.println("Idea created with topic : "+ideas.getId());
		
	}
	
	public void deleteTopic(ActionRequest request, ActionResponse response) throws PortalException {
		
		ThemeDisplay themeDisplay = (ThemeDisplay) request.getAttribute(WebKeys.THEME_DISPLAY);
		
		System.out.println("Inside Delete Topic");
		long id = ParamUtil.getInteger(request, "id");
		
		System.out.println("ID to be deleted : "+id);
		
		if(id>=1)
		{
			topics topics = topicsLocalServiceUtil.fetchtopics(id);
			topics.setFlag(2);
			topics.setModifiedBy(themeDisplay.getUserId());
			topics.setModifiedOn(new Date());
			topicsLocalServiceUtil.updatetopics(topics);
			System.out.println("Record deleted Successfully");
			response.setRenderParameter("jspPage", "/view.jsp");
		}
	}
	
public void updateTopic(ActionRequest request, ActionResponse response) throws PortalException {
		
	ThemeDisplay themeDisplay = (ThemeDisplay) request.getAttribute(WebKeys.THEME_DISPLAY);
	
		System.out.println("Inside Update Topic");
		long id = ParamUtil.getInteger(request, "id");
		
		String topic = ParamUtil.getString(request, "topic");
		
		System.out.println("ID to be updated : "+id+" Content : "+topic);
		
		
			topics topics = topicsLocalServiceUtil.fetchtopics(id);
			topics.setTopicName(topic);
			topics.setModifiedBy(themeDisplay.getUserId());
			topics.setModifiedOn(new Date());
			topicsLocalServiceUtil.updatetopics(topics);
			System.out.println("Record Updated Successfully");
		
	}
public void addComment(ActionRequest actionRequest, ActionResponse actionResponse) {
	System.out.println("Comment=======");

	try {
		invokeTaglibDiscussion(actionRequest, actionResponse);
		System.out.println("Comment added Successfully..............");
	} catch (Exception e) {
		e.printStackTrace();
	}
}
	
}
