/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.chola.socho.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.chola.socho.model.topics;
import com.chola.socho.model.topicsModel;
import com.chola.socho.model.topicsSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the topics service. Represents a row in the &quot;socho_topics&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link topicsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link topicsImpl}.
 * </p>
 *
 * @author CloverLiferay02
 * @see topicsImpl
 * @see topics
 * @see topicsModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class topicsModelImpl extends BaseModelImpl<topics>
	implements topicsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a topics model instance should use the {@link topics} interface instead.
	 */
	public static final String TABLE_NAME = "socho_topics";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "topicName", Types.VARCHAR },
			{ "flag", Types.BIGINT },
			{ "createdBy", Types.BIGINT },
			{ "createdOn", Types.TIMESTAMP },
			{ "modifiedBy", Types.BIGINT },
			{ "modifiedOn", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("topicName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("flag", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdOn", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedOn", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table socho_topics (id_ LONG not null primary key,topicName VARCHAR(75) null,flag LONG,createdBy LONG,createdOn DATE null,modifiedBy LONG,modifiedOn DATE null)";
	public static final String TABLE_SQL_DROP = "drop table socho_topics";
	public static final String ORDER_BY_JPQL = " ORDER BY topics.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY socho_topics.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.chola.socho.model.topics"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.chola.socho.model.topics"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.chola.socho.model.topics"),
			true);
	public static final long TOPICNAME_COLUMN_BITMASK = 1L;
	public static final long ID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static topics toModel(topicsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		topics model = new topicsImpl();

		model.setId(soapModel.getId());
		model.setTopicName(soapModel.getTopicName());
		model.setFlag(soapModel.getFlag());
		model.setCreatedBy(soapModel.getCreatedBy());
		model.setCreatedOn(soapModel.getCreatedOn());
		model.setModifiedBy(soapModel.getModifiedBy());
		model.setModifiedOn(soapModel.getModifiedOn());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<topics> toModels(topicsSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<topics> models = new ArrayList<topics>(soapModels.length);

		for (topicsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.chola.socho.model.topics"));

	public topicsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return topics.class;
	}

	@Override
	public String getModelClassName() {
		return topics.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("topicName", getTopicName());
		attributes.put("flag", getFlag());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("createdOn", getCreatedOn());
		attributes.put("modifiedBy", getModifiedBy());
		attributes.put("modifiedOn", getModifiedOn());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String topicName = (String)attributes.get("topicName");

		if (topicName != null) {
			setTopicName(topicName);
		}

		Long flag = (Long)attributes.get("flag");

		if (flag != null) {
			setFlag(flag);
		}

		Long createdBy = (Long)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Date createdOn = (Date)attributes.get("createdOn");

		if (createdOn != null) {
			setCreatedOn(createdOn);
		}

		Long modifiedBy = (Long)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}

		Date modifiedOn = (Date)attributes.get("modifiedOn");

		if (modifiedOn != null) {
			setModifiedOn(modifiedOn);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public String getTopicName() {
		if (_topicName == null) {
			return StringPool.BLANK;
		}
		else {
			return _topicName;
		}
	}

	@Override
	public void setTopicName(String topicName) {
		_columnBitmask |= TOPICNAME_COLUMN_BITMASK;

		if (_originalTopicName == null) {
			_originalTopicName = _topicName;
		}

		_topicName = topicName;
	}

	public String getOriginalTopicName() {
		return GetterUtil.getString(_originalTopicName);
	}

	@JSON
	@Override
	public long getFlag() {
		return _flag;
	}

	@Override
	public void setFlag(long flag) {
		_flag = flag;
	}

	@JSON
	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		_createdBy = createdBy;
	}

	@JSON
	@Override
	public Date getCreatedOn() {
		return _createdOn;
	}

	@Override
	public void setCreatedOn(Date createdOn) {
		_createdOn = createdOn;
	}

	@JSON
	@Override
	public long getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(long modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@JSON
	@Override
	public Date getModifiedOn() {
		return _modifiedOn;
	}

	@Override
	public void setModifiedOn(Date modifiedOn) {
		_modifiedOn = modifiedOn;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			topics.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public topics toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (topics)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		topicsImpl topicsImpl = new topicsImpl();

		topicsImpl.setId(getId());
		topicsImpl.setTopicName(getTopicName());
		topicsImpl.setFlag(getFlag());
		topicsImpl.setCreatedBy(getCreatedBy());
		topicsImpl.setCreatedOn(getCreatedOn());
		topicsImpl.setModifiedBy(getModifiedBy());
		topicsImpl.setModifiedOn(getModifiedOn());

		topicsImpl.resetOriginalValues();

		return topicsImpl;
	}

	@Override
	public int compareTo(topics topics) {
		long primaryKey = topics.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof topics)) {
			return false;
		}

		topics topics = (topics)obj;

		long primaryKey = topics.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		topicsModelImpl topicsModelImpl = this;

		topicsModelImpl._originalTopicName = topicsModelImpl._topicName;

		topicsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<topics> toCacheModel() {
		topicsCacheModel topicsCacheModel = new topicsCacheModel();

		topicsCacheModel.id = getId();

		topicsCacheModel.topicName = getTopicName();

		String topicName = topicsCacheModel.topicName;

		if ((topicName != null) && (topicName.length() == 0)) {
			topicsCacheModel.topicName = null;
		}

		topicsCacheModel.flag = getFlag();

		topicsCacheModel.createdBy = getCreatedBy();

		Date createdOn = getCreatedOn();

		if (createdOn != null) {
			topicsCacheModel.createdOn = createdOn.getTime();
		}
		else {
			topicsCacheModel.createdOn = Long.MIN_VALUE;
		}

		topicsCacheModel.modifiedBy = getModifiedBy();

		Date modifiedOn = getModifiedOn();

		if (modifiedOn != null) {
			topicsCacheModel.modifiedOn = modifiedOn.getTime();
		}
		else {
			topicsCacheModel.modifiedOn = Long.MIN_VALUE;
		}

		return topicsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", topicName=");
		sb.append(getTopicName());
		sb.append(", flag=");
		sb.append(getFlag());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", createdOn=");
		sb.append(getCreatedOn());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", modifiedOn=");
		sb.append(getModifiedOn());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.chola.socho.model.topics");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>topicName</column-name><column-value><![CDATA[");
		sb.append(getTopicName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>flag</column-name><column-value><![CDATA[");
		sb.append(getFlag());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdOn</column-name><column-value><![CDATA[");
		sb.append(getCreatedOn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedOn</column-name><column-value><![CDATA[");
		sb.append(getModifiedOn());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = topics.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			topics.class
		};
	private long _id;
	private String _topicName;
	private String _originalTopicName;
	private long _flag;
	private long _createdBy;
	private Date _createdOn;
	private long _modifiedBy;
	private Date _modifiedOn;
	private long _columnBitmask;
	private topics _escapedModel;
}