/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.chola.shutterspeed.service.base;

import aQute.bnd.annotation.ProviderType;

import com.chola.shutterspeed.model.shutterspeedgalleryusers;
import com.chola.shutterspeed.service.persistence.shutterspeedgalleryFinder;
import com.chola.shutterspeed.service.persistence.shutterspeedgalleryPersistence;
import com.chola.shutterspeed.service.persistence.shutterspeedgallerypathPersistence;
import com.chola.shutterspeed.service.persistence.shutterspeedgalleryusersPersistence;
import com.chola.shutterspeed.service.shutterspeedgalleryusersLocalService;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the shutterspeedgalleryusers local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.chola.shutterspeed.service.impl.shutterspeedgalleryusersLocalServiceImpl}.
 * </p>
 *
 * @author CloverLiferay02
 * @see com.chola.shutterspeed.service.impl.shutterspeedgalleryusersLocalServiceImpl
 * @see com.chola.shutterspeed.service.shutterspeedgalleryusersLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class shutterspeedgalleryusersLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements shutterspeedgalleryusersLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.chola.shutterspeed.service.shutterspeedgalleryusersLocalServiceUtil} to access the shutterspeedgalleryusers local service.
	 */

	/**
	 * Adds the shutterspeedgalleryusers to the database. Also notifies the appropriate model listeners.
	 *
	 * @param shutterspeedgalleryusers the shutterspeedgalleryusers
	 * @return the shutterspeedgalleryusers that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public shutterspeedgalleryusers addshutterspeedgalleryusers(
		shutterspeedgalleryusers shutterspeedgalleryusers) {
		shutterspeedgalleryusers.setNew(true);

		return shutterspeedgalleryusersPersistence.update(shutterspeedgalleryusers);
	}

	/**
	 * Creates a new shutterspeedgalleryusers with the primary key. Does not add the shutterspeedgalleryusers to the database.
	 *
	 * @param id the primary key for the new shutterspeedgalleryusers
	 * @return the new shutterspeedgalleryusers
	 */
	@Override
	public shutterspeedgalleryusers createshutterspeedgalleryusers(long id) {
		return shutterspeedgalleryusersPersistence.create(id);
	}

	/**
	 * Deletes the shutterspeedgalleryusers with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param id the primary key of the shutterspeedgalleryusers
	 * @return the shutterspeedgalleryusers that was removed
	 * @throws PortalException if a shutterspeedgalleryusers with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public shutterspeedgalleryusers deleteshutterspeedgalleryusers(long id)
		throws PortalException {
		return shutterspeedgalleryusersPersistence.remove(id);
	}

	/**
	 * Deletes the shutterspeedgalleryusers from the database. Also notifies the appropriate model listeners.
	 *
	 * @param shutterspeedgalleryusers the shutterspeedgalleryusers
	 * @return the shutterspeedgalleryusers that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public shutterspeedgalleryusers deleteshutterspeedgalleryusers(
		shutterspeedgalleryusers shutterspeedgalleryusers) {
		return shutterspeedgalleryusersPersistence.remove(shutterspeedgalleryusers);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(shutterspeedgalleryusers.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return shutterspeedgalleryusersPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.chola.shutterspeed.model.impl.shutterspeedgalleryusersModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return shutterspeedgalleryusersPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.chola.shutterspeed.model.impl.shutterspeedgalleryusersModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return shutterspeedgalleryusersPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return shutterspeedgalleryusersPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return shutterspeedgalleryusersPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public shutterspeedgalleryusers fetchshutterspeedgalleryusers(long id) {
		return shutterspeedgalleryusersPersistence.fetchByPrimaryKey(id);
	}

	/**
	 * Returns the shutterspeedgalleryusers with the primary key.
	 *
	 * @param id the primary key of the shutterspeedgalleryusers
	 * @return the shutterspeedgalleryusers
	 * @throws PortalException if a shutterspeedgalleryusers with the primary key could not be found
	 */
	@Override
	public shutterspeedgalleryusers getshutterspeedgalleryusers(long id)
		throws PortalException {
		return shutterspeedgalleryusersPersistence.findByPrimaryKey(id);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(shutterspeedgalleryusersLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(shutterspeedgalleryusers.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(shutterspeedgalleryusersLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(shutterspeedgalleryusers.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(shutterspeedgalleryusersLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(shutterspeedgalleryusers.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return shutterspeedgalleryusersLocalService.deleteshutterspeedgalleryusers((shutterspeedgalleryusers)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return shutterspeedgalleryusersPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the shutterspeedgalleryuserses.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.chola.shutterspeed.model.impl.shutterspeedgalleryusersModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of shutterspeedgalleryuserses
	 * @param end the upper bound of the range of shutterspeedgalleryuserses (not inclusive)
	 * @return the range of shutterspeedgalleryuserses
	 */
	@Override
	public List<shutterspeedgalleryusers> getshutterspeedgalleryuserses(
		int start, int end) {
		return shutterspeedgalleryusersPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of shutterspeedgalleryuserses.
	 *
	 * @return the number of shutterspeedgalleryuserses
	 */
	@Override
	public int getshutterspeedgalleryusersesCount() {
		return shutterspeedgalleryusersPersistence.countAll();
	}

	/**
	 * Updates the shutterspeedgalleryusers in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param shutterspeedgalleryusers the shutterspeedgalleryusers
	 * @return the shutterspeedgalleryusers that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public shutterspeedgalleryusers updateshutterspeedgalleryusers(
		shutterspeedgalleryusers shutterspeedgalleryusers) {
		return shutterspeedgalleryusersPersistence.update(shutterspeedgalleryusers);
	}

	/**
	 * Returns the shutterspeedgallery local service.
	 *
	 * @return the shutterspeedgallery local service
	 */
	public com.chola.shutterspeed.service.shutterspeedgalleryLocalService getshutterspeedgalleryLocalService() {
		return shutterspeedgalleryLocalService;
	}

	/**
	 * Sets the shutterspeedgallery local service.
	 *
	 * @param shutterspeedgalleryLocalService the shutterspeedgallery local service
	 */
	public void setshutterspeedgalleryLocalService(
		com.chola.shutterspeed.service.shutterspeedgalleryLocalService shutterspeedgalleryLocalService) {
		this.shutterspeedgalleryLocalService = shutterspeedgalleryLocalService;
	}

	/**
	 * Returns the shutterspeedgallery persistence.
	 *
	 * @return the shutterspeedgallery persistence
	 */
	public shutterspeedgalleryPersistence getshutterspeedgalleryPersistence() {
		return shutterspeedgalleryPersistence;
	}

	/**
	 * Sets the shutterspeedgallery persistence.
	 *
	 * @param shutterspeedgalleryPersistence the shutterspeedgallery persistence
	 */
	public void setshutterspeedgalleryPersistence(
		shutterspeedgalleryPersistence shutterspeedgalleryPersistence) {
		this.shutterspeedgalleryPersistence = shutterspeedgalleryPersistence;
	}

	/**
	 * Returns the shutterspeedgallery finder.
	 *
	 * @return the shutterspeedgallery finder
	 */
	public shutterspeedgalleryFinder getshutterspeedgalleryFinder() {
		return shutterspeedgalleryFinder;
	}

	/**
	 * Sets the shutterspeedgallery finder.
	 *
	 * @param shutterspeedgalleryFinder the shutterspeedgallery finder
	 */
	public void setshutterspeedgalleryFinder(
		shutterspeedgalleryFinder shutterspeedgalleryFinder) {
		this.shutterspeedgalleryFinder = shutterspeedgalleryFinder;
	}

	/**
	 * Returns the shutterspeedgallerypath local service.
	 *
	 * @return the shutterspeedgallerypath local service
	 */
	public com.chola.shutterspeed.service.shutterspeedgallerypathLocalService getshutterspeedgallerypathLocalService() {
		return shutterspeedgallerypathLocalService;
	}

	/**
	 * Sets the shutterspeedgallerypath local service.
	 *
	 * @param shutterspeedgallerypathLocalService the shutterspeedgallerypath local service
	 */
	public void setshutterspeedgallerypathLocalService(
		com.chola.shutterspeed.service.shutterspeedgallerypathLocalService shutterspeedgallerypathLocalService) {
		this.shutterspeedgallerypathLocalService = shutterspeedgallerypathLocalService;
	}

	/**
	 * Returns the shutterspeedgallerypath persistence.
	 *
	 * @return the shutterspeedgallerypath persistence
	 */
	public shutterspeedgallerypathPersistence getshutterspeedgallerypathPersistence() {
		return shutterspeedgallerypathPersistence;
	}

	/**
	 * Sets the shutterspeedgallerypath persistence.
	 *
	 * @param shutterspeedgallerypathPersistence the shutterspeedgallerypath persistence
	 */
	public void setshutterspeedgallerypathPersistence(
		shutterspeedgallerypathPersistence shutterspeedgallerypathPersistence) {
		this.shutterspeedgallerypathPersistence = shutterspeedgallerypathPersistence;
	}

	/**
	 * Returns the shutterspeedgalleryusers local service.
	 *
	 * @return the shutterspeedgalleryusers local service
	 */
	public shutterspeedgalleryusersLocalService getshutterspeedgalleryusersLocalService() {
		return shutterspeedgalleryusersLocalService;
	}

	/**
	 * Sets the shutterspeedgalleryusers local service.
	 *
	 * @param shutterspeedgalleryusersLocalService the shutterspeedgalleryusers local service
	 */
	public void setshutterspeedgalleryusersLocalService(
		shutterspeedgalleryusersLocalService shutterspeedgalleryusersLocalService) {
		this.shutterspeedgalleryusersLocalService = shutterspeedgalleryusersLocalService;
	}

	/**
	 * Returns the shutterspeedgalleryusers persistence.
	 *
	 * @return the shutterspeedgalleryusers persistence
	 */
	public shutterspeedgalleryusersPersistence getshutterspeedgalleryusersPersistence() {
		return shutterspeedgalleryusersPersistence;
	}

	/**
	 * Sets the shutterspeedgalleryusers persistence.
	 *
	 * @param shutterspeedgalleryusersPersistence the shutterspeedgalleryusers persistence
	 */
	public void setshutterspeedgalleryusersPersistence(
		shutterspeedgalleryusersPersistence shutterspeedgalleryusersPersistence) {
		this.shutterspeedgalleryusersPersistence = shutterspeedgalleryusersPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.chola.shutterspeed.model.shutterspeedgalleryusers",
			shutterspeedgalleryusersLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.chola.shutterspeed.model.shutterspeedgalleryusers");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return shutterspeedgalleryusersLocalService.class.getName();
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return shutterspeedgalleryusers.class;
	}

	protected String getModelClassName() {
		return shutterspeedgalleryusers.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = shutterspeedgalleryusersPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.chola.shutterspeed.service.shutterspeedgalleryLocalService.class)
	protected com.chola.shutterspeed.service.shutterspeedgalleryLocalService shutterspeedgalleryLocalService;
	@BeanReference(type = shutterspeedgalleryPersistence.class)
	protected shutterspeedgalleryPersistence shutterspeedgalleryPersistence;
	@BeanReference(type = shutterspeedgalleryFinder.class)
	protected shutterspeedgalleryFinder shutterspeedgalleryFinder;
	@BeanReference(type = com.chola.shutterspeed.service.shutterspeedgallerypathLocalService.class)
	protected com.chola.shutterspeed.service.shutterspeedgallerypathLocalService shutterspeedgallerypathLocalService;
	@BeanReference(type = shutterspeedgallerypathPersistence.class)
	protected shutterspeedgallerypathPersistence shutterspeedgallerypathPersistence;
	@BeanReference(type = shutterspeedgalleryusersLocalService.class)
	protected shutterspeedgalleryusersLocalService shutterspeedgalleryusersLocalService;
	@BeanReference(type = shutterspeedgalleryusersPersistence.class)
	protected shutterspeedgalleryusersPersistence shutterspeedgalleryusersPersistence;
	@BeanReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@BeanReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@BeanReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private ClassLoader _classLoader;
	private shutterspeedgalleryusersLocalServiceClpInvoker _clpInvoker = new shutterspeedgalleryusersLocalServiceClpInvoker();
}