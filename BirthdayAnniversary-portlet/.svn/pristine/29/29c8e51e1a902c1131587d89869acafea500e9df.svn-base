/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.chola.birthday.service.base;

import aQute.bnd.annotation.ProviderType;

import com.chola.birthday.model.predefinedmessages;
import com.chola.birthday.service.persistence.birthdaywishFinder;
import com.chola.birthday.service.persistence.birthdaywishPersistence;
import com.chola.birthday.service.persistence.predefinedmessagesPersistence;
import com.chola.birthday.service.predefinedmessagesLocalService;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the predefinedmessages local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.chola.birthday.service.impl.predefinedmessagesLocalServiceImpl}.
 * </p>
 *
 * @author CloverLiferay02
 * @see com.chola.birthday.service.impl.predefinedmessagesLocalServiceImpl
 * @see com.chola.birthday.service.predefinedmessagesLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class predefinedmessagesLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements predefinedmessagesLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.chola.birthday.service.predefinedmessagesLocalServiceUtil} to access the predefinedmessages local service.
	 */

	/**
	 * Adds the predefinedmessages to the database. Also notifies the appropriate model listeners.
	 *
	 * @param predefinedmessages the predefinedmessages
	 * @return the predefinedmessages that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public predefinedmessages addpredefinedmessages(
		predefinedmessages predefinedmessages) {
		predefinedmessages.setNew(true);

		return predefinedmessagesPersistence.update(predefinedmessages);
	}

	/**
	 * Creates a new predefinedmessages with the primary key. Does not add the predefinedmessages to the database.
	 *
	 * @param id the primary key for the new predefinedmessages
	 * @return the new predefinedmessages
	 */
	@Override
	public predefinedmessages createpredefinedmessages(long id) {
		return predefinedmessagesPersistence.create(id);
	}

	/**
	 * Deletes the predefinedmessages with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param id the primary key of the predefinedmessages
	 * @return the predefinedmessages that was removed
	 * @throws PortalException if a predefinedmessages with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public predefinedmessages deletepredefinedmessages(long id)
		throws PortalException {
		return predefinedmessagesPersistence.remove(id);
	}

	/**
	 * Deletes the predefinedmessages from the database. Also notifies the appropriate model listeners.
	 *
	 * @param predefinedmessages the predefinedmessages
	 * @return the predefinedmessages that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public predefinedmessages deletepredefinedmessages(
		predefinedmessages predefinedmessages) {
		return predefinedmessagesPersistence.remove(predefinedmessages);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(predefinedmessages.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return predefinedmessagesPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.chola.birthday.model.impl.predefinedmessagesModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return predefinedmessagesPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.chola.birthday.model.impl.predefinedmessagesModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return predefinedmessagesPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return predefinedmessagesPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return predefinedmessagesPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public predefinedmessages fetchpredefinedmessages(long id) {
		return predefinedmessagesPersistence.fetchByPrimaryKey(id);
	}

	/**
	 * Returns the predefinedmessages with the primary key.
	 *
	 * @param id the primary key of the predefinedmessages
	 * @return the predefinedmessages
	 * @throws PortalException if a predefinedmessages with the primary key could not be found
	 */
	@Override
	public predefinedmessages getpredefinedmessages(long id)
		throws PortalException {
		return predefinedmessagesPersistence.findByPrimaryKey(id);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(predefinedmessagesLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(predefinedmessages.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(predefinedmessagesLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(predefinedmessages.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(predefinedmessagesLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(predefinedmessages.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return predefinedmessagesLocalService.deletepredefinedmessages((predefinedmessages)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return predefinedmessagesPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the predefinedmessageses.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.chola.birthday.model.impl.predefinedmessagesModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of predefinedmessageses
	 * @param end the upper bound of the range of predefinedmessageses (not inclusive)
	 * @return the range of predefinedmessageses
	 */
	@Override
	public List<predefinedmessages> getpredefinedmessageses(int start, int end) {
		return predefinedmessagesPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of predefinedmessageses.
	 *
	 * @return the number of predefinedmessageses
	 */
	@Override
	public int getpredefinedmessagesesCount() {
		return predefinedmessagesPersistence.countAll();
	}

	/**
	 * Updates the predefinedmessages in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param predefinedmessages the predefinedmessages
	 * @return the predefinedmessages that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public predefinedmessages updatepredefinedmessages(
		predefinedmessages predefinedmessages) {
		return predefinedmessagesPersistence.update(predefinedmessages);
	}

	/**
	 * Returns the birthdaywish local service.
	 *
	 * @return the birthdaywish local service
	 */
	public com.chola.birthday.service.birthdaywishLocalService getbirthdaywishLocalService() {
		return birthdaywishLocalService;
	}

	/**
	 * Sets the birthdaywish local service.
	 *
	 * @param birthdaywishLocalService the birthdaywish local service
	 */
	public void setbirthdaywishLocalService(
		com.chola.birthday.service.birthdaywishLocalService birthdaywishLocalService) {
		this.birthdaywishLocalService = birthdaywishLocalService;
	}

	/**
	 * Returns the birthdaywish persistence.
	 *
	 * @return the birthdaywish persistence
	 */
	public birthdaywishPersistence getbirthdaywishPersistence() {
		return birthdaywishPersistence;
	}

	/**
	 * Sets the birthdaywish persistence.
	 *
	 * @param birthdaywishPersistence the birthdaywish persistence
	 */
	public void setbirthdaywishPersistence(
		birthdaywishPersistence birthdaywishPersistence) {
		this.birthdaywishPersistence = birthdaywishPersistence;
	}

	/**
	 * Returns the birthdaywish finder.
	 *
	 * @return the birthdaywish finder
	 */
	public birthdaywishFinder getbirthdaywishFinder() {
		return birthdaywishFinder;
	}

	/**
	 * Sets the birthdaywish finder.
	 *
	 * @param birthdaywishFinder the birthdaywish finder
	 */
	public void setbirthdaywishFinder(birthdaywishFinder birthdaywishFinder) {
		this.birthdaywishFinder = birthdaywishFinder;
	}

	/**
	 * Returns the predefinedmessages local service.
	 *
	 * @return the predefinedmessages local service
	 */
	public predefinedmessagesLocalService getpredefinedmessagesLocalService() {
		return predefinedmessagesLocalService;
	}

	/**
	 * Sets the predefinedmessages local service.
	 *
	 * @param predefinedmessagesLocalService the predefinedmessages local service
	 */
	public void setpredefinedmessagesLocalService(
		predefinedmessagesLocalService predefinedmessagesLocalService) {
		this.predefinedmessagesLocalService = predefinedmessagesLocalService;
	}

	/**
	 * Returns the predefinedmessages persistence.
	 *
	 * @return the predefinedmessages persistence
	 */
	public predefinedmessagesPersistence getpredefinedmessagesPersistence() {
		return predefinedmessagesPersistence;
	}

	/**
	 * Sets the predefinedmessages persistence.
	 *
	 * @param predefinedmessagesPersistence the predefinedmessages persistence
	 */
	public void setpredefinedmessagesPersistence(
		predefinedmessagesPersistence predefinedmessagesPersistence) {
		this.predefinedmessagesPersistence = predefinedmessagesPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.chola.birthday.model.predefinedmessages",
			predefinedmessagesLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.chola.birthday.model.predefinedmessages");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return predefinedmessagesLocalService.class.getName();
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return predefinedmessages.class;
	}

	protected String getModelClassName() {
		return predefinedmessages.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = predefinedmessagesPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.chola.birthday.service.birthdaywishLocalService.class)
	protected com.chola.birthday.service.birthdaywishLocalService birthdaywishLocalService;
	@BeanReference(type = birthdaywishPersistence.class)
	protected birthdaywishPersistence birthdaywishPersistence;
	@BeanReference(type = birthdaywishFinder.class)
	protected birthdaywishFinder birthdaywishFinder;
	@BeanReference(type = predefinedmessagesLocalService.class)
	protected predefinedmessagesLocalService predefinedmessagesLocalService;
	@BeanReference(type = predefinedmessagesPersistence.class)
	protected predefinedmessagesPersistence predefinedmessagesPersistence;
	@BeanReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@BeanReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@BeanReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private ClassLoader _classLoader;
	private predefinedmessagesLocalServiceClpInvoker _clpInvoker = new predefinedmessagesLocalServiceClpInvoker();
}