/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;

import com.model.cholatalkies;

import com.service.cholatalkiesLocalService;

import com.service.persistence.cholatalkiesFinder;
import com.service.persistence.cholatalkiesPersistence;
import com.service.persistence.cholatalkiespathPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the cholatalkies local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.service.impl.cholatalkiesLocalServiceImpl}.
 * </p>
 *
 * @author adms.java1
 * @see com.service.impl.cholatalkiesLocalServiceImpl
 * @see com.service.cholatalkiesLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class cholatalkiesLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements cholatalkiesLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.service.cholatalkiesLocalServiceUtil} to access the cholatalkies local service.
	 */

	/**
	 * Adds the cholatalkies to the database. Also notifies the appropriate model listeners.
	 *
	 * @param cholatalkies the cholatalkies
	 * @return the cholatalkies that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public cholatalkies addcholatalkies(cholatalkies cholatalkies) {
		cholatalkies.setNew(true);

		return cholatalkiesPersistence.update(cholatalkies);
	}

	/**
	 * Creates a new cholatalkies with the primary key. Does not add the cholatalkies to the database.
	 *
	 * @param id the primary key for the new cholatalkies
	 * @return the new cholatalkies
	 */
	@Override
	public cholatalkies createcholatalkies(long id) {
		return cholatalkiesPersistence.create(id);
	}

	/**
	 * Deletes the cholatalkies with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param id the primary key of the cholatalkies
	 * @return the cholatalkies that was removed
	 * @throws PortalException if a cholatalkies with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public cholatalkies deletecholatalkies(long id) throws PortalException {
		return cholatalkiesPersistence.remove(id);
	}

	/**
	 * Deletes the cholatalkies from the database. Also notifies the appropriate model listeners.
	 *
	 * @param cholatalkies the cholatalkies
	 * @return the cholatalkies that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public cholatalkies deletecholatalkies(cholatalkies cholatalkies) {
		return cholatalkiesPersistence.remove(cholatalkies);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(cholatalkies.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return cholatalkiesPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.model.impl.cholatalkiesModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return cholatalkiesPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.model.impl.cholatalkiesModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return cholatalkiesPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return cholatalkiesPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return cholatalkiesPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public cholatalkies fetchcholatalkies(long id) {
		return cholatalkiesPersistence.fetchByPrimaryKey(id);
	}

	/**
	 * Returns the cholatalkies with the primary key.
	 *
	 * @param id the primary key of the cholatalkies
	 * @return the cholatalkies
	 * @throws PortalException if a cholatalkies with the primary key could not be found
	 */
	@Override
	public cholatalkies getcholatalkies(long id) throws PortalException {
		return cholatalkiesPersistence.findByPrimaryKey(id);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(cholatalkiesLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(cholatalkies.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(cholatalkiesLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(cholatalkies.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(cholatalkiesLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(cholatalkies.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return cholatalkiesLocalService.deletecholatalkies((cholatalkies)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return cholatalkiesPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the cholatalkieses.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.model.impl.cholatalkiesModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of cholatalkieses
	 * @param end the upper bound of the range of cholatalkieses (not inclusive)
	 * @return the range of cholatalkieses
	 */
	@Override
	public List<cholatalkies> getcholatalkieses(int start, int end) {
		return cholatalkiesPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of cholatalkieses.
	 *
	 * @return the number of cholatalkieses
	 */
	@Override
	public int getcholatalkiesesCount() {
		return cholatalkiesPersistence.countAll();
	}

	/**
	 * Updates the cholatalkies in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param cholatalkies the cholatalkies
	 * @return the cholatalkies that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public cholatalkies updatecholatalkies(cholatalkies cholatalkies) {
		return cholatalkiesPersistence.update(cholatalkies);
	}

	/**
	 * Returns the cholatalkies local service.
	 *
	 * @return the cholatalkies local service
	 */
	public cholatalkiesLocalService getcholatalkiesLocalService() {
		return cholatalkiesLocalService;
	}

	/**
	 * Sets the cholatalkies local service.
	 *
	 * @param cholatalkiesLocalService the cholatalkies local service
	 */
	public void setcholatalkiesLocalService(
		cholatalkiesLocalService cholatalkiesLocalService) {
		this.cholatalkiesLocalService = cholatalkiesLocalService;
	}

	/**
	 * Returns the cholatalkies persistence.
	 *
	 * @return the cholatalkies persistence
	 */
	public cholatalkiesPersistence getcholatalkiesPersistence() {
		return cholatalkiesPersistence;
	}

	/**
	 * Sets the cholatalkies persistence.
	 *
	 * @param cholatalkiesPersistence the cholatalkies persistence
	 */
	public void setcholatalkiesPersistence(
		cholatalkiesPersistence cholatalkiesPersistence) {
		this.cholatalkiesPersistence = cholatalkiesPersistence;
	}

	/**
	 * Returns the cholatalkies finder.
	 *
	 * @return the cholatalkies finder
	 */
	public cholatalkiesFinder getcholatalkiesFinder() {
		return cholatalkiesFinder;
	}

	/**
	 * Sets the cholatalkies finder.
	 *
	 * @param cholatalkiesFinder the cholatalkies finder
	 */
	public void setcholatalkiesFinder(cholatalkiesFinder cholatalkiesFinder) {
		this.cholatalkiesFinder = cholatalkiesFinder;
	}

	/**
	 * Returns the cholatalkiespath local service.
	 *
	 * @return the cholatalkiespath local service
	 */
	public com.service.cholatalkiespathLocalService getcholatalkiespathLocalService() {
		return cholatalkiespathLocalService;
	}

	/**
	 * Sets the cholatalkiespath local service.
	 *
	 * @param cholatalkiespathLocalService the cholatalkiespath local service
	 */
	public void setcholatalkiespathLocalService(
		com.service.cholatalkiespathLocalService cholatalkiespathLocalService) {
		this.cholatalkiespathLocalService = cholatalkiespathLocalService;
	}

	/**
	 * Returns the cholatalkiespath persistence.
	 *
	 * @return the cholatalkiespath persistence
	 */
	public cholatalkiespathPersistence getcholatalkiespathPersistence() {
		return cholatalkiespathPersistence;
	}

	/**
	 * Sets the cholatalkiespath persistence.
	 *
	 * @param cholatalkiespathPersistence the cholatalkiespath persistence
	 */
	public void setcholatalkiespathPersistence(
		cholatalkiespathPersistence cholatalkiespathPersistence) {
		this.cholatalkiespathPersistence = cholatalkiespathPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.model.cholatalkies",
			cholatalkiesLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.model.cholatalkies");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return cholatalkiesLocalService.class.getName();
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return cholatalkies.class;
	}

	protected String getModelClassName() {
		return cholatalkies.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = cholatalkiesPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = cholatalkiesLocalService.class)
	protected cholatalkiesLocalService cholatalkiesLocalService;
	@BeanReference(type = cholatalkiesPersistence.class)
	protected cholatalkiesPersistence cholatalkiesPersistence;
	@BeanReference(type = cholatalkiesFinder.class)
	protected cholatalkiesFinder cholatalkiesFinder;
	@BeanReference(type = com.service.cholatalkiespathLocalService.class)
	protected com.service.cholatalkiespathLocalService cholatalkiespathLocalService;
	@BeanReference(type = cholatalkiespathPersistence.class)
	protected cholatalkiespathPersistence cholatalkiespathPersistence;
	@BeanReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@BeanReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@BeanReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private ClassLoader _classLoader;
	private cholatalkiesLocalServiceClpInvoker _clpInvoker = new cholatalkiesLocalServiceClpInvoker();
}