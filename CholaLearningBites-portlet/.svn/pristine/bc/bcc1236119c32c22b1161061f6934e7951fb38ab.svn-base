/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.chola.learningbites.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.chola.learningbites.model.lbdetails;
import com.chola.learningbites.model.lbdetailsModel;
import com.chola.learningbites.model.lbdetailsSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the lbdetails service. Represents a row in the &quot;chola_lbdetails&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link lbdetailsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link lbdetailsImpl}.
 * </p>
 *
 * @author cloverliferay01
 * @see lbdetailsImpl
 * @see lbdetails
 * @see lbdetailsModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class lbdetailsModelImpl extends BaseModelImpl<lbdetails>
	implements lbdetailsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a lbdetails model instance should use the {@link lbdetails} interface instead.
	 */
	public static final String TABLE_NAME = "chola_lbdetails";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "content_id", Types.BIGINT },
			{ "lbtitle", Types.VARCHAR },
			{ "lbdescription", Types.VARCHAR },
			{ "lbfilename", Types.VARCHAR },
			{ "lbfilepath", Types.VARCHAR },
			{ "createddate", Types.TIMESTAMP },
			{ "createdby", Types.BIGINT },
			{ "modifieddate", Types.TIMESTAMP },
			{ "modifiedby", Types.BIGINT },
			{ "flag", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("content_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("lbtitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lbdescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lbfilename", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lbfilepath", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createddate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createdby", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifieddate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedby", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("flag", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table chola_lbdetails (id_ LONG not null primary key,content_id LONG,lbtitle VARCHAR(100) null,lbdescription VARCHAR(200) null,lbfilename VARCHAR(100) null,lbfilepath VARCHAR(100) null,createddate DATE null,createdby LONG,modifieddate DATE null,modifiedby LONG,flag VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table chola_lbdetails";
	public static final String ORDER_BY_JPQL = " ORDER BY lbdetails.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY chola_lbdetails.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.chola.learningbites.model.lbdetails"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.chola.learningbites.model.lbdetails"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.chola.learningbites.model.lbdetails"),
			true);
	public static final long CONTENT_ID_COLUMN_BITMASK = 1L;
	public static final long ID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static lbdetails toModel(lbdetailsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		lbdetails model = new lbdetailsImpl();

		model.setId(soapModel.getId());
		model.setContent_id(soapModel.getContent_id());
		model.setLbtitle(soapModel.getLbtitle());
		model.setLbdescription(soapModel.getLbdescription());
		model.setLbfilename(soapModel.getLbfilename());
		model.setLbfilepath(soapModel.getLbfilepath());
		model.setCreateddate(soapModel.getCreateddate());
		model.setCreatedby(soapModel.getCreatedby());
		model.setModifieddate(soapModel.getModifieddate());
		model.setModifiedby(soapModel.getModifiedby());
		model.setFlag(soapModel.getFlag());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<lbdetails> toModels(lbdetailsSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<lbdetails> models = new ArrayList<lbdetails>(soapModels.length);

		for (lbdetailsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.chola.learningbites.model.lbdetails"));

	public lbdetailsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return lbdetails.class;
	}

	@Override
	public String getModelClassName() {
		return lbdetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("content_id", getContent_id());
		attributes.put("lbtitle", getLbtitle());
		attributes.put("lbdescription", getLbdescription());
		attributes.put("lbfilename", getLbfilename());
		attributes.put("lbfilepath", getLbfilepath());
		attributes.put("createddate", getCreateddate());
		attributes.put("createdby", getCreatedby());
		attributes.put("modifieddate", getModifieddate());
		attributes.put("modifiedby", getModifiedby());
		attributes.put("flag", getFlag());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long content_id = (Long)attributes.get("content_id");

		if (content_id != null) {
			setContent_id(content_id);
		}

		String lbtitle = (String)attributes.get("lbtitle");

		if (lbtitle != null) {
			setLbtitle(lbtitle);
		}

		String lbdescription = (String)attributes.get("lbdescription");

		if (lbdescription != null) {
			setLbdescription(lbdescription);
		}

		String lbfilename = (String)attributes.get("lbfilename");

		if (lbfilename != null) {
			setLbfilename(lbfilename);
		}

		String lbfilepath = (String)attributes.get("lbfilepath");

		if (lbfilepath != null) {
			setLbfilepath(lbfilepath);
		}

		Date createddate = (Date)attributes.get("createddate");

		if (createddate != null) {
			setCreateddate(createddate);
		}

		Long createdby = (Long)attributes.get("createdby");

		if (createdby != null) {
			setCreatedby(createdby);
		}

		Date modifieddate = (Date)attributes.get("modifieddate");

		if (modifieddate != null) {
			setModifieddate(modifieddate);
		}

		Long modifiedby = (Long)attributes.get("modifiedby");

		if (modifiedby != null) {
			setModifiedby(modifiedby);
		}

		String flag = (String)attributes.get("flag");

		if (flag != null) {
			setFlag(flag);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public long getContent_id() {
		return _content_id;
	}

	@Override
	public void setContent_id(long content_id) {
		_columnBitmask |= CONTENT_ID_COLUMN_BITMASK;

		if (!_setOriginalContent_id) {
			_setOriginalContent_id = true;

			_originalContent_id = _content_id;
		}

		_content_id = content_id;
	}

	public long getOriginalContent_id() {
		return _originalContent_id;
	}

	@JSON
	@Override
	public String getLbtitle() {
		if (_lbtitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _lbtitle;
		}
	}

	@Override
	public void setLbtitle(String lbtitle) {
		_lbtitle = lbtitle;
	}

	@JSON
	@Override
	public String getLbdescription() {
		if (_lbdescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _lbdescription;
		}
	}

	@Override
	public void setLbdescription(String lbdescription) {
		_lbdescription = lbdescription;
	}

	@JSON
	@Override
	public String getLbfilename() {
		if (_lbfilename == null) {
			return StringPool.BLANK;
		}
		else {
			return _lbfilename;
		}
	}

	@Override
	public void setLbfilename(String lbfilename) {
		_lbfilename = lbfilename;
	}

	@JSON
	@Override
	public String getLbfilepath() {
		if (_lbfilepath == null) {
			return StringPool.BLANK;
		}
		else {
			return _lbfilepath;
		}
	}

	@Override
	public void setLbfilepath(String lbfilepath) {
		_lbfilepath = lbfilepath;
	}

	@JSON
	@Override
	public Date getCreateddate() {
		return _createddate;
	}

	@Override
	public void setCreateddate(Date createddate) {
		_createddate = createddate;
	}

	@JSON
	@Override
	public long getCreatedby() {
		return _createdby;
	}

	@Override
	public void setCreatedby(long createdby) {
		_createdby = createdby;
	}

	@JSON
	@Override
	public Date getModifieddate() {
		return _modifieddate;
	}

	@Override
	public void setModifieddate(Date modifieddate) {
		_modifieddate = modifieddate;
	}

	@JSON
	@Override
	public long getModifiedby() {
		return _modifiedby;
	}

	@Override
	public void setModifiedby(long modifiedby) {
		_modifiedby = modifiedby;
	}

	@JSON
	@Override
	public String getFlag() {
		if (_flag == null) {
			return StringPool.BLANK;
		}
		else {
			return _flag;
		}
	}

	@Override
	public void setFlag(String flag) {
		_flag = flag;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			lbdetails.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public lbdetails toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (lbdetails)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		lbdetailsImpl lbdetailsImpl = new lbdetailsImpl();

		lbdetailsImpl.setId(getId());
		lbdetailsImpl.setContent_id(getContent_id());
		lbdetailsImpl.setLbtitle(getLbtitle());
		lbdetailsImpl.setLbdescription(getLbdescription());
		lbdetailsImpl.setLbfilename(getLbfilename());
		lbdetailsImpl.setLbfilepath(getLbfilepath());
		lbdetailsImpl.setCreateddate(getCreateddate());
		lbdetailsImpl.setCreatedby(getCreatedby());
		lbdetailsImpl.setModifieddate(getModifieddate());
		lbdetailsImpl.setModifiedby(getModifiedby());
		lbdetailsImpl.setFlag(getFlag());

		lbdetailsImpl.resetOriginalValues();

		return lbdetailsImpl;
	}

	@Override
	public int compareTo(lbdetails lbdetails) {
		long primaryKey = lbdetails.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof lbdetails)) {
			return false;
		}

		lbdetails lbdetails = (lbdetails)obj;

		long primaryKey = lbdetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		lbdetailsModelImpl lbdetailsModelImpl = this;

		lbdetailsModelImpl._originalContent_id = lbdetailsModelImpl._content_id;

		lbdetailsModelImpl._setOriginalContent_id = false;

		lbdetailsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<lbdetails> toCacheModel() {
		lbdetailsCacheModel lbdetailsCacheModel = new lbdetailsCacheModel();

		lbdetailsCacheModel.id = getId();

		lbdetailsCacheModel.content_id = getContent_id();

		lbdetailsCacheModel.lbtitle = getLbtitle();

		String lbtitle = lbdetailsCacheModel.lbtitle;

		if ((lbtitle != null) && (lbtitle.length() == 0)) {
			lbdetailsCacheModel.lbtitle = null;
		}

		lbdetailsCacheModel.lbdescription = getLbdescription();

		String lbdescription = lbdetailsCacheModel.lbdescription;

		if ((lbdescription != null) && (lbdescription.length() == 0)) {
			lbdetailsCacheModel.lbdescription = null;
		}

		lbdetailsCacheModel.lbfilename = getLbfilename();

		String lbfilename = lbdetailsCacheModel.lbfilename;

		if ((lbfilename != null) && (lbfilename.length() == 0)) {
			lbdetailsCacheModel.lbfilename = null;
		}

		lbdetailsCacheModel.lbfilepath = getLbfilepath();

		String lbfilepath = lbdetailsCacheModel.lbfilepath;

		if ((lbfilepath != null) && (lbfilepath.length() == 0)) {
			lbdetailsCacheModel.lbfilepath = null;
		}

		Date createddate = getCreateddate();

		if (createddate != null) {
			lbdetailsCacheModel.createddate = createddate.getTime();
		}
		else {
			lbdetailsCacheModel.createddate = Long.MIN_VALUE;
		}

		lbdetailsCacheModel.createdby = getCreatedby();

		Date modifieddate = getModifieddate();

		if (modifieddate != null) {
			lbdetailsCacheModel.modifieddate = modifieddate.getTime();
		}
		else {
			lbdetailsCacheModel.modifieddate = Long.MIN_VALUE;
		}

		lbdetailsCacheModel.modifiedby = getModifiedby();

		lbdetailsCacheModel.flag = getFlag();

		String flag = lbdetailsCacheModel.flag;

		if ((flag != null) && (flag.length() == 0)) {
			lbdetailsCacheModel.flag = null;
		}

		return lbdetailsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", content_id=");
		sb.append(getContent_id());
		sb.append(", lbtitle=");
		sb.append(getLbtitle());
		sb.append(", lbdescription=");
		sb.append(getLbdescription());
		sb.append(", lbfilename=");
		sb.append(getLbfilename());
		sb.append(", lbfilepath=");
		sb.append(getLbfilepath());
		sb.append(", createddate=");
		sb.append(getCreateddate());
		sb.append(", createdby=");
		sb.append(getCreatedby());
		sb.append(", modifieddate=");
		sb.append(getModifieddate());
		sb.append(", modifiedby=");
		sb.append(getModifiedby());
		sb.append(", flag=");
		sb.append(getFlag());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.chola.learningbites.model.lbdetails");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>content_id</column-name><column-value><![CDATA[");
		sb.append(getContent_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lbtitle</column-name><column-value><![CDATA[");
		sb.append(getLbtitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lbdescription</column-name><column-value><![CDATA[");
		sb.append(getLbdescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lbfilename</column-name><column-value><![CDATA[");
		sb.append(getLbfilename());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lbfilepath</column-name><column-value><![CDATA[");
		sb.append(getLbfilepath());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createddate</column-name><column-value><![CDATA[");
		sb.append(getCreateddate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdby</column-name><column-value><![CDATA[");
		sb.append(getCreatedby());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifieddate</column-name><column-value><![CDATA[");
		sb.append(getModifieddate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedby</column-name><column-value><![CDATA[");
		sb.append(getModifiedby());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>flag</column-name><column-value><![CDATA[");
		sb.append(getFlag());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = lbdetails.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			lbdetails.class
		};
	private long _id;
	private long _content_id;
	private long _originalContent_id;
	private boolean _setOriginalContent_id;
	private String _lbtitle;
	private String _lbdescription;
	private String _lbfilename;
	private String _lbfilepath;
	private Date _createddate;
	private long _createdby;
	private Date _modifieddate;
	private long _modifiedby;
	private String _flag;
	private long _columnBitmask;
	private lbdetails _escapedModel;
}