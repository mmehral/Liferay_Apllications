/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.service.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.service.model.newhire;
import com.service.model.newhireModel;
import com.service.model.newhireSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the newhire service. Represents a row in the &quot;cholawelcome_newhire&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link newhireModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link newhireImpl}.
 * </p>
 *
 * @author adms.java1
 * @see newhireImpl
 * @see newhire
 * @see newhireModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class newhireModelImpl extends BaseModelImpl<newhire>
	implements newhireModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a newhire model instance should use the {@link newhire} interface instead.
	 */
	public static final String TABLE_NAME = "cholawelcome_newhire";
	public static final Object[][] TABLE_COLUMNS = {
			{ "newhire_id", Types.BIGINT },
			{ "newhire_name", Types.VARCHAR },
			{ "newhire_designation", Types.VARCHAR },
			{ "newhire_profileimage", Types.VARCHAR },
			{ "newhire_profileimage_path", Types.VARCHAR },
			{ "newhire_detailedimage", Types.VARCHAR },
			{ "newhire_detailedimage_path", Types.VARCHAR },
			{ "newhire_createdate", Types.TIMESTAMP },
			{ "newhire_modifieddate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("newhire_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("newhire_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newhire_designation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newhire_profileimage", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newhire_profileimage_path", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newhire_detailedimage", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newhire_detailedimage_path", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newhire_createdate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("newhire_modifieddate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table cholawelcome_newhire (newhire_id LONG not null primary key,newhire_name VARCHAR(100) null,newhire_designation VARCHAR(100) null,newhire_profileimage VARCHAR(200) null,newhire_profileimage_path VARCHAR(300) null,newhire_detailedimage VARCHAR(200) null,newhire_detailedimage_path VARCHAR(300) null,newhire_createdate DATE null,newhire_modifieddate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table cholawelcome_newhire";
	public static final String ORDER_BY_JPQL = " ORDER BY newhire.newhire_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY cholawelcome_newhire.newhire_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.service.model.newhire"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.service.model.newhire"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static newhire toModel(newhireSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		newhire model = new newhireImpl();

		model.setNewhire_id(soapModel.getNewhire_id());
		model.setNewhire_name(soapModel.getNewhire_name());
		model.setNewhire_designation(soapModel.getNewhire_designation());
		model.setNewhire_profileimage(soapModel.getNewhire_profileimage());
		model.setNewhire_profileimage_path(soapModel.getNewhire_profileimage_path());
		model.setNewhire_detailedimage(soapModel.getNewhire_detailedimage());
		model.setNewhire_detailedimage_path(soapModel.getNewhire_detailedimage_path());
		model.setNewhire_createdate(soapModel.getNewhire_createdate());
		model.setNewhire_modifieddate(soapModel.getNewhire_modifieddate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<newhire> toModels(newhireSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<newhire> models = new ArrayList<newhire>(soapModels.length);

		for (newhireSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.service.model.newhire"));

	public newhireModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _newhire_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setNewhire_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _newhire_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return newhire.class;
	}

	@Override
	public String getModelClassName() {
		return newhire.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("newhire_id", getNewhire_id());
		attributes.put("newhire_name", getNewhire_name());
		attributes.put("newhire_designation", getNewhire_designation());
		attributes.put("newhire_profileimage", getNewhire_profileimage());
		attributes.put("newhire_profileimage_path",
			getNewhire_profileimage_path());
		attributes.put("newhire_detailedimage", getNewhire_detailedimage());
		attributes.put("newhire_detailedimage_path",
			getNewhire_detailedimage_path());
		attributes.put("newhire_createdate", getNewhire_createdate());
		attributes.put("newhire_modifieddate", getNewhire_modifieddate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long newhire_id = (Long)attributes.get("newhire_id");

		if (newhire_id != null) {
			setNewhire_id(newhire_id);
		}

		String newhire_name = (String)attributes.get("newhire_name");

		if (newhire_name != null) {
			setNewhire_name(newhire_name);
		}

		String newhire_designation = (String)attributes.get(
				"newhire_designation");

		if (newhire_designation != null) {
			setNewhire_designation(newhire_designation);
		}

		String newhire_profileimage = (String)attributes.get(
				"newhire_profileimage");

		if (newhire_profileimage != null) {
			setNewhire_profileimage(newhire_profileimage);
		}

		String newhire_profileimage_path = (String)attributes.get(
				"newhire_profileimage_path");

		if (newhire_profileimage_path != null) {
			setNewhire_profileimage_path(newhire_profileimage_path);
		}

		String newhire_detailedimage = (String)attributes.get(
				"newhire_detailedimage");

		if (newhire_detailedimage != null) {
			setNewhire_detailedimage(newhire_detailedimage);
		}

		String newhire_detailedimage_path = (String)attributes.get(
				"newhire_detailedimage_path");

		if (newhire_detailedimage_path != null) {
			setNewhire_detailedimage_path(newhire_detailedimage_path);
		}

		Date newhire_createdate = (Date)attributes.get("newhire_createdate");

		if (newhire_createdate != null) {
			setNewhire_createdate(newhire_createdate);
		}

		Date newhire_modifieddate = (Date)attributes.get("newhire_modifieddate");

		if (newhire_modifieddate != null) {
			setNewhire_modifieddate(newhire_modifieddate);
		}
	}

	@JSON
	@Override
	public long getNewhire_id() {
		return _newhire_id;
	}

	@Override
	public void setNewhire_id(long newhire_id) {
		_newhire_id = newhire_id;
	}

	@JSON
	@Override
	public String getNewhire_name() {
		if (_newhire_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _newhire_name;
		}
	}

	@Override
	public void setNewhire_name(String newhire_name) {
		_newhire_name = newhire_name;
	}

	@JSON
	@Override
	public String getNewhire_designation() {
		if (_newhire_designation == null) {
			return StringPool.BLANK;
		}
		else {
			return _newhire_designation;
		}
	}

	@Override
	public void setNewhire_designation(String newhire_designation) {
		_newhire_designation = newhire_designation;
	}

	@JSON
	@Override
	public String getNewhire_profileimage() {
		if (_newhire_profileimage == null) {
			return StringPool.BLANK;
		}
		else {
			return _newhire_profileimage;
		}
	}

	@Override
	public void setNewhire_profileimage(String newhire_profileimage) {
		_newhire_profileimage = newhire_profileimage;
	}

	@JSON
	@Override
	public String getNewhire_profileimage_path() {
		if (_newhire_profileimage_path == null) {
			return StringPool.BLANK;
		}
		else {
			return _newhire_profileimage_path;
		}
	}

	@Override
	public void setNewhire_profileimage_path(String newhire_profileimage_path) {
		_newhire_profileimage_path = newhire_profileimage_path;
	}

	@JSON
	@Override
	public String getNewhire_detailedimage() {
		if (_newhire_detailedimage == null) {
			return StringPool.BLANK;
		}
		else {
			return _newhire_detailedimage;
		}
	}

	@Override
	public void setNewhire_detailedimage(String newhire_detailedimage) {
		_newhire_detailedimage = newhire_detailedimage;
	}

	@JSON
	@Override
	public String getNewhire_detailedimage_path() {
		if (_newhire_detailedimage_path == null) {
			return StringPool.BLANK;
		}
		else {
			return _newhire_detailedimage_path;
		}
	}

	@Override
	public void setNewhire_detailedimage_path(String newhire_detailedimage_path) {
		_newhire_detailedimage_path = newhire_detailedimage_path;
	}

	@JSON
	@Override
	public Date getNewhire_createdate() {
		return _newhire_createdate;
	}

	@Override
	public void setNewhire_createdate(Date newhire_createdate) {
		_newhire_createdate = newhire_createdate;
	}

	@JSON
	@Override
	public Date getNewhire_modifieddate() {
		return _newhire_modifieddate;
	}

	@Override
	public void setNewhire_modifieddate(Date newhire_modifieddate) {
		_newhire_modifieddate = newhire_modifieddate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			newhire.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public newhire toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (newhire)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		newhireImpl newhireImpl = new newhireImpl();

		newhireImpl.setNewhire_id(getNewhire_id());
		newhireImpl.setNewhire_name(getNewhire_name());
		newhireImpl.setNewhire_designation(getNewhire_designation());
		newhireImpl.setNewhire_profileimage(getNewhire_profileimage());
		newhireImpl.setNewhire_profileimage_path(getNewhire_profileimage_path());
		newhireImpl.setNewhire_detailedimage(getNewhire_detailedimage());
		newhireImpl.setNewhire_detailedimage_path(getNewhire_detailedimage_path());
		newhireImpl.setNewhire_createdate(getNewhire_createdate());
		newhireImpl.setNewhire_modifieddate(getNewhire_modifieddate());

		newhireImpl.resetOriginalValues();

		return newhireImpl;
	}

	@Override
	public int compareTo(newhire newhire) {
		long primaryKey = newhire.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof newhire)) {
			return false;
		}

		newhire newhire = (newhire)obj;

		long primaryKey = newhire.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<newhire> toCacheModel() {
		newhireCacheModel newhireCacheModel = new newhireCacheModel();

		newhireCacheModel.newhire_id = getNewhire_id();

		newhireCacheModel.newhire_name = getNewhire_name();

		String newhire_name = newhireCacheModel.newhire_name;

		if ((newhire_name != null) && (newhire_name.length() == 0)) {
			newhireCacheModel.newhire_name = null;
		}

		newhireCacheModel.newhire_designation = getNewhire_designation();

		String newhire_designation = newhireCacheModel.newhire_designation;

		if ((newhire_designation != null) &&
				(newhire_designation.length() == 0)) {
			newhireCacheModel.newhire_designation = null;
		}

		newhireCacheModel.newhire_profileimage = getNewhire_profileimage();

		String newhire_profileimage = newhireCacheModel.newhire_profileimage;

		if ((newhire_profileimage != null) &&
				(newhire_profileimage.length() == 0)) {
			newhireCacheModel.newhire_profileimage = null;
		}

		newhireCacheModel.newhire_profileimage_path = getNewhire_profileimage_path();

		String newhire_profileimage_path = newhireCacheModel.newhire_profileimage_path;

		if ((newhire_profileimage_path != null) &&
				(newhire_profileimage_path.length() == 0)) {
			newhireCacheModel.newhire_profileimage_path = null;
		}

		newhireCacheModel.newhire_detailedimage = getNewhire_detailedimage();

		String newhire_detailedimage = newhireCacheModel.newhire_detailedimage;

		if ((newhire_detailedimage != null) &&
				(newhire_detailedimage.length() == 0)) {
			newhireCacheModel.newhire_detailedimage = null;
		}

		newhireCacheModel.newhire_detailedimage_path = getNewhire_detailedimage_path();

		String newhire_detailedimage_path = newhireCacheModel.newhire_detailedimage_path;

		if ((newhire_detailedimage_path != null) &&
				(newhire_detailedimage_path.length() == 0)) {
			newhireCacheModel.newhire_detailedimage_path = null;
		}

		Date newhire_createdate = getNewhire_createdate();

		if (newhire_createdate != null) {
			newhireCacheModel.newhire_createdate = newhire_createdate.getTime();
		}
		else {
			newhireCacheModel.newhire_createdate = Long.MIN_VALUE;
		}

		Date newhire_modifieddate = getNewhire_modifieddate();

		if (newhire_modifieddate != null) {
			newhireCacheModel.newhire_modifieddate = newhire_modifieddate.getTime();
		}
		else {
			newhireCacheModel.newhire_modifieddate = Long.MIN_VALUE;
		}

		return newhireCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{newhire_id=");
		sb.append(getNewhire_id());
		sb.append(", newhire_name=");
		sb.append(getNewhire_name());
		sb.append(", newhire_designation=");
		sb.append(getNewhire_designation());
		sb.append(", newhire_profileimage=");
		sb.append(getNewhire_profileimage());
		sb.append(", newhire_profileimage_path=");
		sb.append(getNewhire_profileimage_path());
		sb.append(", newhire_detailedimage=");
		sb.append(getNewhire_detailedimage());
		sb.append(", newhire_detailedimage_path=");
		sb.append(getNewhire_detailedimage_path());
		sb.append(", newhire_createdate=");
		sb.append(getNewhire_createdate());
		sb.append(", newhire_modifieddate=");
		sb.append(getNewhire_modifieddate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.service.model.newhire");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>newhire_id</column-name><column-value><![CDATA[");
		sb.append(getNewhire_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>newhire_name</column-name><column-value><![CDATA[");
		sb.append(getNewhire_name());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>newhire_designation</column-name><column-value><![CDATA[");
		sb.append(getNewhire_designation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>newhire_profileimage</column-name><column-value><![CDATA[");
		sb.append(getNewhire_profileimage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>newhire_profileimage_path</column-name><column-value><![CDATA[");
		sb.append(getNewhire_profileimage_path());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>newhire_detailedimage</column-name><column-value><![CDATA[");
		sb.append(getNewhire_detailedimage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>newhire_detailedimage_path</column-name><column-value><![CDATA[");
		sb.append(getNewhire_detailedimage_path());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>newhire_createdate</column-name><column-value><![CDATA[");
		sb.append(getNewhire_createdate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>newhire_modifieddate</column-name><column-value><![CDATA[");
		sb.append(getNewhire_modifieddate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = newhire.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			newhire.class
		};
	private long _newhire_id;
	private String _newhire_name;
	private String _newhire_designation;
	private String _newhire_profileimage;
	private String _newhire_profileimage_path;
	private String _newhire_detailedimage;
	private String _newhire_detailedimage_path;
	private Date _newhire_createdate;
	private Date _newhire_modifieddate;
	private newhire _escapedModel;
}