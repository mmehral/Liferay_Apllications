/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.chola.conferenceroombooking.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.chola.conferenceroombooking.model.room;
import com.chola.conferenceroombooking.model.roomModel;
import com.chola.conferenceroombooking.model.roomSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the room service. Represents a row in the &quot;branch_room&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link roomModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link roomImpl}.
 * </p>
 *
 * @author adms.java1
 * @see roomImpl
 * @see room
 * @see roomModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class roomModelImpl extends BaseModelImpl<room> implements roomModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a room model instance should use the {@link room} interface instead.
	 */
	public static final String TABLE_NAME = "branch_room";
	public static final Object[][] TABLE_COLUMNS = {
			{ "room_id", Types.BIGINT },
			{ "state_id", Types.BIGINT },
			{ "location_id", Types.BIGINT },
			{ "floor_id", Types.BIGINT },
			{ "room_name", Types.VARCHAR },
			{ "room_capacity", Types.BIGINT },
			{ "room_extension", Types.BIGINT },
			{ "room_values", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("room_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("state_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("location_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("floor_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("room_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("room_capacity", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("room_extension", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("room_values", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table branch_room (room_id LONG not null primary key,state_id LONG,location_id LONG,floor_id LONG,room_name VARCHAR(100) null,room_capacity LONG,room_extension LONG,room_values VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table branch_room";
	public static final String ORDER_BY_JPQL = " ORDER BY room.room_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY branch_room.room_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.chola.conferenceroombooking.model.room"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.chola.conferenceroombooking.model.room"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static room toModel(roomSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		room model = new roomImpl();

		model.setRoom_id(soapModel.getRoom_id());
		model.setState_id(soapModel.getState_id());
		model.setLocation_id(soapModel.getLocation_id());
		model.setFloor_id(soapModel.getFloor_id());
		model.setRoom_name(soapModel.getRoom_name());
		model.setRoom_capacity(soapModel.getRoom_capacity());
		model.setRoom_extension(soapModel.getRoom_extension());
		model.setRoom_values(soapModel.getRoom_values());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<room> toModels(roomSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<room> models = new ArrayList<room>(soapModels.length);

		for (roomSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.chola.conferenceroombooking.model.room"));

	public roomModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _room_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRoom_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _room_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return room.class;
	}

	@Override
	public String getModelClassName() {
		return room.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("room_id", getRoom_id());
		attributes.put("state_id", getState_id());
		attributes.put("location_id", getLocation_id());
		attributes.put("floor_id", getFloor_id());
		attributes.put("room_name", getRoom_name());
		attributes.put("room_capacity", getRoom_capacity());
		attributes.put("room_extension", getRoom_extension());
		attributes.put("room_values", getRoom_values());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long room_id = (Long)attributes.get("room_id");

		if (room_id != null) {
			setRoom_id(room_id);
		}

		Long state_id = (Long)attributes.get("state_id");

		if (state_id != null) {
			setState_id(state_id);
		}

		Long location_id = (Long)attributes.get("location_id");

		if (location_id != null) {
			setLocation_id(location_id);
		}

		Long floor_id = (Long)attributes.get("floor_id");

		if (floor_id != null) {
			setFloor_id(floor_id);
		}

		String room_name = (String)attributes.get("room_name");

		if (room_name != null) {
			setRoom_name(room_name);
		}

		Long room_capacity = (Long)attributes.get("room_capacity");

		if (room_capacity != null) {
			setRoom_capacity(room_capacity);
		}

		Long room_extension = (Long)attributes.get("room_extension");

		if (room_extension != null) {
			setRoom_extension(room_extension);
		}

		String room_values = (String)attributes.get("room_values");

		if (room_values != null) {
			setRoom_values(room_values);
		}
	}

	@JSON
	@Override
	public long getRoom_id() {
		return _room_id;
	}

	@Override
	public void setRoom_id(long room_id) {
		_room_id = room_id;
	}

	@JSON
	@Override
	public long getState_id() {
		return _state_id;
	}

	@Override
	public void setState_id(long state_id) {
		_state_id = state_id;
	}

	@JSON
	@Override
	public long getLocation_id() {
		return _location_id;
	}

	@Override
	public void setLocation_id(long location_id) {
		_location_id = location_id;
	}

	@JSON
	@Override
	public long getFloor_id() {
		return _floor_id;
	}

	@Override
	public void setFloor_id(long floor_id) {
		_floor_id = floor_id;
	}

	@JSON
	@Override
	public String getRoom_name() {
		if (_room_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _room_name;
		}
	}

	@Override
	public void setRoom_name(String room_name) {
		_room_name = room_name;
	}

	@JSON
	@Override
	public long getRoom_capacity() {
		return _room_capacity;
	}

	@Override
	public void setRoom_capacity(long room_capacity) {
		_room_capacity = room_capacity;
	}

	@JSON
	@Override
	public long getRoom_extension() {
		return _room_extension;
	}

	@Override
	public void setRoom_extension(long room_extension) {
		_room_extension = room_extension;
	}

	@JSON
	@Override
	public String getRoom_values() {
		if (_room_values == null) {
			return StringPool.BLANK;
		}
		else {
			return _room_values;
		}
	}

	@Override
	public void setRoom_values(String room_values) {
		_room_values = room_values;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			room.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public room toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (room)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		roomImpl roomImpl = new roomImpl();

		roomImpl.setRoom_id(getRoom_id());
		roomImpl.setState_id(getState_id());
		roomImpl.setLocation_id(getLocation_id());
		roomImpl.setFloor_id(getFloor_id());
		roomImpl.setRoom_name(getRoom_name());
		roomImpl.setRoom_capacity(getRoom_capacity());
		roomImpl.setRoom_extension(getRoom_extension());
		roomImpl.setRoom_values(getRoom_values());

		roomImpl.resetOriginalValues();

		return roomImpl;
	}

	@Override
	public int compareTo(room room) {
		long primaryKey = room.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof room)) {
			return false;
		}

		room room = (room)obj;

		long primaryKey = room.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<room> toCacheModel() {
		roomCacheModel roomCacheModel = new roomCacheModel();

		roomCacheModel.room_id = getRoom_id();

		roomCacheModel.state_id = getState_id();

		roomCacheModel.location_id = getLocation_id();

		roomCacheModel.floor_id = getFloor_id();

		roomCacheModel.room_name = getRoom_name();

		String room_name = roomCacheModel.room_name;

		if ((room_name != null) && (room_name.length() == 0)) {
			roomCacheModel.room_name = null;
		}

		roomCacheModel.room_capacity = getRoom_capacity();

		roomCacheModel.room_extension = getRoom_extension();

		roomCacheModel.room_values = getRoom_values();

		String room_values = roomCacheModel.room_values;

		if ((room_values != null) && (room_values.length() == 0)) {
			roomCacheModel.room_values = null;
		}

		return roomCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{room_id=");
		sb.append(getRoom_id());
		sb.append(", state_id=");
		sb.append(getState_id());
		sb.append(", location_id=");
		sb.append(getLocation_id());
		sb.append(", floor_id=");
		sb.append(getFloor_id());
		sb.append(", room_name=");
		sb.append(getRoom_name());
		sb.append(", room_capacity=");
		sb.append(getRoom_capacity());
		sb.append(", room_extension=");
		sb.append(getRoom_extension());
		sb.append(", room_values=");
		sb.append(getRoom_values());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.chola.conferenceroombooking.model.room");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>room_id</column-name><column-value><![CDATA[");
		sb.append(getRoom_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>state_id</column-name><column-value><![CDATA[");
		sb.append(getState_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>location_id</column-name><column-value><![CDATA[");
		sb.append(getLocation_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>floor_id</column-name><column-value><![CDATA[");
		sb.append(getFloor_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>room_name</column-name><column-value><![CDATA[");
		sb.append(getRoom_name());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>room_capacity</column-name><column-value><![CDATA[");
		sb.append(getRoom_capacity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>room_extension</column-name><column-value><![CDATA[");
		sb.append(getRoom_extension());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>room_values</column-name><column-value><![CDATA[");
		sb.append(getRoom_values());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = room.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			room.class
		};
	private long _room_id;
	private long _state_id;
	private long _location_id;
	private long _floor_id;
	private String _room_name;
	private long _room_capacity;
	private long _room_extension;
	private String _room_values;
	private room _escapedModel;
}