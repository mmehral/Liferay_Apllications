/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.chola.conferenceroombooking.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.chola.conferenceroombooking.model.conferenceroombookingdetails;
import com.chola.conferenceroombooking.model.conferenceroombookingdetailsModel;
import com.chola.conferenceroombooking.model.conferenceroombookingdetailsSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the conferenceroombookingdetails service. Represents a row in the &quot;branch_conferenceroombookingdetails&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link conferenceroombookingdetailsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link conferenceroombookingdetailsImpl}.
 * </p>
 *
 * @author adms.java1
 * @see conferenceroombookingdetailsImpl
 * @see conferenceroombookingdetails
 * @see conferenceroombookingdetailsModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class conferenceroombookingdetailsModelImpl extends BaseModelImpl<conferenceroombookingdetails>
	implements conferenceroombookingdetailsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a conferenceroombookingdetails model instance should use the {@link conferenceroombookingdetails} interface instead.
	 */
	public static final String TABLE_NAME = "branch_conferenceroombookingdetails";
	public static final Object[][] TABLE_COLUMNS = {
			{ "bookid", Types.BIGINT },
			{ "startdate", Types.TIMESTAMP },
			{ "startime", Types.VARCHAR },
			{ "endtime", Types.VARCHAR },
			{ "roomid", Types.INTEGER },
			{ "meeting_emailid", Types.VARCHAR },
			{ "meeting_title", Types.VARCHAR },
			{ "meeting_agenda", Types.VARCHAR },
			{ "status", Types.INTEGER },
			{ "userid", Types.BIGINT },
			{ "username", Types.VARCHAR },
			{ "createdate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("bookid", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("startdate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("startime", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("endtime", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("roomid", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("meeting_emailid", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("meeting_title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("meeting_agenda", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("userid", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("username", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createdate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table branch_conferenceroombookingdetails (bookid LONG not null primary key,startdate DATE null,startime VARCHAR(75) null,endtime VARCHAR(75) null,roomid INTEGER,meeting_emailid VARCHAR(75) null,meeting_title VARCHAR(100) null,meeting_agenda VARCHAR(500) null,status INTEGER,userid LONG,username VARCHAR(100) null,createdate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table branch_conferenceroombookingdetails";
	public static final String ORDER_BY_JPQL = " ORDER BY conferenceroombookingdetails.bookid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY branch_conferenceroombookingdetails.bookid ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.chola.conferenceroombooking.model.conferenceroombookingdetails"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.chola.conferenceroombooking.model.conferenceroombookingdetails"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.chola.conferenceroombooking.model.conferenceroombookingdetails"),
			true);
	public static final long STATUS_COLUMN_BITMASK = 1L;
	public static final long USERID_COLUMN_BITMASK = 2L;
	public static final long BOOKID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static conferenceroombookingdetails toModel(
		conferenceroombookingdetailsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		conferenceroombookingdetails model = new conferenceroombookingdetailsImpl();

		model.setBookid(soapModel.getBookid());
		model.setStartdate(soapModel.getStartdate());
		model.setStartime(soapModel.getStartime());
		model.setEndtime(soapModel.getEndtime());
		model.setRoomid(soapModel.getRoomid());
		model.setMeeting_emailid(soapModel.getMeeting_emailid());
		model.setMeeting_title(soapModel.getMeeting_title());
		model.setMeeting_agenda(soapModel.getMeeting_agenda());
		model.setStatus(soapModel.getStatus());
		model.setUserid(soapModel.getUserid());
		model.setUsername(soapModel.getUsername());
		model.setCreatedate(soapModel.getCreatedate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<conferenceroombookingdetails> toModels(
		conferenceroombookingdetailsSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<conferenceroombookingdetails> models = new ArrayList<conferenceroombookingdetails>(soapModels.length);

		for (conferenceroombookingdetailsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.chola.conferenceroombooking.model.conferenceroombookingdetails"));

	public conferenceroombookingdetailsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _bookid;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBookid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _bookid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return conferenceroombookingdetails.class;
	}

	@Override
	public String getModelClassName() {
		return conferenceroombookingdetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("bookid", getBookid());
		attributes.put("startdate", getStartdate());
		attributes.put("startime", getStartime());
		attributes.put("endtime", getEndtime());
		attributes.put("roomid", getRoomid());
		attributes.put("meeting_emailid", getMeeting_emailid());
		attributes.put("meeting_title", getMeeting_title());
		attributes.put("meeting_agenda", getMeeting_agenda());
		attributes.put("status", getStatus());
		attributes.put("userid", getUserid());
		attributes.put("username", getUsername());
		attributes.put("createdate", getCreatedate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long bookid = (Long)attributes.get("bookid");

		if (bookid != null) {
			setBookid(bookid);
		}

		Date startdate = (Date)attributes.get("startdate");

		if (startdate != null) {
			setStartdate(startdate);
		}

		String startime = (String)attributes.get("startime");

		if (startime != null) {
			setStartime(startime);
		}

		String endtime = (String)attributes.get("endtime");

		if (endtime != null) {
			setEndtime(endtime);
		}

		Integer roomid = (Integer)attributes.get("roomid");

		if (roomid != null) {
			setRoomid(roomid);
		}

		String meeting_emailid = (String)attributes.get("meeting_emailid");

		if (meeting_emailid != null) {
			setMeeting_emailid(meeting_emailid);
		}

		String meeting_title = (String)attributes.get("meeting_title");

		if (meeting_title != null) {
			setMeeting_title(meeting_title);
		}

		String meeting_agenda = (String)attributes.get("meeting_agenda");

		if (meeting_agenda != null) {
			setMeeting_agenda(meeting_agenda);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long userid = (Long)attributes.get("userid");

		if (userid != null) {
			setUserid(userid);
		}

		String username = (String)attributes.get("username");

		if (username != null) {
			setUsername(username);
		}

		Date createdate = (Date)attributes.get("createdate");

		if (createdate != null) {
			setCreatedate(createdate);
		}
	}

	@JSON
	@Override
	public long getBookid() {
		return _bookid;
	}

	@Override
	public void setBookid(long bookid) {
		_bookid = bookid;
	}

	@JSON
	@Override
	public Date getStartdate() {
		return _startdate;
	}

	@Override
	public void setStartdate(Date startdate) {
		_startdate = startdate;
	}

	@JSON
	@Override
	public String getStartime() {
		if (_startime == null) {
			return StringPool.BLANK;
		}
		else {
			return _startime;
		}
	}

	@Override
	public void setStartime(String startime) {
		_startime = startime;
	}

	@JSON
	@Override
	public String getEndtime() {
		if (_endtime == null) {
			return StringPool.BLANK;
		}
		else {
			return _endtime;
		}
	}

	@Override
	public void setEndtime(String endtime) {
		_endtime = endtime;
	}

	@JSON
	@Override
	public int getRoomid() {
		return _roomid;
	}

	@Override
	public void setRoomid(int roomid) {
		_roomid = roomid;
	}

	@JSON
	@Override
	public String getMeeting_emailid() {
		if (_meeting_emailid == null) {
			return StringPool.BLANK;
		}
		else {
			return _meeting_emailid;
		}
	}

	@Override
	public void setMeeting_emailid(String meeting_emailid) {
		_meeting_emailid = meeting_emailid;
	}

	@JSON
	@Override
	public String getMeeting_title() {
		if (_meeting_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _meeting_title;
		}
	}

	@Override
	public void setMeeting_title(String meeting_title) {
		_meeting_title = meeting_title;
	}

	@JSON
	@Override
	public String getMeeting_agenda() {
		if (_meeting_agenda == null) {
			return StringPool.BLANK;
		}
		else {
			return _meeting_agenda;
		}
	}

	@Override
	public void setMeeting_agenda(String meeting_agenda) {
		_meeting_agenda = meeting_agenda;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public long getUserid() {
		return _userid;
	}

	@Override
	public void setUserid(long userid) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserid) {
			_setOriginalUserid = true;

			_originalUserid = _userid;
		}

		_userid = userid;
	}

	public long getOriginalUserid() {
		return _originalUserid;
	}

	@JSON
	@Override
	public String getUsername() {
		if (_username == null) {
			return StringPool.BLANK;
		}
		else {
			return _username;
		}
	}

	@Override
	public void setUsername(String username) {
		_username = username;
	}

	@JSON
	@Override
	public Date getCreatedate() {
		return _createdate;
	}

	@Override
	public void setCreatedate(Date createdate) {
		_createdate = createdate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			conferenceroombookingdetails.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public conferenceroombookingdetails toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (conferenceroombookingdetails)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		conferenceroombookingdetailsImpl conferenceroombookingdetailsImpl = new conferenceroombookingdetailsImpl();

		conferenceroombookingdetailsImpl.setBookid(getBookid());
		conferenceroombookingdetailsImpl.setStartdate(getStartdate());
		conferenceroombookingdetailsImpl.setStartime(getStartime());
		conferenceroombookingdetailsImpl.setEndtime(getEndtime());
		conferenceroombookingdetailsImpl.setRoomid(getRoomid());
		conferenceroombookingdetailsImpl.setMeeting_emailid(getMeeting_emailid());
		conferenceroombookingdetailsImpl.setMeeting_title(getMeeting_title());
		conferenceroombookingdetailsImpl.setMeeting_agenda(getMeeting_agenda());
		conferenceroombookingdetailsImpl.setStatus(getStatus());
		conferenceroombookingdetailsImpl.setUserid(getUserid());
		conferenceroombookingdetailsImpl.setUsername(getUsername());
		conferenceroombookingdetailsImpl.setCreatedate(getCreatedate());

		conferenceroombookingdetailsImpl.resetOriginalValues();

		return conferenceroombookingdetailsImpl;
	}

	@Override
	public int compareTo(
		conferenceroombookingdetails conferenceroombookingdetails) {
		long primaryKey = conferenceroombookingdetails.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof conferenceroombookingdetails)) {
			return false;
		}

		conferenceroombookingdetails conferenceroombookingdetails = (conferenceroombookingdetails)obj;

		long primaryKey = conferenceroombookingdetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		conferenceroombookingdetailsModelImpl conferenceroombookingdetailsModelImpl =
			this;

		conferenceroombookingdetailsModelImpl._originalStatus = conferenceroombookingdetailsModelImpl._status;

		conferenceroombookingdetailsModelImpl._setOriginalStatus = false;

		conferenceroombookingdetailsModelImpl._originalUserid = conferenceroombookingdetailsModelImpl._userid;

		conferenceroombookingdetailsModelImpl._setOriginalUserid = false;

		conferenceroombookingdetailsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<conferenceroombookingdetails> toCacheModel() {
		conferenceroombookingdetailsCacheModel conferenceroombookingdetailsCacheModel =
			new conferenceroombookingdetailsCacheModel();

		conferenceroombookingdetailsCacheModel.bookid = getBookid();

		Date startdate = getStartdate();

		if (startdate != null) {
			conferenceroombookingdetailsCacheModel.startdate = startdate.getTime();
		}
		else {
			conferenceroombookingdetailsCacheModel.startdate = Long.MIN_VALUE;
		}

		conferenceroombookingdetailsCacheModel.startime = getStartime();

		String startime = conferenceroombookingdetailsCacheModel.startime;

		if ((startime != null) && (startime.length() == 0)) {
			conferenceroombookingdetailsCacheModel.startime = null;
		}

		conferenceroombookingdetailsCacheModel.endtime = getEndtime();

		String endtime = conferenceroombookingdetailsCacheModel.endtime;

		if ((endtime != null) && (endtime.length() == 0)) {
			conferenceroombookingdetailsCacheModel.endtime = null;
		}

		conferenceroombookingdetailsCacheModel.roomid = getRoomid();

		conferenceroombookingdetailsCacheModel.meeting_emailid = getMeeting_emailid();

		String meeting_emailid = conferenceroombookingdetailsCacheModel.meeting_emailid;

		if ((meeting_emailid != null) && (meeting_emailid.length() == 0)) {
			conferenceroombookingdetailsCacheModel.meeting_emailid = null;
		}

		conferenceroombookingdetailsCacheModel.meeting_title = getMeeting_title();

		String meeting_title = conferenceroombookingdetailsCacheModel.meeting_title;

		if ((meeting_title != null) && (meeting_title.length() == 0)) {
			conferenceroombookingdetailsCacheModel.meeting_title = null;
		}

		conferenceroombookingdetailsCacheModel.meeting_agenda = getMeeting_agenda();

		String meeting_agenda = conferenceroombookingdetailsCacheModel.meeting_agenda;

		if ((meeting_agenda != null) && (meeting_agenda.length() == 0)) {
			conferenceroombookingdetailsCacheModel.meeting_agenda = null;
		}

		conferenceroombookingdetailsCacheModel.status = getStatus();

		conferenceroombookingdetailsCacheModel.userid = getUserid();

		conferenceroombookingdetailsCacheModel.username = getUsername();

		String username = conferenceroombookingdetailsCacheModel.username;

		if ((username != null) && (username.length() == 0)) {
			conferenceroombookingdetailsCacheModel.username = null;
		}

		Date createdate = getCreatedate();

		if (createdate != null) {
			conferenceroombookingdetailsCacheModel.createdate = createdate.getTime();
		}
		else {
			conferenceroombookingdetailsCacheModel.createdate = Long.MIN_VALUE;
		}

		return conferenceroombookingdetailsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{bookid=");
		sb.append(getBookid());
		sb.append(", startdate=");
		sb.append(getStartdate());
		sb.append(", startime=");
		sb.append(getStartime());
		sb.append(", endtime=");
		sb.append(getEndtime());
		sb.append(", roomid=");
		sb.append(getRoomid());
		sb.append(", meeting_emailid=");
		sb.append(getMeeting_emailid());
		sb.append(", meeting_title=");
		sb.append(getMeeting_title());
		sb.append(", meeting_agenda=");
		sb.append(getMeeting_agenda());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", userid=");
		sb.append(getUserid());
		sb.append(", username=");
		sb.append(getUsername());
		sb.append(", createdate=");
		sb.append(getCreatedate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append(
			"com.chola.conferenceroombooking.model.conferenceroombookingdetails");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>bookid</column-name><column-value><![CDATA[");
		sb.append(getBookid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startdate</column-name><column-value><![CDATA[");
		sb.append(getStartdate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startime</column-name><column-value><![CDATA[");
		sb.append(getStartime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endtime</column-name><column-value><![CDATA[");
		sb.append(getEndtime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>roomid</column-name><column-value><![CDATA[");
		sb.append(getRoomid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>meeting_emailid</column-name><column-value><![CDATA[");
		sb.append(getMeeting_emailid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>meeting_title</column-name><column-value><![CDATA[");
		sb.append(getMeeting_title());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>meeting_agenda</column-name><column-value><![CDATA[");
		sb.append(getMeeting_agenda());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userid</column-name><column-value><![CDATA[");
		sb.append(getUserid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>username</column-name><column-value><![CDATA[");
		sb.append(getUsername());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdate</column-name><column-value><![CDATA[");
		sb.append(getCreatedate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = conferenceroombookingdetails.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			conferenceroombookingdetails.class
		};
	private long _bookid;
	private Date _startdate;
	private String _startime;
	private String _endtime;
	private int _roomid;
	private String _meeting_emailid;
	private String _meeting_title;
	private String _meeting_agenda;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _userid;
	private long _originalUserid;
	private boolean _setOriginalUserid;
	private String _username;
	private Date _createdate;
	private long _columnBitmask;
	private conferenceroombookingdetails _escapedModel;
}