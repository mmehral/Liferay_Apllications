/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.chola.conferenceroombooking.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.chola.conferenceroombooking.model.location;
import com.chola.conferenceroombooking.model.locationModel;
import com.chola.conferenceroombooking.model.locationSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the location service. Represents a row in the &quot;branch_location&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link locationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link locationImpl}.
 * </p>
 *
 * @author adms.java1
 * @see locationImpl
 * @see location
 * @see locationModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class locationModelImpl extends BaseModelImpl<location>
	implements locationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a location model instance should use the {@link location} interface instead.
	 */
	public static final String TABLE_NAME = "branch_location";
	public static final Object[][] TABLE_COLUMNS = {
			{ "location_id", Types.BIGINT },
			{ "location_name", Types.VARCHAR },
			{ "state_id", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("location_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("location_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("state_id", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table branch_location (location_id LONG not null primary key,location_name VARCHAR(100) null,state_id LONG)";
	public static final String TABLE_SQL_DROP = "drop table branch_location";
	public static final String ORDER_BY_JPQL = " ORDER BY location.location_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY branch_location.location_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.chola.conferenceroombooking.model.location"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.chola.conferenceroombooking.model.location"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static location toModel(locationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		location model = new locationImpl();

		model.setLocation_id(soapModel.getLocation_id());
		model.setLocation_name(soapModel.getLocation_name());
		model.setState_id(soapModel.getState_id());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<location> toModels(locationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<location> models = new ArrayList<location>(soapModels.length);

		for (locationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.chola.conferenceroombooking.model.location"));

	public locationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _location_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLocation_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _location_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return location.class;
	}

	@Override
	public String getModelClassName() {
		return location.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("location_id", getLocation_id());
		attributes.put("location_name", getLocation_name());
		attributes.put("state_id", getState_id());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long location_id = (Long)attributes.get("location_id");

		if (location_id != null) {
			setLocation_id(location_id);
		}

		String location_name = (String)attributes.get("location_name");

		if (location_name != null) {
			setLocation_name(location_name);
		}

		Long state_id = (Long)attributes.get("state_id");

		if (state_id != null) {
			setState_id(state_id);
		}
	}

	@JSON
	@Override
	public long getLocation_id() {
		return _location_id;
	}

	@Override
	public void setLocation_id(long location_id) {
		_location_id = location_id;
	}

	@JSON
	@Override
	public String getLocation_name() {
		if (_location_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _location_name;
		}
	}

	@Override
	public void setLocation_name(String location_name) {
		_location_name = location_name;
	}

	@JSON
	@Override
	public long getState_id() {
		return _state_id;
	}

	@Override
	public void setState_id(long state_id) {
		_state_id = state_id;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			location.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public location toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (location)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		locationImpl locationImpl = new locationImpl();

		locationImpl.setLocation_id(getLocation_id());
		locationImpl.setLocation_name(getLocation_name());
		locationImpl.setState_id(getState_id());

		locationImpl.resetOriginalValues();

		return locationImpl;
	}

	@Override
	public int compareTo(location location) {
		long primaryKey = location.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof location)) {
			return false;
		}

		location location = (location)obj;

		long primaryKey = location.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<location> toCacheModel() {
		locationCacheModel locationCacheModel = new locationCacheModel();

		locationCacheModel.location_id = getLocation_id();

		locationCacheModel.location_name = getLocation_name();

		String location_name = locationCacheModel.location_name;

		if ((location_name != null) && (location_name.length() == 0)) {
			locationCacheModel.location_name = null;
		}

		locationCacheModel.state_id = getState_id();

		return locationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{location_id=");
		sb.append(getLocation_id());
		sb.append(", location_name=");
		sb.append(getLocation_name());
		sb.append(", state_id=");
		sb.append(getState_id());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.chola.conferenceroombooking.model.location");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>location_id</column-name><column-value><![CDATA[");
		sb.append(getLocation_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>location_name</column-name><column-value><![CDATA[");
		sb.append(getLocation_name());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>state_id</column-name><column-value><![CDATA[");
		sb.append(getState_id());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = location.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			location.class
		};
	private long _location_id;
	private String _location_name;
	private long _state_id;
	private location _escapedModel;
}