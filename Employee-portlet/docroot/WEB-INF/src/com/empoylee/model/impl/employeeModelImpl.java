/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.empoylee.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.empoylee.model.employee;
import com.empoylee.model.employeeModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the employee service. Represents a row in the &quot;Z_employee&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link employeeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link employeeImpl}.
 * </p>
 *
 * @author CloverLiferay01
 * @see employeeImpl
 * @see employee
 * @see employeeModel
 * @generated
 */
@ProviderType
public class employeeModelImpl extends BaseModelImpl<employee>
	implements employeeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a employee model instance should use the {@link employee} interface instead.
	 */
	public static final String TABLE_NAME = "Z_employee";
	public static final Object[][] TABLE_COLUMNS = {
			{ "empId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "email", Types.VARCHAR },
			{ "desigation", Types.VARCHAR },
			{ "mobileNO", Types.INTEGER },
			{ "salary", Types.FLOAT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("empId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("desigation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mobileNO", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("salary", Types.FLOAT);
	}

	public static final String TABLE_SQL_CREATE = "create table Z_employee (empId LONG not null primary key,name VARCHAR(75) null,email VARCHAR(75) null,desigation VARCHAR(75) null,mobileNO INTEGER,salary DOUBLE)";
	public static final String TABLE_SQL_DROP = "drop table Z_employee";
	public static final String ORDER_BY_JPQL = " ORDER BY employee.empId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Z_employee.empId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.empoylee.model.employee"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.empoylee.model.employee"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.empoylee.model.employee"),
			true);
	public static final long EMAIL_COLUMN_BITMASK = 1L;
	public static final long EMPID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.empoylee.model.employee"));

	public employeeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _empId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEmpId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _empId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return employee.class;
	}

	@Override
	public String getModelClassName() {
		return employee.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("empId", getEmpId());
		attributes.put("name", getName());
		attributes.put("email", getEmail());
		attributes.put("desigation", getDesigation());
		attributes.put("mobileNO", getMobileNO());
		attributes.put("salary", getSalary());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long empId = (Long)attributes.get("empId");

		if (empId != null) {
			setEmpId(empId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String email = (String)attributes.get("email");

		if (email != null) {
			setEmail(email);
		}

		String desigation = (String)attributes.get("desigation");

		if (desigation != null) {
			setDesigation(desigation);
		}

		Integer mobileNO = (Integer)attributes.get("mobileNO");

		if (mobileNO != null) {
			setMobileNO(mobileNO);
		}

		Float salary = (Float)attributes.get("salary");

		if (salary != null) {
			setSalary(salary);
		}
	}

	@Override
	public long getEmpId() {
		return _empId;
	}

	@Override
	public void setEmpId(long empId) {
		_empId = empId;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public String getEmail() {
		if (_email == null) {
			return StringPool.BLANK;
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_columnBitmask |= EMAIL_COLUMN_BITMASK;

		if (_originalEmail == null) {
			_originalEmail = _email;
		}

		_email = email;
	}

	public String getOriginalEmail() {
		return GetterUtil.getString(_originalEmail);
	}

	@Override
	public String getDesigation() {
		if (_desigation == null) {
			return StringPool.BLANK;
		}
		else {
			return _desigation;
		}
	}

	@Override
	public void setDesigation(String desigation) {
		_desigation = desigation;
	}

	@Override
	public int getMobileNO() {
		return _mobileNO;
	}

	@Override
	public void setMobileNO(int mobileNO) {
		_mobileNO = mobileNO;
	}

	@Override
	public float getSalary() {
		return _salary;
	}

	@Override
	public void setSalary(float salary) {
		_salary = salary;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			employee.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public employee toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (employee)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		employeeImpl employeeImpl = new employeeImpl();

		employeeImpl.setEmpId(getEmpId());
		employeeImpl.setName(getName());
		employeeImpl.setEmail(getEmail());
		employeeImpl.setDesigation(getDesigation());
		employeeImpl.setMobileNO(getMobileNO());
		employeeImpl.setSalary(getSalary());

		employeeImpl.resetOriginalValues();

		return employeeImpl;
	}

	@Override
	public int compareTo(employee employee) {
		long primaryKey = employee.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof employee)) {
			return false;
		}

		employee employee = (employee)obj;

		long primaryKey = employee.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		employeeModelImpl employeeModelImpl = this;

		employeeModelImpl._originalEmail = employeeModelImpl._email;

		employeeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<employee> toCacheModel() {
		employeeCacheModel employeeCacheModel = new employeeCacheModel();

		employeeCacheModel.empId = getEmpId();

		employeeCacheModel.name = getName();

		String name = employeeCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			employeeCacheModel.name = null;
		}

		employeeCacheModel.email = getEmail();

		String email = employeeCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			employeeCacheModel.email = null;
		}

		employeeCacheModel.desigation = getDesigation();

		String desigation = employeeCacheModel.desigation;

		if ((desigation != null) && (desigation.length() == 0)) {
			employeeCacheModel.desigation = null;
		}

		employeeCacheModel.mobileNO = getMobileNO();

		employeeCacheModel.salary = getSalary();

		return employeeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{empId=");
		sb.append(getEmpId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append(", desigation=");
		sb.append(getDesigation());
		sb.append(", mobileNO=");
		sb.append(getMobileNO());
		sb.append(", salary=");
		sb.append(getSalary());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.empoylee.model.employee");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>empId</column-name><column-value><![CDATA[");
		sb.append(getEmpId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>desigation</column-name><column-value><![CDATA[");
		sb.append(getDesigation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mobileNO</column-name><column-value><![CDATA[");
		sb.append(getMobileNO());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>salary</column-name><column-value><![CDATA[");
		sb.append(getSalary());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = employee.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			employee.class
		};
	private long _empId;
	private String _name;
	private String _email;
	private String _originalEmail;
	private String _desigation;
	private int _mobileNO;
	private float _salary;
	private long _columnBitmask;
	private employee _escapedModel;
}