/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.chola.successstories.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.chola.successstories.model.sspath;
import com.chola.successstories.model.sspathModel;
import com.chola.successstories.model.sspathSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the sspath service. Represents a row in the &quot;chola_sspath&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link sspathModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link sspathImpl}.
 * </p>
 *
 * @author cloverliferay01
 * @see sspathImpl
 * @see sspath
 * @see sspathModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class sspathModelImpl extends BaseModelImpl<sspath>
	implements sspathModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a sspath model instance should use the {@link sspath} interface instead.
	 */
	public static final String TABLE_NAME = "chola_sspath";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "ssfiledoc", Types.VARCHAR },
			{ "ssfilepath", Types.VARCHAR },
			{ "createdDate", Types.TIMESTAMP },
			{ "createdBy", Types.BIGINT },
			{ "flag", Types.VARCHAR },
			{ "ssdetails_id", Types.BIGINT },
			{ "content_id", Types.BIGINT },
			{ "ssfilename", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ssfiledoc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ssfilepath", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createdBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("flag", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ssdetails_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("content_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ssfilename", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table chola_sspath (id_ LONG not null primary key,ssfiledoc VARCHAR(500) null,ssfilepath VARCHAR(500) null,createdDate DATE null,createdBy LONG,flag VARCHAR(75) null,ssdetails_id LONG,content_id LONG,ssfilename VARCHAR(500) null)";
	public static final String TABLE_SQL_DROP = "drop table chola_sspath";
	public static final String ORDER_BY_JPQL = " ORDER BY sspath.createdDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY chola_sspath.createdDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.chola.successstories.model.sspath"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.chola.successstories.model.sspath"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.chola.successstories.model.sspath"),
			true);
	public static final long CONTENT_ID_COLUMN_BITMASK = 1L;
	public static final long CREATEDDATE_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static sspath toModel(sspathSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		sspath model = new sspathImpl();

		model.setId(soapModel.getId());
		model.setSsfiledoc(soapModel.getSsfiledoc());
		model.setSsfilepath(soapModel.getSsfilepath());
		model.setCreatedDate(soapModel.getCreatedDate());
		model.setCreatedBy(soapModel.getCreatedBy());
		model.setFlag(soapModel.getFlag());
		model.setSsdetails_id(soapModel.getSsdetails_id());
		model.setContent_id(soapModel.getContent_id());
		model.setSsfilename(soapModel.getSsfilename());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<sspath> toModels(sspathSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<sspath> models = new ArrayList<sspath>(soapModels.length);

		for (sspathSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.chola.successstories.model.sspath"));

	public sspathModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return sspath.class;
	}

	@Override
	public String getModelClassName() {
		return sspath.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("ssfiledoc", getSsfiledoc());
		attributes.put("ssfilepath", getSsfilepath());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("flag", getFlag());
		attributes.put("ssdetails_id", getSsdetails_id());
		attributes.put("content_id", getContent_id());
		attributes.put("ssfilename", getSsfilename());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String ssfiledoc = (String)attributes.get("ssfiledoc");

		if (ssfiledoc != null) {
			setSsfiledoc(ssfiledoc);
		}

		String ssfilepath = (String)attributes.get("ssfilepath");

		if (ssfilepath != null) {
			setSsfilepath(ssfilepath);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Long createdBy = (Long)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		String flag = (String)attributes.get("flag");

		if (flag != null) {
			setFlag(flag);
		}

		Long ssdetails_id = (Long)attributes.get("ssdetails_id");

		if (ssdetails_id != null) {
			setSsdetails_id(ssdetails_id);
		}

		Long content_id = (Long)attributes.get("content_id");

		if (content_id != null) {
			setContent_id(content_id);
		}

		String ssfilename = (String)attributes.get("ssfilename");

		if (ssfilename != null) {
			setSsfilename(ssfilename);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public String getSsfiledoc() {
		if (_ssfiledoc == null) {
			return StringPool.BLANK;
		}
		else {
			return _ssfiledoc;
		}
	}

	@Override
	public void setSsfiledoc(String ssfiledoc) {
		_ssfiledoc = ssfiledoc;
	}

	@JSON
	@Override
	public String getSsfilepath() {
		if (_ssfilepath == null) {
			return StringPool.BLANK;
		}
		else {
			return _ssfilepath;
		}
	}

	@Override
	public void setSsfilepath(String ssfilepath) {
		_ssfilepath = ssfilepath;
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_columnBitmask = -1L;

		_createdDate = createdDate;
	}

	@JSON
	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		_createdBy = createdBy;
	}

	@JSON
	@Override
	public String getFlag() {
		if (_flag == null) {
			return StringPool.BLANK;
		}
		else {
			return _flag;
		}
	}

	@Override
	public void setFlag(String flag) {
		_flag = flag;
	}

	@JSON
	@Override
	public long getSsdetails_id() {
		return _ssdetails_id;
	}

	@Override
	public void setSsdetails_id(long ssdetails_id) {
		_ssdetails_id = ssdetails_id;
	}

	@JSON
	@Override
	public long getContent_id() {
		return _content_id;
	}

	@Override
	public void setContent_id(long content_id) {
		_columnBitmask |= CONTENT_ID_COLUMN_BITMASK;

		if (!_setOriginalContent_id) {
			_setOriginalContent_id = true;

			_originalContent_id = _content_id;
		}

		_content_id = content_id;
	}

	public long getOriginalContent_id() {
		return _originalContent_id;
	}

	@JSON
	@Override
	public String getSsfilename() {
		if (_ssfilename == null) {
			return StringPool.BLANK;
		}
		else {
			return _ssfilename;
		}
	}

	@Override
	public void setSsfilename(String ssfilename) {
		_ssfilename = ssfilename;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			sspath.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public sspath toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (sspath)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		sspathImpl sspathImpl = new sspathImpl();

		sspathImpl.setId(getId());
		sspathImpl.setSsfiledoc(getSsfiledoc());
		sspathImpl.setSsfilepath(getSsfilepath());
		sspathImpl.setCreatedDate(getCreatedDate());
		sspathImpl.setCreatedBy(getCreatedBy());
		sspathImpl.setFlag(getFlag());
		sspathImpl.setSsdetails_id(getSsdetails_id());
		sspathImpl.setContent_id(getContent_id());
		sspathImpl.setSsfilename(getSsfilename());

		sspathImpl.resetOriginalValues();

		return sspathImpl;
	}

	@Override
	public int compareTo(sspath sspath) {
		int value = 0;

		value = DateUtil.compareTo(getCreatedDate(), sspath.getCreatedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof sspath)) {
			return false;
		}

		sspath sspath = (sspath)obj;

		long primaryKey = sspath.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		sspathModelImpl sspathModelImpl = this;

		sspathModelImpl._originalContent_id = sspathModelImpl._content_id;

		sspathModelImpl._setOriginalContent_id = false;

		sspathModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<sspath> toCacheModel() {
		sspathCacheModel sspathCacheModel = new sspathCacheModel();

		sspathCacheModel.id = getId();

		sspathCacheModel.ssfiledoc = getSsfiledoc();

		String ssfiledoc = sspathCacheModel.ssfiledoc;

		if ((ssfiledoc != null) && (ssfiledoc.length() == 0)) {
			sspathCacheModel.ssfiledoc = null;
		}

		sspathCacheModel.ssfilepath = getSsfilepath();

		String ssfilepath = sspathCacheModel.ssfilepath;

		if ((ssfilepath != null) && (ssfilepath.length() == 0)) {
			sspathCacheModel.ssfilepath = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			sspathCacheModel.createdDate = createdDate.getTime();
		}
		else {
			sspathCacheModel.createdDate = Long.MIN_VALUE;
		}

		sspathCacheModel.createdBy = getCreatedBy();

		sspathCacheModel.flag = getFlag();

		String flag = sspathCacheModel.flag;

		if ((flag != null) && (flag.length() == 0)) {
			sspathCacheModel.flag = null;
		}

		sspathCacheModel.ssdetails_id = getSsdetails_id();

		sspathCacheModel.content_id = getContent_id();

		sspathCacheModel.ssfilename = getSsfilename();

		String ssfilename = sspathCacheModel.ssfilename;

		if ((ssfilename != null) && (ssfilename.length() == 0)) {
			sspathCacheModel.ssfilename = null;
		}

		return sspathCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", ssfiledoc=");
		sb.append(getSsfiledoc());
		sb.append(", ssfilepath=");
		sb.append(getSsfilepath());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", flag=");
		sb.append(getFlag());
		sb.append(", ssdetails_id=");
		sb.append(getSsdetails_id());
		sb.append(", content_id=");
		sb.append(getContent_id());
		sb.append(", ssfilename=");
		sb.append(getSsfilename());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.chola.successstories.model.sspath");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ssfiledoc</column-name><column-value><![CDATA[");
		sb.append(getSsfiledoc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ssfilepath</column-name><column-value><![CDATA[");
		sb.append(getSsfilepath());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>flag</column-name><column-value><![CDATA[");
		sb.append(getFlag());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ssdetails_id</column-name><column-value><![CDATA[");
		sb.append(getSsdetails_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>content_id</column-name><column-value><![CDATA[");
		sb.append(getContent_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ssfilename</column-name><column-value><![CDATA[");
		sb.append(getSsfilename());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = sspath.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			sspath.class
		};
	private long _id;
	private String _ssfiledoc;
	private String _ssfilepath;
	private Date _createdDate;
	private long _createdBy;
	private String _flag;
	private long _ssdetails_id;
	private long _content_id;
	private long _originalContent_id;
	private boolean _setOriginalContent_id;
	private String _ssfilename;
	private long _columnBitmask;
	private sspath _escapedModel;
}