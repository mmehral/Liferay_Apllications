/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.chola.feedforward.service.base;

import aQute.bnd.annotation.ProviderType;

import com.chola.feedforward.model.feedforwardgalleryusers;
import com.chola.feedforward.service.feedforwardgalleryusersLocalService;
import com.chola.feedforward.service.persistence.feedforwardgalleryFinder;
import com.chola.feedforward.service.persistence.feedforwardgalleryPersistence;
import com.chola.feedforward.service.persistence.feedforwardgallerypathPersistence;
import com.chola.feedforward.service.persistence.feedforwardgalleryusersPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the feedforwardgalleryusers local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.chola.feedforward.service.impl.feedforwardgalleryusersLocalServiceImpl}.
 * </p>
 *
 * @author CloverLiferay02
 * @see com.chola.feedforward.service.impl.feedforwardgalleryusersLocalServiceImpl
 * @see com.chola.feedforward.service.feedforwardgalleryusersLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class feedforwardgalleryusersLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements feedforwardgalleryusersLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.chola.feedforward.service.feedforwardgalleryusersLocalServiceUtil} to access the feedforwardgalleryusers local service.
	 */

	/**
	 * Adds the feedforwardgalleryusers to the database. Also notifies the appropriate model listeners.
	 *
	 * @param feedforwardgalleryusers the feedforwardgalleryusers
	 * @return the feedforwardgalleryusers that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public feedforwardgalleryusers addfeedforwardgalleryusers(
		feedforwardgalleryusers feedforwardgalleryusers) {
		feedforwardgalleryusers.setNew(true);

		return feedforwardgalleryusersPersistence.update(feedforwardgalleryusers);
	}

	/**
	 * Creates a new feedforwardgalleryusers with the primary key. Does not add the feedforwardgalleryusers to the database.
	 *
	 * @param id the primary key for the new feedforwardgalleryusers
	 * @return the new feedforwardgalleryusers
	 */
	@Override
	public feedforwardgalleryusers createfeedforwardgalleryusers(long id) {
		return feedforwardgalleryusersPersistence.create(id);
	}

	/**
	 * Deletes the feedforwardgalleryusers with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param id the primary key of the feedforwardgalleryusers
	 * @return the feedforwardgalleryusers that was removed
	 * @throws PortalException if a feedforwardgalleryusers with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public feedforwardgalleryusers deletefeedforwardgalleryusers(long id)
		throws PortalException {
		return feedforwardgalleryusersPersistence.remove(id);
	}

	/**
	 * Deletes the feedforwardgalleryusers from the database. Also notifies the appropriate model listeners.
	 *
	 * @param feedforwardgalleryusers the feedforwardgalleryusers
	 * @return the feedforwardgalleryusers that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public feedforwardgalleryusers deletefeedforwardgalleryusers(
		feedforwardgalleryusers feedforwardgalleryusers) {
		return feedforwardgalleryusersPersistence.remove(feedforwardgalleryusers);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(feedforwardgalleryusers.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return feedforwardgalleryusersPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.chola.feedforward.model.impl.feedforwardgalleryusersModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return feedforwardgalleryusersPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.chola.feedforward.model.impl.feedforwardgalleryusersModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return feedforwardgalleryusersPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return feedforwardgalleryusersPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return feedforwardgalleryusersPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public feedforwardgalleryusers fetchfeedforwardgalleryusers(long id) {
		return feedforwardgalleryusersPersistence.fetchByPrimaryKey(id);
	}

	/**
	 * Returns the feedforwardgalleryusers with the primary key.
	 *
	 * @param id the primary key of the feedforwardgalleryusers
	 * @return the feedforwardgalleryusers
	 * @throws PortalException if a feedforwardgalleryusers with the primary key could not be found
	 */
	@Override
	public feedforwardgalleryusers getfeedforwardgalleryusers(long id)
		throws PortalException {
		return feedforwardgalleryusersPersistence.findByPrimaryKey(id);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(feedforwardgalleryusersLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(feedforwardgalleryusers.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(feedforwardgalleryusersLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(feedforwardgalleryusers.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(feedforwardgalleryusersLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(feedforwardgalleryusers.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return feedforwardgalleryusersLocalService.deletefeedforwardgalleryusers((feedforwardgalleryusers)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return feedforwardgalleryusersPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the feedforwardgalleryuserses.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.chola.feedforward.model.impl.feedforwardgalleryusersModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of feedforwardgalleryuserses
	 * @param end the upper bound of the range of feedforwardgalleryuserses (not inclusive)
	 * @return the range of feedforwardgalleryuserses
	 */
	@Override
	public List<feedforwardgalleryusers> getfeedforwardgalleryuserses(
		int start, int end) {
		return feedforwardgalleryusersPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of feedforwardgalleryuserses.
	 *
	 * @return the number of feedforwardgalleryuserses
	 */
	@Override
	public int getfeedforwardgalleryusersesCount() {
		return feedforwardgalleryusersPersistence.countAll();
	}

	/**
	 * Updates the feedforwardgalleryusers in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param feedforwardgalleryusers the feedforwardgalleryusers
	 * @return the feedforwardgalleryusers that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public feedforwardgalleryusers updatefeedforwardgalleryusers(
		feedforwardgalleryusers feedforwardgalleryusers) {
		return feedforwardgalleryusersPersistence.update(feedforwardgalleryusers);
	}

	/**
	 * Returns the feedforwardgallery local service.
	 *
	 * @return the feedforwardgallery local service
	 */
	public com.chola.feedforward.service.feedforwardgalleryLocalService getfeedforwardgalleryLocalService() {
		return feedforwardgalleryLocalService;
	}

	/**
	 * Sets the feedforwardgallery local service.
	 *
	 * @param feedforwardgalleryLocalService the feedforwardgallery local service
	 */
	public void setfeedforwardgalleryLocalService(
		com.chola.feedforward.service.feedforwardgalleryLocalService feedforwardgalleryLocalService) {
		this.feedforwardgalleryLocalService = feedforwardgalleryLocalService;
	}

	/**
	 * Returns the feedforwardgallery persistence.
	 *
	 * @return the feedforwardgallery persistence
	 */
	public feedforwardgalleryPersistence getfeedforwardgalleryPersistence() {
		return feedforwardgalleryPersistence;
	}

	/**
	 * Sets the feedforwardgallery persistence.
	 *
	 * @param feedforwardgalleryPersistence the feedforwardgallery persistence
	 */
	public void setfeedforwardgalleryPersistence(
		feedforwardgalleryPersistence feedforwardgalleryPersistence) {
		this.feedforwardgalleryPersistence = feedforwardgalleryPersistence;
	}

	/**
	 * Returns the feedforwardgallery finder.
	 *
	 * @return the feedforwardgallery finder
	 */
	public feedforwardgalleryFinder getfeedforwardgalleryFinder() {
		return feedforwardgalleryFinder;
	}

	/**
	 * Sets the feedforwardgallery finder.
	 *
	 * @param feedforwardgalleryFinder the feedforwardgallery finder
	 */
	public void setfeedforwardgalleryFinder(
		feedforwardgalleryFinder feedforwardgalleryFinder) {
		this.feedforwardgalleryFinder = feedforwardgalleryFinder;
	}

	/**
	 * Returns the feedforwardgallerypath local service.
	 *
	 * @return the feedforwardgallerypath local service
	 */
	public com.chola.feedforward.service.feedforwardgallerypathLocalService getfeedforwardgallerypathLocalService() {
		return feedforwardgallerypathLocalService;
	}

	/**
	 * Sets the feedforwardgallerypath local service.
	 *
	 * @param feedforwardgallerypathLocalService the feedforwardgallerypath local service
	 */
	public void setfeedforwardgallerypathLocalService(
		com.chola.feedforward.service.feedforwardgallerypathLocalService feedforwardgallerypathLocalService) {
		this.feedforwardgallerypathLocalService = feedforwardgallerypathLocalService;
	}

	/**
	 * Returns the feedforwardgallerypath persistence.
	 *
	 * @return the feedforwardgallerypath persistence
	 */
	public feedforwardgallerypathPersistence getfeedforwardgallerypathPersistence() {
		return feedforwardgallerypathPersistence;
	}

	/**
	 * Sets the feedforwardgallerypath persistence.
	 *
	 * @param feedforwardgallerypathPersistence the feedforwardgallerypath persistence
	 */
	public void setfeedforwardgallerypathPersistence(
		feedforwardgallerypathPersistence feedforwardgallerypathPersistence) {
		this.feedforwardgallerypathPersistence = feedforwardgallerypathPersistence;
	}

	/**
	 * Returns the feedforwardgalleryusers local service.
	 *
	 * @return the feedforwardgalleryusers local service
	 */
	public feedforwardgalleryusersLocalService getfeedforwardgalleryusersLocalService() {
		return feedforwardgalleryusersLocalService;
	}

	/**
	 * Sets the feedforwardgalleryusers local service.
	 *
	 * @param feedforwardgalleryusersLocalService the feedforwardgalleryusers local service
	 */
	public void setfeedforwardgalleryusersLocalService(
		feedforwardgalleryusersLocalService feedforwardgalleryusersLocalService) {
		this.feedforwardgalleryusersLocalService = feedforwardgalleryusersLocalService;
	}

	/**
	 * Returns the feedforwardgalleryusers persistence.
	 *
	 * @return the feedforwardgalleryusers persistence
	 */
	public feedforwardgalleryusersPersistence getfeedforwardgalleryusersPersistence() {
		return feedforwardgalleryusersPersistence;
	}

	/**
	 * Sets the feedforwardgalleryusers persistence.
	 *
	 * @param feedforwardgalleryusersPersistence the feedforwardgalleryusers persistence
	 */
	public void setfeedforwardgalleryusersPersistence(
		feedforwardgalleryusersPersistence feedforwardgalleryusersPersistence) {
		this.feedforwardgalleryusersPersistence = feedforwardgalleryusersPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.chola.feedforward.model.feedforwardgalleryusers",
			feedforwardgalleryusersLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.chola.feedforward.model.feedforwardgalleryusers");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return feedforwardgalleryusersLocalService.class.getName();
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return feedforwardgalleryusers.class;
	}

	protected String getModelClassName() {
		return feedforwardgalleryusers.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = feedforwardgalleryusersPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.chola.feedforward.service.feedforwardgalleryLocalService.class)
	protected com.chola.feedforward.service.feedforwardgalleryLocalService feedforwardgalleryLocalService;
	@BeanReference(type = feedforwardgalleryPersistence.class)
	protected feedforwardgalleryPersistence feedforwardgalleryPersistence;
	@BeanReference(type = feedforwardgalleryFinder.class)
	protected feedforwardgalleryFinder feedforwardgalleryFinder;
	@BeanReference(type = com.chola.feedforward.service.feedforwardgallerypathLocalService.class)
	protected com.chola.feedforward.service.feedforwardgallerypathLocalService feedforwardgallerypathLocalService;
	@BeanReference(type = feedforwardgallerypathPersistence.class)
	protected feedforwardgallerypathPersistence feedforwardgallerypathPersistence;
	@BeanReference(type = feedforwardgalleryusersLocalService.class)
	protected feedforwardgalleryusersLocalService feedforwardgalleryusersLocalService;
	@BeanReference(type = feedforwardgalleryusersPersistence.class)
	protected feedforwardgalleryusersPersistence feedforwardgalleryusersPersistence;
	@BeanReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@BeanReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@BeanReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private ClassLoader _classLoader;
	private feedforwardgalleryusersLocalServiceClpInvoker _clpInvoker = new feedforwardgalleryusersLocalServiceClpInvoker();
}