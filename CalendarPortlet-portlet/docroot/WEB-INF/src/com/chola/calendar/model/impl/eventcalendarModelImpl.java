/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.chola.calendar.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.chola.calendar.model.eventcalendar;
import com.chola.calendar.model.eventcalendarModel;
import com.chola.calendar.model.eventcalendarSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the eventcalendar service. Represents a row in the &quot;events_eventcalendar&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link eventcalendarModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link eventcalendarImpl}.
 * </p>
 *
 * @author adms.java1
 * @see eventcalendarImpl
 * @see eventcalendar
 * @see eventcalendarModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class eventcalendarModelImpl extends BaseModelImpl<eventcalendar>
	implements eventcalendarModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a eventcalendar model instance should use the {@link eventcalendar} interface instead.
	 */
	public static final String TABLE_NAME = "events_eventcalendar";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "startdate", Types.TIMESTAMP },
			{ "enddate", Types.TIMESTAMP },
			{ "color", Types.VARCHAR },
			{ "url", Types.VARCHAR },
			{ "userid", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("startdate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("enddate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("color", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("url", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userid", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table events_eventcalendar (id_ LONG not null primary key,name VARCHAR(75) null,startdate DATE null,enddate DATE null,color VARCHAR(75) null,url VARCHAR(75) null,userid VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table events_eventcalendar";
	public static final String ORDER_BY_JPQL = " ORDER BY eventcalendar.name ASC, eventcalendar.startdate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY events_eventcalendar.name ASC, events_eventcalendar.startdate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.chola.calendar.model.eventcalendar"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.chola.calendar.model.eventcalendar"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.chola.calendar.model.eventcalendar"),
			true);
	public static final long NAME_COLUMN_BITMASK = 1L;
	public static final long STARTDATE_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static eventcalendar toModel(eventcalendarSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		eventcalendar model = new eventcalendarImpl();

		model.setId(soapModel.getId());
		model.setName(soapModel.getName());
		model.setStartdate(soapModel.getStartdate());
		model.setEnddate(soapModel.getEnddate());
		model.setColor(soapModel.getColor());
		model.setUrl(soapModel.getUrl());
		model.setUserid(soapModel.getUserid());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<eventcalendar> toModels(eventcalendarSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<eventcalendar> models = new ArrayList<eventcalendar>(soapModels.length);

		for (eventcalendarSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.chola.calendar.model.eventcalendar"));

	public eventcalendarModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return eventcalendar.class;
	}

	@Override
	public String getModelClassName() {
		return eventcalendar.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("name", getName());
		attributes.put("startdate", getStartdate());
		attributes.put("enddate", getEnddate());
		attributes.put("color", getColor());
		attributes.put("url", getUrl());
		attributes.put("userid", getUserid());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		Date startdate = (Date)attributes.get("startdate");

		if (startdate != null) {
			setStartdate(startdate);
		}

		Date enddate = (Date)attributes.get("enddate");

		if (enddate != null) {
			setEnddate(enddate);
		}

		String color = (String)attributes.get("color");

		if (color != null) {
			setColor(color);
		}

		String url = (String)attributes.get("url");

		if (url != null) {
			setUrl(url);
		}

		String userid = (String)attributes.get("userid");

		if (userid != null) {
			setUserid(userid);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask = -1L;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@JSON
	@Override
	public Date getStartdate() {
		return _startdate;
	}

	@Override
	public void setStartdate(Date startdate) {
		_columnBitmask = -1L;

		_startdate = startdate;
	}

	@JSON
	@Override
	public Date getEnddate() {
		return _enddate;
	}

	@Override
	public void setEnddate(Date enddate) {
		_enddate = enddate;
	}

	@JSON
	@Override
	public String getColor() {
		if (_color == null) {
			return StringPool.BLANK;
		}
		else {
			return _color;
		}
	}

	@Override
	public void setColor(String color) {
		_color = color;
	}

	@JSON
	@Override
	public String getUrl() {
		if (_url == null) {
			return StringPool.BLANK;
		}
		else {
			return _url;
		}
	}

	@Override
	public void setUrl(String url) {
		_url = url;
	}

	@JSON
	@Override
	public String getUserid() {
		if (_userid == null) {
			return StringPool.BLANK;
		}
		else {
			return _userid;
		}
	}

	@Override
	public void setUserid(String userid) {
		_userid = userid;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			eventcalendar.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public eventcalendar toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (eventcalendar)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		eventcalendarImpl eventcalendarImpl = new eventcalendarImpl();

		eventcalendarImpl.setId(getId());
		eventcalendarImpl.setName(getName());
		eventcalendarImpl.setStartdate(getStartdate());
		eventcalendarImpl.setEnddate(getEnddate());
		eventcalendarImpl.setColor(getColor());
		eventcalendarImpl.setUrl(getUrl());
		eventcalendarImpl.setUserid(getUserid());

		eventcalendarImpl.resetOriginalValues();

		return eventcalendarImpl;
	}

	@Override
	public int compareTo(eventcalendar eventcalendar) {
		int value = 0;

		value = getName().compareTo(eventcalendar.getName());

		if (value != 0) {
			return value;
		}

		value = DateUtil.compareTo(getStartdate(), eventcalendar.getStartdate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof eventcalendar)) {
			return false;
		}

		eventcalendar eventcalendar = (eventcalendar)obj;

		long primaryKey = eventcalendar.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		eventcalendarModelImpl eventcalendarModelImpl = this;

		eventcalendarModelImpl._originalName = eventcalendarModelImpl._name;

		eventcalendarModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<eventcalendar> toCacheModel() {
		eventcalendarCacheModel eventcalendarCacheModel = new eventcalendarCacheModel();

		eventcalendarCacheModel.id = getId();

		eventcalendarCacheModel.name = getName();

		String name = eventcalendarCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			eventcalendarCacheModel.name = null;
		}

		Date startdate = getStartdate();

		if (startdate != null) {
			eventcalendarCacheModel.startdate = startdate.getTime();
		}
		else {
			eventcalendarCacheModel.startdate = Long.MIN_VALUE;
		}

		Date enddate = getEnddate();

		if (enddate != null) {
			eventcalendarCacheModel.enddate = enddate.getTime();
		}
		else {
			eventcalendarCacheModel.enddate = Long.MIN_VALUE;
		}

		eventcalendarCacheModel.color = getColor();

		String color = eventcalendarCacheModel.color;

		if ((color != null) && (color.length() == 0)) {
			eventcalendarCacheModel.color = null;
		}

		eventcalendarCacheModel.url = getUrl();

		String url = eventcalendarCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			eventcalendarCacheModel.url = null;
		}

		eventcalendarCacheModel.userid = getUserid();

		String userid = eventcalendarCacheModel.userid;

		if ((userid != null) && (userid.length() == 0)) {
			eventcalendarCacheModel.userid = null;
		}

		return eventcalendarCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", startdate=");
		sb.append(getStartdate());
		sb.append(", enddate=");
		sb.append(getEnddate());
		sb.append(", color=");
		sb.append(getColor());
		sb.append(", url=");
		sb.append(getUrl());
		sb.append(", userid=");
		sb.append(getUserid());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.chola.calendar.model.eventcalendar");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startdate</column-name><column-value><![CDATA[");
		sb.append(getStartdate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>enddate</column-name><column-value><![CDATA[");
		sb.append(getEnddate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>color</column-name><column-value><![CDATA[");
		sb.append(getColor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>url</column-name><column-value><![CDATA[");
		sb.append(getUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userid</column-name><column-value><![CDATA[");
		sb.append(getUserid());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = eventcalendar.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			eventcalendar.class
		};
	private long _id;
	private String _name;
	private String _originalName;
	private Date _startdate;
	private Date _enddate;
	private String _color;
	private String _url;
	private String _userid;
	private long _columnBitmask;
	private eventcalendar _escapedModel;
}