/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.chola.calendar.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.chola.calendar.model.EmpInfoEntity;
import com.chola.calendar.model.EmpInfoEntityModel;
import com.chola.calendar.model.EmpInfoEntitySoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EmpInfoEntity service. Represents a row in the &quot;events_EmpInfoEntity&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link EmpInfoEntityModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmpInfoEntityImpl}.
 * </p>
 *
 * @author adms.java1
 * @see EmpInfoEntityImpl
 * @see EmpInfoEntity
 * @see EmpInfoEntityModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class EmpInfoEntityModelImpl extends BaseModelImpl<EmpInfoEntity>
	implements EmpInfoEntityModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a emp info entity model instance should use the {@link EmpInfoEntity} interface instead.
	 */
	public static final String TABLE_NAME = "events_EmpInfoEntity";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "empId", Types.VARCHAR },
			{ "name", Types.VARCHAR },
			{ "emailid", Types.VARCHAR },
			{ "birthday", Types.TIMESTAMP },
			{ "grade", Types.VARCHAR },
			{ "functionName", Types.VARCHAR },
			{ "department", Types.VARCHAR },
			{ "subdepartment", Types.VARCHAR },
			{ "location", Types.VARCHAR },
			{ "gender", Types.VARCHAR },
			{ "unit", Types.VARCHAR },
			{ "userid", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("empId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emailid", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("birthday", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("grade", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("functionName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("department", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("subdepartment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("location", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("gender", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("unit", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userid", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table events_EmpInfoEntity (id_ LONG not null primary key,empId VARCHAR(75) null,name VARCHAR(75) null,emailid VARCHAR(75) null,birthday DATE null,grade VARCHAR(75) null,functionName VARCHAR(75) null,department VARCHAR(75) null,subdepartment VARCHAR(75) null,location VARCHAR(75) null,gender VARCHAR(75) null,unit VARCHAR(75) null,userid VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table events_EmpInfoEntity";
	public static final String ORDER_BY_JPQL = " ORDER BY empInfoEntity.name ASC";
	public static final String ORDER_BY_SQL = " ORDER BY events_EmpInfoEntity.name ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.chola.calendar.model.EmpInfoEntity"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.chola.calendar.model.EmpInfoEntity"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.chola.calendar.model.EmpInfoEntity"),
			true);
	public static final long NAME_COLUMN_BITMASK = 1L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static EmpInfoEntity toModel(EmpInfoEntitySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		EmpInfoEntity model = new EmpInfoEntityImpl();

		model.setId(soapModel.getId());
		model.setEmpId(soapModel.getEmpId());
		model.setName(soapModel.getName());
		model.setEmailid(soapModel.getEmailid());
		model.setBirthday(soapModel.getBirthday());
		model.setGrade(soapModel.getGrade());
		model.setFunctionName(soapModel.getFunctionName());
		model.setDepartment(soapModel.getDepartment());
		model.setSubdepartment(soapModel.getSubdepartment());
		model.setLocation(soapModel.getLocation());
		model.setGender(soapModel.getGender());
		model.setUnit(soapModel.getUnit());
		model.setUserid(soapModel.getUserid());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<EmpInfoEntity> toModels(EmpInfoEntitySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<EmpInfoEntity> models = new ArrayList<EmpInfoEntity>(soapModels.length);

		for (EmpInfoEntitySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.chola.calendar.model.EmpInfoEntity"));

	public EmpInfoEntityModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EmpInfoEntity.class;
	}

	@Override
	public String getModelClassName() {
		return EmpInfoEntity.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("empId", getEmpId());
		attributes.put("name", getName());
		attributes.put("emailid", getEmailid());
		attributes.put("birthday", getBirthday());
		attributes.put("grade", getGrade());
		attributes.put("functionName", getFunctionName());
		attributes.put("department", getDepartment());
		attributes.put("subdepartment", getSubdepartment());
		attributes.put("location", getLocation());
		attributes.put("gender", getGender());
		attributes.put("unit", getUnit());
		attributes.put("userid", getUserid());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String empId = (String)attributes.get("empId");

		if (empId != null) {
			setEmpId(empId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String emailid = (String)attributes.get("emailid");

		if (emailid != null) {
			setEmailid(emailid);
		}

		Date birthday = (Date)attributes.get("birthday");

		if (birthday != null) {
			setBirthday(birthday);
		}

		String grade = (String)attributes.get("grade");

		if (grade != null) {
			setGrade(grade);
		}

		String functionName = (String)attributes.get("functionName");

		if (functionName != null) {
			setFunctionName(functionName);
		}

		String department = (String)attributes.get("department");

		if (department != null) {
			setDepartment(department);
		}

		String subdepartment = (String)attributes.get("subdepartment");

		if (subdepartment != null) {
			setSubdepartment(subdepartment);
		}

		String location = (String)attributes.get("location");

		if (location != null) {
			setLocation(location);
		}

		String gender = (String)attributes.get("gender");

		if (gender != null) {
			setGender(gender);
		}

		String unit = (String)attributes.get("unit");

		if (unit != null) {
			setUnit(unit);
		}

		String userid = (String)attributes.get("userid");

		if (userid != null) {
			setUserid(userid);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public String getEmpId() {
		if (_empId == null) {
			return StringPool.BLANK;
		}
		else {
			return _empId;
		}
	}

	@Override
	public void setEmpId(String empId) {
		_empId = empId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask = -1L;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@JSON
	@Override
	public String getEmailid() {
		if (_emailid == null) {
			return StringPool.BLANK;
		}
		else {
			return _emailid;
		}
	}

	@Override
	public void setEmailid(String emailid) {
		_emailid = emailid;
	}

	@JSON
	@Override
	public Date getBirthday() {
		return _birthday;
	}

	@Override
	public void setBirthday(Date birthday) {
		_birthday = birthday;
	}

	@JSON
	@Override
	public String getGrade() {
		if (_grade == null) {
			return StringPool.BLANK;
		}
		else {
			return _grade;
		}
	}

	@Override
	public void setGrade(String grade) {
		_grade = grade;
	}

	@JSON
	@Override
	public String getFunctionName() {
		if (_functionName == null) {
			return StringPool.BLANK;
		}
		else {
			return _functionName;
		}
	}

	@Override
	public void setFunctionName(String functionName) {
		_functionName = functionName;
	}

	@JSON
	@Override
	public String getDepartment() {
		if (_department == null) {
			return StringPool.BLANK;
		}
		else {
			return _department;
		}
	}

	@Override
	public void setDepartment(String department) {
		_department = department;
	}

	@JSON
	@Override
	public String getSubdepartment() {
		if (_subdepartment == null) {
			return StringPool.BLANK;
		}
		else {
			return _subdepartment;
		}
	}

	@Override
	public void setSubdepartment(String subdepartment) {
		_subdepartment = subdepartment;
	}

	@JSON
	@Override
	public String getLocation() {
		if (_location == null) {
			return StringPool.BLANK;
		}
		else {
			return _location;
		}
	}

	@Override
	public void setLocation(String location) {
		_location = location;
	}

	@JSON
	@Override
	public String getGender() {
		if (_gender == null) {
			return StringPool.BLANK;
		}
		else {
			return _gender;
		}
	}

	@Override
	public void setGender(String gender) {
		_gender = gender;
	}

	@JSON
	@Override
	public String getUnit() {
		if (_unit == null) {
			return StringPool.BLANK;
		}
		else {
			return _unit;
		}
	}

	@Override
	public void setUnit(String unit) {
		_unit = unit;
	}

	@JSON
	@Override
	public String getUserid() {
		if (_userid == null) {
			return StringPool.BLANK;
		}
		else {
			return _userid;
		}
	}

	@Override
	public void setUserid(String userid) {
		_userid = userid;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			EmpInfoEntity.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EmpInfoEntity toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (EmpInfoEntity)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EmpInfoEntityImpl empInfoEntityImpl = new EmpInfoEntityImpl();

		empInfoEntityImpl.setId(getId());
		empInfoEntityImpl.setEmpId(getEmpId());
		empInfoEntityImpl.setName(getName());
		empInfoEntityImpl.setEmailid(getEmailid());
		empInfoEntityImpl.setBirthday(getBirthday());
		empInfoEntityImpl.setGrade(getGrade());
		empInfoEntityImpl.setFunctionName(getFunctionName());
		empInfoEntityImpl.setDepartment(getDepartment());
		empInfoEntityImpl.setSubdepartment(getSubdepartment());
		empInfoEntityImpl.setLocation(getLocation());
		empInfoEntityImpl.setGender(getGender());
		empInfoEntityImpl.setUnit(getUnit());
		empInfoEntityImpl.setUserid(getUserid());

		empInfoEntityImpl.resetOriginalValues();

		return empInfoEntityImpl;
	}

	@Override
	public int compareTo(EmpInfoEntity empInfoEntity) {
		int value = 0;

		value = getName().compareTo(empInfoEntity.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof EmpInfoEntity)) {
			return false;
		}

		EmpInfoEntity empInfoEntity = (EmpInfoEntity)obj;

		long primaryKey = empInfoEntity.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		EmpInfoEntityModelImpl empInfoEntityModelImpl = this;

		empInfoEntityModelImpl._originalName = empInfoEntityModelImpl._name;

		empInfoEntityModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<EmpInfoEntity> toCacheModel() {
		EmpInfoEntityCacheModel empInfoEntityCacheModel = new EmpInfoEntityCacheModel();

		empInfoEntityCacheModel.id = getId();

		empInfoEntityCacheModel.empId = getEmpId();

		String empId = empInfoEntityCacheModel.empId;

		if ((empId != null) && (empId.length() == 0)) {
			empInfoEntityCacheModel.empId = null;
		}

		empInfoEntityCacheModel.name = getName();

		String name = empInfoEntityCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			empInfoEntityCacheModel.name = null;
		}

		empInfoEntityCacheModel.emailid = getEmailid();

		String emailid = empInfoEntityCacheModel.emailid;

		if ((emailid != null) && (emailid.length() == 0)) {
			empInfoEntityCacheModel.emailid = null;
		}

		Date birthday = getBirthday();

		if (birthday != null) {
			empInfoEntityCacheModel.birthday = birthday.getTime();
		}
		else {
			empInfoEntityCacheModel.birthday = Long.MIN_VALUE;
		}

		empInfoEntityCacheModel.grade = getGrade();

		String grade = empInfoEntityCacheModel.grade;

		if ((grade != null) && (grade.length() == 0)) {
			empInfoEntityCacheModel.grade = null;
		}

		empInfoEntityCacheModel.functionName = getFunctionName();

		String functionName = empInfoEntityCacheModel.functionName;

		if ((functionName != null) && (functionName.length() == 0)) {
			empInfoEntityCacheModel.functionName = null;
		}

		empInfoEntityCacheModel.department = getDepartment();

		String department = empInfoEntityCacheModel.department;

		if ((department != null) && (department.length() == 0)) {
			empInfoEntityCacheModel.department = null;
		}

		empInfoEntityCacheModel.subdepartment = getSubdepartment();

		String subdepartment = empInfoEntityCacheModel.subdepartment;

		if ((subdepartment != null) && (subdepartment.length() == 0)) {
			empInfoEntityCacheModel.subdepartment = null;
		}

		empInfoEntityCacheModel.location = getLocation();

		String location = empInfoEntityCacheModel.location;

		if ((location != null) && (location.length() == 0)) {
			empInfoEntityCacheModel.location = null;
		}

		empInfoEntityCacheModel.gender = getGender();

		String gender = empInfoEntityCacheModel.gender;

		if ((gender != null) && (gender.length() == 0)) {
			empInfoEntityCacheModel.gender = null;
		}

		empInfoEntityCacheModel.unit = getUnit();

		String unit = empInfoEntityCacheModel.unit;

		if ((unit != null) && (unit.length() == 0)) {
			empInfoEntityCacheModel.unit = null;
		}

		empInfoEntityCacheModel.userid = getUserid();

		String userid = empInfoEntityCacheModel.userid;

		if ((userid != null) && (userid.length() == 0)) {
			empInfoEntityCacheModel.userid = null;
		}

		return empInfoEntityCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", empId=");
		sb.append(getEmpId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", emailid=");
		sb.append(getEmailid());
		sb.append(", birthday=");
		sb.append(getBirthday());
		sb.append(", grade=");
		sb.append(getGrade());
		sb.append(", functionName=");
		sb.append(getFunctionName());
		sb.append(", department=");
		sb.append(getDepartment());
		sb.append(", subdepartment=");
		sb.append(getSubdepartment());
		sb.append(", location=");
		sb.append(getLocation());
		sb.append(", gender=");
		sb.append(getGender());
		sb.append(", unit=");
		sb.append(getUnit());
		sb.append(", userid=");
		sb.append(getUserid());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("com.chola.calendar.model.EmpInfoEntity");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>empId</column-name><column-value><![CDATA[");
		sb.append(getEmpId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emailid</column-name><column-value><![CDATA[");
		sb.append(getEmailid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>birthday</column-name><column-value><![CDATA[");
		sb.append(getBirthday());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>grade</column-name><column-value><![CDATA[");
		sb.append(getGrade());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>functionName</column-name><column-value><![CDATA[");
		sb.append(getFunctionName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>department</column-name><column-value><![CDATA[");
		sb.append(getDepartment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subdepartment</column-name><column-value><![CDATA[");
		sb.append(getSubdepartment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>location</column-name><column-value><![CDATA[");
		sb.append(getLocation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gender</column-name><column-value><![CDATA[");
		sb.append(getGender());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unit</column-name><column-value><![CDATA[");
		sb.append(getUnit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userid</column-name><column-value><![CDATA[");
		sb.append(getUserid());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = EmpInfoEntity.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			EmpInfoEntity.class
		};
	private long _id;
	private String _empId;
	private String _name;
	private String _originalName;
	private String _emailid;
	private Date _birthday;
	private String _grade;
	private String _functionName;
	private String _department;
	private String _subdepartment;
	private String _location;
	private String _gender;
	private String _unit;
	private String _userid;
	private long _columnBitmask;
	private EmpInfoEntity _escapedModel;
}