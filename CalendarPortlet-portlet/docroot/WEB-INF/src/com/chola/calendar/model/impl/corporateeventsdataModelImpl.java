/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.chola.calendar.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.chola.calendar.model.corporateeventsdata;
import com.chola.calendar.model.corporateeventsdataModel;
import com.chola.calendar.model.corporateeventsdataSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the corporateeventsdata service. Represents a row in the &quot;events_corporateeventsdata&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link corporateeventsdataModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link corporateeventsdataImpl}.
 * </p>
 *
 * @author adms.java1
 * @see corporateeventsdataImpl
 * @see corporateeventsdata
 * @see corporateeventsdataModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class corporateeventsdataModelImpl extends BaseModelImpl<corporateeventsdata>
	implements corporateeventsdataModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a corporateeventsdata model instance should use the {@link corporateeventsdata} interface instead.
	 */
	public static final String TABLE_NAME = "events_corporateeventsdata";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "title", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "zone", Types.VARCHAR },
			{ "region", Types.VARCHAR },
			{ "location", Types.VARCHAR },
			{ "personincharge", Types.VARCHAR },
			{ "schedulestartdate", Types.TIMESTAMP },
			{ "scheduleenddate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("zone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("region", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("location", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("personincharge", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("schedulestartdate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("scheduleenddate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table events_corporateeventsdata (id_ LONG not null primary key,title VARCHAR(500) null,description VARCHAR(500) null,zone VARCHAR(200) null,region VARCHAR(200) null,location VARCHAR(200) null,personincharge VARCHAR(200) null,schedulestartdate DATE null,scheduleenddate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table events_corporateeventsdata";
	public static final String ORDER_BY_JPQL = " ORDER BY corporateeventsdata.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY events_corporateeventsdata.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.chola.calendar.model.corporateeventsdata"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.chola.calendar.model.corporateeventsdata"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static corporateeventsdata toModel(corporateeventsdataSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		corporateeventsdata model = new corporateeventsdataImpl();

		model.setId(soapModel.getId());
		model.setTitle(soapModel.getTitle());
		model.setDescription(soapModel.getDescription());
		model.setZone(soapModel.getZone());
		model.setRegion(soapModel.getRegion());
		model.setLocation(soapModel.getLocation());
		model.setPersonincharge(soapModel.getPersonincharge());
		model.setSchedulestartdate(soapModel.getSchedulestartdate());
		model.setScheduleenddate(soapModel.getScheduleenddate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<corporateeventsdata> toModels(
		corporateeventsdataSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<corporateeventsdata> models = new ArrayList<corporateeventsdata>(soapModels.length);

		for (corporateeventsdataSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.chola.calendar.model.corporateeventsdata"));

	public corporateeventsdataModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return corporateeventsdata.class;
	}

	@Override
	public String getModelClassName() {
		return corporateeventsdata.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("title", getTitle());
		attributes.put("description", getDescription());
		attributes.put("zone", getZone());
		attributes.put("region", getRegion());
		attributes.put("location", getLocation());
		attributes.put("personincharge", getPersonincharge());
		attributes.put("schedulestartdate", getSchedulestartdate());
		attributes.put("scheduleenddate", getScheduleenddate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String zone = (String)attributes.get("zone");

		if (zone != null) {
			setZone(zone);
		}

		String region = (String)attributes.get("region");

		if (region != null) {
			setRegion(region);
		}

		String location = (String)attributes.get("location");

		if (location != null) {
			setLocation(location);
		}

		String personincharge = (String)attributes.get("personincharge");

		if (personincharge != null) {
			setPersonincharge(personincharge);
		}

		Date schedulestartdate = (Date)attributes.get("schedulestartdate");

		if (schedulestartdate != null) {
			setSchedulestartdate(schedulestartdate);
		}

		Date scheduleenddate = (Date)attributes.get("scheduleenddate");

		if (scheduleenddate != null) {
			setScheduleenddate(scheduleenddate);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public String getZone() {
		if (_zone == null) {
			return StringPool.BLANK;
		}
		else {
			return _zone;
		}
	}

	@Override
	public void setZone(String zone) {
		_zone = zone;
	}

	@JSON
	@Override
	public String getRegion() {
		if (_region == null) {
			return StringPool.BLANK;
		}
		else {
			return _region;
		}
	}

	@Override
	public void setRegion(String region) {
		_region = region;
	}

	@JSON
	@Override
	public String getLocation() {
		if (_location == null) {
			return StringPool.BLANK;
		}
		else {
			return _location;
		}
	}

	@Override
	public void setLocation(String location) {
		_location = location;
	}

	@JSON
	@Override
	public String getPersonincharge() {
		if (_personincharge == null) {
			return StringPool.BLANK;
		}
		else {
			return _personincharge;
		}
	}

	@Override
	public void setPersonincharge(String personincharge) {
		_personincharge = personincharge;
	}

	@JSON
	@Override
	public Date getSchedulestartdate() {
		return _schedulestartdate;
	}

	@Override
	public void setSchedulestartdate(Date schedulestartdate) {
		_schedulestartdate = schedulestartdate;
	}

	@JSON
	@Override
	public Date getScheduleenddate() {
		return _scheduleenddate;
	}

	@Override
	public void setScheduleenddate(Date scheduleenddate) {
		_scheduleenddate = scheduleenddate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			corporateeventsdata.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public corporateeventsdata toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (corporateeventsdata)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		corporateeventsdataImpl corporateeventsdataImpl = new corporateeventsdataImpl();

		corporateeventsdataImpl.setId(getId());
		corporateeventsdataImpl.setTitle(getTitle());
		corporateeventsdataImpl.setDescription(getDescription());
		corporateeventsdataImpl.setZone(getZone());
		corporateeventsdataImpl.setRegion(getRegion());
		corporateeventsdataImpl.setLocation(getLocation());
		corporateeventsdataImpl.setPersonincharge(getPersonincharge());
		corporateeventsdataImpl.setSchedulestartdate(getSchedulestartdate());
		corporateeventsdataImpl.setScheduleenddate(getScheduleenddate());

		corporateeventsdataImpl.resetOriginalValues();

		return corporateeventsdataImpl;
	}

	@Override
	public int compareTo(corporateeventsdata corporateeventsdata) {
		long primaryKey = corporateeventsdata.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof corporateeventsdata)) {
			return false;
		}

		corporateeventsdata corporateeventsdata = (corporateeventsdata)obj;

		long primaryKey = corporateeventsdata.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<corporateeventsdata> toCacheModel() {
		corporateeventsdataCacheModel corporateeventsdataCacheModel = new corporateeventsdataCacheModel();

		corporateeventsdataCacheModel.id = getId();

		corporateeventsdataCacheModel.title = getTitle();

		String title = corporateeventsdataCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			corporateeventsdataCacheModel.title = null;
		}

		corporateeventsdataCacheModel.description = getDescription();

		String description = corporateeventsdataCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			corporateeventsdataCacheModel.description = null;
		}

		corporateeventsdataCacheModel.zone = getZone();

		String zone = corporateeventsdataCacheModel.zone;

		if ((zone != null) && (zone.length() == 0)) {
			corporateeventsdataCacheModel.zone = null;
		}

		corporateeventsdataCacheModel.region = getRegion();

		String region = corporateeventsdataCacheModel.region;

		if ((region != null) && (region.length() == 0)) {
			corporateeventsdataCacheModel.region = null;
		}

		corporateeventsdataCacheModel.location = getLocation();

		String location = corporateeventsdataCacheModel.location;

		if ((location != null) && (location.length() == 0)) {
			corporateeventsdataCacheModel.location = null;
		}

		corporateeventsdataCacheModel.personincharge = getPersonincharge();

		String personincharge = corporateeventsdataCacheModel.personincharge;

		if ((personincharge != null) && (personincharge.length() == 0)) {
			corporateeventsdataCacheModel.personincharge = null;
		}

		Date schedulestartdate = getSchedulestartdate();

		if (schedulestartdate != null) {
			corporateeventsdataCacheModel.schedulestartdate = schedulestartdate.getTime();
		}
		else {
			corporateeventsdataCacheModel.schedulestartdate = Long.MIN_VALUE;
		}

		Date scheduleenddate = getScheduleenddate();

		if (scheduleenddate != null) {
			corporateeventsdataCacheModel.scheduleenddate = scheduleenddate.getTime();
		}
		else {
			corporateeventsdataCacheModel.scheduleenddate = Long.MIN_VALUE;
		}

		return corporateeventsdataCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", zone=");
		sb.append(getZone());
		sb.append(", region=");
		sb.append(getRegion());
		sb.append(", location=");
		sb.append(getLocation());
		sb.append(", personincharge=");
		sb.append(getPersonincharge());
		sb.append(", schedulestartdate=");
		sb.append(getSchedulestartdate());
		sb.append(", scheduleenddate=");
		sb.append(getScheduleenddate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.chola.calendar.model.corporateeventsdata");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>zone</column-name><column-value><![CDATA[");
		sb.append(getZone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>region</column-name><column-value><![CDATA[");
		sb.append(getRegion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>location</column-name><column-value><![CDATA[");
		sb.append(getLocation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>personincharge</column-name><column-value><![CDATA[");
		sb.append(getPersonincharge());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>schedulestartdate</column-name><column-value><![CDATA[");
		sb.append(getSchedulestartdate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>scheduleenddate</column-name><column-value><![CDATA[");
		sb.append(getScheduleenddate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = corporateeventsdata.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			corporateeventsdata.class
		};
	private long _id;
	private String _title;
	private String _description;
	private String _zone;
	private String _region;
	private String _location;
	private String _personincharge;
	private Date _schedulestartdate;
	private Date _scheduleenddate;
	private corporateeventsdata _escapedModel;
}