/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.chola.calendar.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.chola.calendar.model.data;
import com.chola.calendar.model.dataModel;
import com.chola.calendar.model.dataSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the data service. Represents a row in the &quot;events_data&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link dataModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link dataImpl}.
 * </p>
 *
 * @author adms.java1
 * @see dataImpl
 * @see data
 * @see dataModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class dataModelImpl extends BaseModelImpl<data> implements dataModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a data model instance should use the {@link data} interface instead.
	 */
	public static final String TABLE_NAME = "events_data";
	public static final Object[][] TABLE_COLUMNS = {
			{ "eventid", Types.BIGINT },
			{ "eventdetails", Types.VARCHAR },
			{ "eventfrom", Types.VARCHAR },
			{ "eventto", Types.VARCHAR },
			{ "location", Types.VARCHAR },
			{ "dept", Types.VARCHAR },
			{ "subdept", Types.VARCHAR },
			{ "grade", Types.VARCHAR },
			{ "age", Types.VARCHAR },
			{ "companyname", Types.VARCHAR },
			{ "userid", Types.VARCHAR },
			{ "gender", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("eventid", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("eventdetails", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("eventfrom", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("eventto", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("location", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dept", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("subdept", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("grade", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("age", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyname", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userid", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("gender", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table events_data (eventid LONG not null primary key,eventdetails VARCHAR(75) null,eventfrom VARCHAR(75) null,eventto VARCHAR(75) null,location VARCHAR(75) null,dept VARCHAR(75) null,subdept VARCHAR(75) null,grade VARCHAR(75) null,age VARCHAR(75) null,companyname VARCHAR(75) null,userid VARCHAR(75) null,gender VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table events_data";
	public static final String ORDER_BY_JPQL = " ORDER BY data.eventid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY events_data.eventid ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.chola.calendar.model.data"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.chola.calendar.model.data"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static data toModel(dataSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		data model = new dataImpl();

		model.setEventid(soapModel.getEventid());
		model.setEventdetails(soapModel.getEventdetails());
		model.setEventfrom(soapModel.getEventfrom());
		model.setEventto(soapModel.getEventto());
		model.setLocation(soapModel.getLocation());
		model.setDept(soapModel.getDept());
		model.setSubdept(soapModel.getSubdept());
		model.setGrade(soapModel.getGrade());
		model.setAge(soapModel.getAge());
		model.setCompanyname(soapModel.getCompanyname());
		model.setUserid(soapModel.getUserid());
		model.setGender(soapModel.getGender());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<data> toModels(dataSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<data> models = new ArrayList<data>(soapModels.length);

		for (dataSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.chola.calendar.model.data"));

	public dataModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _eventid;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEventid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _eventid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return data.class;
	}

	@Override
	public String getModelClassName() {
		return data.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("eventid", getEventid());
		attributes.put("eventdetails", getEventdetails());
		attributes.put("eventfrom", getEventfrom());
		attributes.put("eventto", getEventto());
		attributes.put("location", getLocation());
		attributes.put("dept", getDept());
		attributes.put("subdept", getSubdept());
		attributes.put("grade", getGrade());
		attributes.put("age", getAge());
		attributes.put("companyname", getCompanyname());
		attributes.put("userid", getUserid());
		attributes.put("gender", getGender());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long eventid = (Long)attributes.get("eventid");

		if (eventid != null) {
			setEventid(eventid);
		}

		String eventdetails = (String)attributes.get("eventdetails");

		if (eventdetails != null) {
			setEventdetails(eventdetails);
		}

		String eventfrom = (String)attributes.get("eventfrom");

		if (eventfrom != null) {
			setEventfrom(eventfrom);
		}

		String eventto = (String)attributes.get("eventto");

		if (eventto != null) {
			setEventto(eventto);
		}

		String location = (String)attributes.get("location");

		if (location != null) {
			setLocation(location);
		}

		String dept = (String)attributes.get("dept");

		if (dept != null) {
			setDept(dept);
		}

		String subdept = (String)attributes.get("subdept");

		if (subdept != null) {
			setSubdept(subdept);
		}

		String grade = (String)attributes.get("grade");

		if (grade != null) {
			setGrade(grade);
		}

		String age = (String)attributes.get("age");

		if (age != null) {
			setAge(age);
		}

		String companyname = (String)attributes.get("companyname");

		if (companyname != null) {
			setCompanyname(companyname);
		}

		String userid = (String)attributes.get("userid");

		if (userid != null) {
			setUserid(userid);
		}

		String gender = (String)attributes.get("gender");

		if (gender != null) {
			setGender(gender);
		}
	}

	@JSON
	@Override
	public long getEventid() {
		return _eventid;
	}

	@Override
	public void setEventid(long eventid) {
		_eventid = eventid;
	}

	@JSON
	@Override
	public String getEventdetails() {
		if (_eventdetails == null) {
			return StringPool.BLANK;
		}
		else {
			return _eventdetails;
		}
	}

	@Override
	public void setEventdetails(String eventdetails) {
		_eventdetails = eventdetails;
	}

	@JSON
	@Override
	public String getEventfrom() {
		if (_eventfrom == null) {
			return StringPool.BLANK;
		}
		else {
			return _eventfrom;
		}
	}

	@Override
	public void setEventfrom(String eventfrom) {
		_eventfrom = eventfrom;
	}

	@JSON
	@Override
	public String getEventto() {
		if (_eventto == null) {
			return StringPool.BLANK;
		}
		else {
			return _eventto;
		}
	}

	@Override
	public void setEventto(String eventto) {
		_eventto = eventto;
	}

	@JSON
	@Override
	public String getLocation() {
		if (_location == null) {
			return StringPool.BLANK;
		}
		else {
			return _location;
		}
	}

	@Override
	public void setLocation(String location) {
		_location = location;
	}

	@JSON
	@Override
	public String getDept() {
		if (_dept == null) {
			return StringPool.BLANK;
		}
		else {
			return _dept;
		}
	}

	@Override
	public void setDept(String dept) {
		_dept = dept;
	}

	@JSON
	@Override
	public String getSubdept() {
		if (_subdept == null) {
			return StringPool.BLANK;
		}
		else {
			return _subdept;
		}
	}

	@Override
	public void setSubdept(String subdept) {
		_subdept = subdept;
	}

	@JSON
	@Override
	public String getGrade() {
		if (_grade == null) {
			return StringPool.BLANK;
		}
		else {
			return _grade;
		}
	}

	@Override
	public void setGrade(String grade) {
		_grade = grade;
	}

	@JSON
	@Override
	public String getAge() {
		if (_age == null) {
			return StringPool.BLANK;
		}
		else {
			return _age;
		}
	}

	@Override
	public void setAge(String age) {
		_age = age;
	}

	@JSON
	@Override
	public String getCompanyname() {
		if (_companyname == null) {
			return StringPool.BLANK;
		}
		else {
			return _companyname;
		}
	}

	@Override
	public void setCompanyname(String companyname) {
		_companyname = companyname;
	}

	@JSON
	@Override
	public String getUserid() {
		if (_userid == null) {
			return StringPool.BLANK;
		}
		else {
			return _userid;
		}
	}

	@Override
	public void setUserid(String userid) {
		_userid = userid;
	}

	@JSON
	@Override
	public String getGender() {
		if (_gender == null) {
			return StringPool.BLANK;
		}
		else {
			return _gender;
		}
	}

	@Override
	public void setGender(String gender) {
		_gender = gender;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			data.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public data toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (data)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		dataImpl dataImpl = new dataImpl();

		dataImpl.setEventid(getEventid());
		dataImpl.setEventdetails(getEventdetails());
		dataImpl.setEventfrom(getEventfrom());
		dataImpl.setEventto(getEventto());
		dataImpl.setLocation(getLocation());
		dataImpl.setDept(getDept());
		dataImpl.setSubdept(getSubdept());
		dataImpl.setGrade(getGrade());
		dataImpl.setAge(getAge());
		dataImpl.setCompanyname(getCompanyname());
		dataImpl.setUserid(getUserid());
		dataImpl.setGender(getGender());

		dataImpl.resetOriginalValues();

		return dataImpl;
	}

	@Override
	public int compareTo(data data) {
		long primaryKey = data.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof data)) {
			return false;
		}

		data data = (data)obj;

		long primaryKey = data.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<data> toCacheModel() {
		dataCacheModel dataCacheModel = new dataCacheModel();

		dataCacheModel.eventid = getEventid();

		dataCacheModel.eventdetails = getEventdetails();

		String eventdetails = dataCacheModel.eventdetails;

		if ((eventdetails != null) && (eventdetails.length() == 0)) {
			dataCacheModel.eventdetails = null;
		}

		dataCacheModel.eventfrom = getEventfrom();

		String eventfrom = dataCacheModel.eventfrom;

		if ((eventfrom != null) && (eventfrom.length() == 0)) {
			dataCacheModel.eventfrom = null;
		}

		dataCacheModel.eventto = getEventto();

		String eventto = dataCacheModel.eventto;

		if ((eventto != null) && (eventto.length() == 0)) {
			dataCacheModel.eventto = null;
		}

		dataCacheModel.location = getLocation();

		String location = dataCacheModel.location;

		if ((location != null) && (location.length() == 0)) {
			dataCacheModel.location = null;
		}

		dataCacheModel.dept = getDept();

		String dept = dataCacheModel.dept;

		if ((dept != null) && (dept.length() == 0)) {
			dataCacheModel.dept = null;
		}

		dataCacheModel.subdept = getSubdept();

		String subdept = dataCacheModel.subdept;

		if ((subdept != null) && (subdept.length() == 0)) {
			dataCacheModel.subdept = null;
		}

		dataCacheModel.grade = getGrade();

		String grade = dataCacheModel.grade;

		if ((grade != null) && (grade.length() == 0)) {
			dataCacheModel.grade = null;
		}

		dataCacheModel.age = getAge();

		String age = dataCacheModel.age;

		if ((age != null) && (age.length() == 0)) {
			dataCacheModel.age = null;
		}

		dataCacheModel.companyname = getCompanyname();

		String companyname = dataCacheModel.companyname;

		if ((companyname != null) && (companyname.length() == 0)) {
			dataCacheModel.companyname = null;
		}

		dataCacheModel.userid = getUserid();

		String userid = dataCacheModel.userid;

		if ((userid != null) && (userid.length() == 0)) {
			dataCacheModel.userid = null;
		}

		dataCacheModel.gender = getGender();

		String gender = dataCacheModel.gender;

		if ((gender != null) && (gender.length() == 0)) {
			dataCacheModel.gender = null;
		}

		return dataCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{eventid=");
		sb.append(getEventid());
		sb.append(", eventdetails=");
		sb.append(getEventdetails());
		sb.append(", eventfrom=");
		sb.append(getEventfrom());
		sb.append(", eventto=");
		sb.append(getEventto());
		sb.append(", location=");
		sb.append(getLocation());
		sb.append(", dept=");
		sb.append(getDept());
		sb.append(", subdept=");
		sb.append(getSubdept());
		sb.append(", grade=");
		sb.append(getGrade());
		sb.append(", age=");
		sb.append(getAge());
		sb.append(", companyname=");
		sb.append(getCompanyname());
		sb.append(", userid=");
		sb.append(getUserid());
		sb.append(", gender=");
		sb.append(getGender());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.chola.calendar.model.data");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>eventid</column-name><column-value><![CDATA[");
		sb.append(getEventid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventdetails</column-name><column-value><![CDATA[");
		sb.append(getEventdetails());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventfrom</column-name><column-value><![CDATA[");
		sb.append(getEventfrom());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventto</column-name><column-value><![CDATA[");
		sb.append(getEventto());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>location</column-name><column-value><![CDATA[");
		sb.append(getLocation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dept</column-name><column-value><![CDATA[");
		sb.append(getDept());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subdept</column-name><column-value><![CDATA[");
		sb.append(getSubdept());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>grade</column-name><column-value><![CDATA[");
		sb.append(getGrade());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>age</column-name><column-value><![CDATA[");
		sb.append(getAge());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyname</column-name><column-value><![CDATA[");
		sb.append(getCompanyname());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userid</column-name><column-value><![CDATA[");
		sb.append(getUserid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gender</column-name><column-value><![CDATA[");
		sb.append(getGender());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = data.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			data.class
		};
	private long _eventid;
	private String _eventdetails;
	private String _eventfrom;
	private String _eventto;
	private String _location;
	private String _dept;
	private String _subdept;
	private String _grade;
	private String _age;
	private String _companyname;
	private String _userid;
	private String _gender;
	private data _escapedModel;
}