/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.chola.trainingcalendar.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.chola.trainingcalendar.model.trainingcalendardata;
import com.chola.trainingcalendar.model.trainingcalendardataModel;
import com.chola.trainingcalendar.model.trainingcalendardataSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the trainingcalendardata service. Represents a row in the &quot;chola_trainingcalendardata&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link trainingcalendardataModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link trainingcalendardataImpl}.
 * </p>
 *
 * @author CloverLiferay01
 * @see trainingcalendardataImpl
 * @see trainingcalendardata
 * @see trainingcalendardataModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class trainingcalendardataModelImpl extends BaseModelImpl<trainingcalendardata>
	implements trainingcalendardataModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a trainingcalendardata model instance should use the {@link trainingcalendardata} interface instead.
	 */
	public static final String TABLE_NAME = "chola_trainingcalendardata";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "title", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "schedulestartdate", Types.TIMESTAMP },
			{ "scheduleenddate", Types.TIMESTAMP },
			{ "location", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("schedulestartdate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("scheduleenddate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("location", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table chola_trainingcalendardata (id_ LONG not null primary key,title VARCHAR(75) null,description VARCHAR(75) null,schedulestartdate DATE null,scheduleenddate DATE null,location VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table chola_trainingcalendardata";
	public static final String ORDER_BY_JPQL = " ORDER BY trainingcalendardata.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY chola_trainingcalendardata.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.chola.trainingcalendar.model.trainingcalendardata"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.chola.trainingcalendar.model.trainingcalendardata"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static trainingcalendardata toModel(
		trainingcalendardataSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		trainingcalendardata model = new trainingcalendardataImpl();

		model.setId(soapModel.getId());
		model.setTitle(soapModel.getTitle());
		model.setDescription(soapModel.getDescription());
		model.setSchedulestartdate(soapModel.getSchedulestartdate());
		model.setScheduleenddate(soapModel.getScheduleenddate());
		model.setLocation(soapModel.getLocation());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<trainingcalendardata> toModels(
		trainingcalendardataSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<trainingcalendardata> models = new ArrayList<trainingcalendardata>(soapModels.length);

		for (trainingcalendardataSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.chola.trainingcalendar.model.trainingcalendardata"));

	public trainingcalendardataModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return trainingcalendardata.class;
	}

	@Override
	public String getModelClassName() {
		return trainingcalendardata.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("title", getTitle());
		attributes.put("description", getDescription());
		attributes.put("schedulestartdate", getSchedulestartdate());
		attributes.put("scheduleenddate", getScheduleenddate());
		attributes.put("location", getLocation());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Date schedulestartdate = (Date)attributes.get("schedulestartdate");

		if (schedulestartdate != null) {
			setSchedulestartdate(schedulestartdate);
		}

		Date scheduleenddate = (Date)attributes.get("scheduleenddate");

		if (scheduleenddate != null) {
			setScheduleenddate(scheduleenddate);
		}

		String location = (String)attributes.get("location");

		if (location != null) {
			setLocation(location);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public Date getSchedulestartdate() {
		return _schedulestartdate;
	}

	@Override
	public void setSchedulestartdate(Date schedulestartdate) {
		_schedulestartdate = schedulestartdate;
	}

	@JSON
	@Override
	public Date getScheduleenddate() {
		return _scheduleenddate;
	}

	@Override
	public void setScheduleenddate(Date scheduleenddate) {
		_scheduleenddate = scheduleenddate;
	}

	@JSON
	@Override
	public String getLocation() {
		if (_location == null) {
			return StringPool.BLANK;
		}
		else {
			return _location;
		}
	}

	@Override
	public void setLocation(String location) {
		_location = location;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			trainingcalendardata.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public trainingcalendardata toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (trainingcalendardata)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		trainingcalendardataImpl trainingcalendardataImpl = new trainingcalendardataImpl();

		trainingcalendardataImpl.setId(getId());
		trainingcalendardataImpl.setTitle(getTitle());
		trainingcalendardataImpl.setDescription(getDescription());
		trainingcalendardataImpl.setSchedulestartdate(getSchedulestartdate());
		trainingcalendardataImpl.setScheduleenddate(getScheduleenddate());
		trainingcalendardataImpl.setLocation(getLocation());

		trainingcalendardataImpl.resetOriginalValues();

		return trainingcalendardataImpl;
	}

	@Override
	public int compareTo(trainingcalendardata trainingcalendardata) {
		long primaryKey = trainingcalendardata.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof trainingcalendardata)) {
			return false;
		}

		trainingcalendardata trainingcalendardata = (trainingcalendardata)obj;

		long primaryKey = trainingcalendardata.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<trainingcalendardata> toCacheModel() {
		trainingcalendardataCacheModel trainingcalendardataCacheModel = new trainingcalendardataCacheModel();

		trainingcalendardataCacheModel.id = getId();

		trainingcalendardataCacheModel.title = getTitle();

		String title = trainingcalendardataCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			trainingcalendardataCacheModel.title = null;
		}

		trainingcalendardataCacheModel.description = getDescription();

		String description = trainingcalendardataCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			trainingcalendardataCacheModel.description = null;
		}

		Date schedulestartdate = getSchedulestartdate();

		if (schedulestartdate != null) {
			trainingcalendardataCacheModel.schedulestartdate = schedulestartdate.getTime();
		}
		else {
			trainingcalendardataCacheModel.schedulestartdate = Long.MIN_VALUE;
		}

		Date scheduleenddate = getScheduleenddate();

		if (scheduleenddate != null) {
			trainingcalendardataCacheModel.scheduleenddate = scheduleenddate.getTime();
		}
		else {
			trainingcalendardataCacheModel.scheduleenddate = Long.MIN_VALUE;
		}

		trainingcalendardataCacheModel.location = getLocation();

		String location = trainingcalendardataCacheModel.location;

		if ((location != null) && (location.length() == 0)) {
			trainingcalendardataCacheModel.location = null;
		}

		return trainingcalendardataCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", schedulestartdate=");
		sb.append(getSchedulestartdate());
		sb.append(", scheduleenddate=");
		sb.append(getScheduleenddate());
		sb.append(", location=");
		sb.append(getLocation());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.chola.trainingcalendar.model.trainingcalendardata");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>schedulestartdate</column-name><column-value><![CDATA[");
		sb.append(getSchedulestartdate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>scheduleenddate</column-name><column-value><![CDATA[");
		sb.append(getScheduleenddate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>location</column-name><column-value><![CDATA[");
		sb.append(getLocation());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = trainingcalendardata.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			trainingcalendardata.class
		};
	private long _id;
	private String _title;
	private String _description;
	private Date _schedulestartdate;
	private Date _scheduleenddate;
	private String _location;
	private trainingcalendardata _escapedModel;
}