/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.chola.trainingcalendar.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.chola.trainingcalendar.model.trainingcontentuniqueinformation;
import com.chola.trainingcalendar.model.trainingcontentuniqueinformationModel;
import com.chola.trainingcalendar.model.trainingcontentuniqueinformationSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the trainingcontentuniqueinformation service. Represents a row in the &quot;chola_trainingcontentuniqueinformation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link trainingcontentuniqueinformationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link trainingcontentuniqueinformationImpl}.
 * </p>
 *
 * @author CloverLiferay01
 * @see trainingcontentuniqueinformationImpl
 * @see trainingcontentuniqueinformation
 * @see trainingcontentuniqueinformationModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class trainingcontentuniqueinformationModelImpl extends BaseModelImpl<trainingcontentuniqueinformation>
	implements trainingcontentuniqueinformationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a trainingcontentuniqueinformation model instance should use the {@link trainingcontentuniqueinformation} interface instead.
	 */
	public static final String TABLE_NAME = "chola_trainingcontentuniqueinformation";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "training_id", Types.BIGINT },
			{ "content_id", Types.BIGINT },
			{ "status", Types.BIGINT },
			{ "udflag", Types.BIGINT },
			{ "content_type", Types.VARCHAR },
			{ "notification_text", Types.VARCHAR },
			{ "pageurl", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("training_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("content_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("udflag", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("content_type", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("notification_text", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pageurl", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table chola_trainingcontentuniqueinformation (id_ LONG not null primary key,training_id LONG,content_id LONG,status LONG,udflag LONG,content_type VARCHAR(75) null,notification_text VARCHAR(75) null,pageurl VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table chola_trainingcontentuniqueinformation";
	public static final String ORDER_BY_JPQL = " ORDER BY trainingcontentuniqueinformation.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY chola_trainingcontentuniqueinformation.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.chola.trainingcalendar.model.trainingcontentuniqueinformation"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.chola.trainingcalendar.model.trainingcontentuniqueinformation"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.chola.trainingcalendar.model.trainingcontentuniqueinformation"),
			true);
	public static final long CONTENT_ID_COLUMN_BITMASK = 1L;
	public static final long TRAINING_ID_COLUMN_BITMASK = 2L;
	public static final long ID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static trainingcontentuniqueinformation toModel(
		trainingcontentuniqueinformationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		trainingcontentuniqueinformation model = new trainingcontentuniqueinformationImpl();

		model.setId(soapModel.getId());
		model.setTraining_id(soapModel.getTraining_id());
		model.setContent_id(soapModel.getContent_id());
		model.setStatus(soapModel.getStatus());
		model.setUdflag(soapModel.getUdflag());
		model.setContent_type(soapModel.getContent_type());
		model.setNotification_text(soapModel.getNotification_text());
		model.setPageurl(soapModel.getPageurl());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<trainingcontentuniqueinformation> toModels(
		trainingcontentuniqueinformationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<trainingcontentuniqueinformation> models = new ArrayList<trainingcontentuniqueinformation>(soapModels.length);

		for (trainingcontentuniqueinformationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.chola.trainingcalendar.model.trainingcontentuniqueinformation"));

	public trainingcontentuniqueinformationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return trainingcontentuniqueinformation.class;
	}

	@Override
	public String getModelClassName() {
		return trainingcontentuniqueinformation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("training_id", getTraining_id());
		attributes.put("content_id", getContent_id());
		attributes.put("status", getStatus());
		attributes.put("udflag", getUdflag());
		attributes.put("content_type", getContent_type());
		attributes.put("notification_text", getNotification_text());
		attributes.put("pageurl", getPageurl());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long training_id = (Long)attributes.get("training_id");

		if (training_id != null) {
			setTraining_id(training_id);
		}

		Long content_id = (Long)attributes.get("content_id");

		if (content_id != null) {
			setContent_id(content_id);
		}

		Long status = (Long)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long udflag = (Long)attributes.get("udflag");

		if (udflag != null) {
			setUdflag(udflag);
		}

		String content_type = (String)attributes.get("content_type");

		if (content_type != null) {
			setContent_type(content_type);
		}

		String notification_text = (String)attributes.get("notification_text");

		if (notification_text != null) {
			setNotification_text(notification_text);
		}

		String pageurl = (String)attributes.get("pageurl");

		if (pageurl != null) {
			setPageurl(pageurl);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public long getTraining_id() {
		return _training_id;
	}

	@Override
	public void setTraining_id(long training_id) {
		_columnBitmask |= TRAINING_ID_COLUMN_BITMASK;

		if (!_setOriginalTraining_id) {
			_setOriginalTraining_id = true;

			_originalTraining_id = _training_id;
		}

		_training_id = training_id;
	}

	public long getOriginalTraining_id() {
		return _originalTraining_id;
	}

	@JSON
	@Override
	public long getContent_id() {
		return _content_id;
	}

	@Override
	public void setContent_id(long content_id) {
		_columnBitmask |= CONTENT_ID_COLUMN_BITMASK;

		if (!_setOriginalContent_id) {
			_setOriginalContent_id = true;

			_originalContent_id = _content_id;
		}

		_content_id = content_id;
	}

	public long getOriginalContent_id() {
		return _originalContent_id;
	}

	@JSON
	@Override
	public long getStatus() {
		return _status;
	}

	@Override
	public void setStatus(long status) {
		_status = status;
	}

	@JSON
	@Override
	public long getUdflag() {
		return _udflag;
	}

	@Override
	public void setUdflag(long udflag) {
		_udflag = udflag;
	}

	@JSON
	@Override
	public String getContent_type() {
		if (_content_type == null) {
			return StringPool.BLANK;
		}
		else {
			return _content_type;
		}
	}

	@Override
	public void setContent_type(String content_type) {
		_content_type = content_type;
	}

	@JSON
	@Override
	public String getNotification_text() {
		if (_notification_text == null) {
			return StringPool.BLANK;
		}
		else {
			return _notification_text;
		}
	}

	@Override
	public void setNotification_text(String notification_text) {
		_notification_text = notification_text;
	}

	@JSON
	@Override
	public String getPageurl() {
		if (_pageurl == null) {
			return StringPool.BLANK;
		}
		else {
			return _pageurl;
		}
	}

	@Override
	public void setPageurl(String pageurl) {
		_pageurl = pageurl;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			trainingcontentuniqueinformation.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public trainingcontentuniqueinformation toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (trainingcontentuniqueinformation)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		trainingcontentuniqueinformationImpl trainingcontentuniqueinformationImpl =
			new trainingcontentuniqueinformationImpl();

		trainingcontentuniqueinformationImpl.setId(getId());
		trainingcontentuniqueinformationImpl.setTraining_id(getTraining_id());
		trainingcontentuniqueinformationImpl.setContent_id(getContent_id());
		trainingcontentuniqueinformationImpl.setStatus(getStatus());
		trainingcontentuniqueinformationImpl.setUdflag(getUdflag());
		trainingcontentuniqueinformationImpl.setContent_type(getContent_type());
		trainingcontentuniqueinformationImpl.setNotification_text(getNotification_text());
		trainingcontentuniqueinformationImpl.setPageurl(getPageurl());

		trainingcontentuniqueinformationImpl.resetOriginalValues();

		return trainingcontentuniqueinformationImpl;
	}

	@Override
	public int compareTo(
		trainingcontentuniqueinformation trainingcontentuniqueinformation) {
		long primaryKey = trainingcontentuniqueinformation.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof trainingcontentuniqueinformation)) {
			return false;
		}

		trainingcontentuniqueinformation trainingcontentuniqueinformation = (trainingcontentuniqueinformation)obj;

		long primaryKey = trainingcontentuniqueinformation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		trainingcontentuniqueinformationModelImpl trainingcontentuniqueinformationModelImpl =
			this;

		trainingcontentuniqueinformationModelImpl._originalTraining_id = trainingcontentuniqueinformationModelImpl._training_id;

		trainingcontentuniqueinformationModelImpl._setOriginalTraining_id = false;

		trainingcontentuniqueinformationModelImpl._originalContent_id = trainingcontentuniqueinformationModelImpl._content_id;

		trainingcontentuniqueinformationModelImpl._setOriginalContent_id = false;

		trainingcontentuniqueinformationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<trainingcontentuniqueinformation> toCacheModel() {
		trainingcontentuniqueinformationCacheModel trainingcontentuniqueinformationCacheModel =
			new trainingcontentuniqueinformationCacheModel();

		trainingcontentuniqueinformationCacheModel.id = getId();

		trainingcontentuniqueinformationCacheModel.training_id = getTraining_id();

		trainingcontentuniqueinformationCacheModel.content_id = getContent_id();

		trainingcontentuniqueinformationCacheModel.status = getStatus();

		trainingcontentuniqueinformationCacheModel.udflag = getUdflag();

		trainingcontentuniqueinformationCacheModel.content_type = getContent_type();

		String content_type = trainingcontentuniqueinformationCacheModel.content_type;

		if ((content_type != null) && (content_type.length() == 0)) {
			trainingcontentuniqueinformationCacheModel.content_type = null;
		}

		trainingcontentuniqueinformationCacheModel.notification_text = getNotification_text();

		String notification_text = trainingcontentuniqueinformationCacheModel.notification_text;

		if ((notification_text != null) && (notification_text.length() == 0)) {
			trainingcontentuniqueinformationCacheModel.notification_text = null;
		}

		trainingcontentuniqueinformationCacheModel.pageurl = getPageurl();

		String pageurl = trainingcontentuniqueinformationCacheModel.pageurl;

		if ((pageurl != null) && (pageurl.length() == 0)) {
			trainingcontentuniqueinformationCacheModel.pageurl = null;
		}

		return trainingcontentuniqueinformationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", training_id=");
		sb.append(getTraining_id());
		sb.append(", content_id=");
		sb.append(getContent_id());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", udflag=");
		sb.append(getUdflag());
		sb.append(", content_type=");
		sb.append(getContent_type());
		sb.append(", notification_text=");
		sb.append(getNotification_text());
		sb.append(", pageurl=");
		sb.append(getPageurl());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append(
			"com.chola.trainingcalendar.model.trainingcontentuniqueinformation");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>training_id</column-name><column-value><![CDATA[");
		sb.append(getTraining_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>content_id</column-name><column-value><![CDATA[");
		sb.append(getContent_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>udflag</column-name><column-value><![CDATA[");
		sb.append(getUdflag());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>content_type</column-name><column-value><![CDATA[");
		sb.append(getContent_type());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>notification_text</column-name><column-value><![CDATA[");
		sb.append(getNotification_text());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pageurl</column-name><column-value><![CDATA[");
		sb.append(getPageurl());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = trainingcontentuniqueinformation.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			trainingcontentuniqueinformation.class
		};
	private long _id;
	private long _training_id;
	private long _originalTraining_id;
	private boolean _setOriginalTraining_id;
	private long _content_id;
	private long _originalContent_id;
	private boolean _setOriginalContent_id;
	private long _status;
	private long _udflag;
	private String _content_type;
	private String _notification_text;
	private String _pageurl;
	private long _columnBitmask;
	private trainingcontentuniqueinformation _escapedModel;
}