/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.chola.businessmis.service.base;

import aQute.bnd.annotation.ProviderType;

import com.chola.businessmis.model.businessmisusers;
import com.chola.businessmis.service.businessmisusersLocalService;
import com.chola.businessmis.service.persistence.businessmisdetailsFinder;
import com.chola.businessmis.service.persistence.businessmisdetailsPersistence;
import com.chola.businessmis.service.persistence.businessmisusersPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the businessmisusers local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.chola.businessmis.service.impl.businessmisusersLocalServiceImpl}.
 * </p>
 *
 * @author CloverLiferay01
 * @see com.chola.businessmis.service.impl.businessmisusersLocalServiceImpl
 * @see com.chola.businessmis.service.businessmisusersLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class businessmisusersLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements businessmisusersLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.chola.businessmis.service.businessmisusersLocalServiceUtil} to access the businessmisusers local service.
	 */

	/**
	 * Adds the businessmisusers to the database. Also notifies the appropriate model listeners.
	 *
	 * @param businessmisusers the businessmisusers
	 * @return the businessmisusers that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public businessmisusers addbusinessmisusers(
		businessmisusers businessmisusers) {
		businessmisusers.setNew(true);

		return businessmisusersPersistence.update(businessmisusers);
	}

	/**
	 * Creates a new businessmisusers with the primary key. Does not add the businessmisusers to the database.
	 *
	 * @param id the primary key for the new businessmisusers
	 * @return the new businessmisusers
	 */
	@Override
	public businessmisusers createbusinessmisusers(long id) {
		return businessmisusersPersistence.create(id);
	}

	/**
	 * Deletes the businessmisusers with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param id the primary key of the businessmisusers
	 * @return the businessmisusers that was removed
	 * @throws PortalException if a businessmisusers with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public businessmisusers deletebusinessmisusers(long id)
		throws PortalException {
		return businessmisusersPersistence.remove(id);
	}

	/**
	 * Deletes the businessmisusers from the database. Also notifies the appropriate model listeners.
	 *
	 * @param businessmisusers the businessmisusers
	 * @return the businessmisusers that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public businessmisusers deletebusinessmisusers(
		businessmisusers businessmisusers) {
		return businessmisusersPersistence.remove(businessmisusers);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(businessmisusers.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return businessmisusersPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.chola.businessmis.model.impl.businessmisusersModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return businessmisusersPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.chola.businessmis.model.impl.businessmisusersModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return businessmisusersPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return businessmisusersPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return businessmisusersPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public businessmisusers fetchbusinessmisusers(long id) {
		return businessmisusersPersistence.fetchByPrimaryKey(id);
	}

	/**
	 * Returns the businessmisusers with the primary key.
	 *
	 * @param id the primary key of the businessmisusers
	 * @return the businessmisusers
	 * @throws PortalException if a businessmisusers with the primary key could not be found
	 */
	@Override
	public businessmisusers getbusinessmisusers(long id)
		throws PortalException {
		return businessmisusersPersistence.findByPrimaryKey(id);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(businessmisusersLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(businessmisusers.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(businessmisusersLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(businessmisusers.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(businessmisusersLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(businessmisusers.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return businessmisusersLocalService.deletebusinessmisusers((businessmisusers)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return businessmisusersPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the businessmisuserses.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.chola.businessmis.model.impl.businessmisusersModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of businessmisuserses
	 * @param end the upper bound of the range of businessmisuserses (not inclusive)
	 * @return the range of businessmisuserses
	 */
	@Override
	public List<businessmisusers> getbusinessmisuserses(int start, int end) {
		return businessmisusersPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of businessmisuserses.
	 *
	 * @return the number of businessmisuserses
	 */
	@Override
	public int getbusinessmisusersesCount() {
		return businessmisusersPersistence.countAll();
	}

	/**
	 * Updates the businessmisusers in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param businessmisusers the businessmisusers
	 * @return the businessmisusers that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public businessmisusers updatebusinessmisusers(
		businessmisusers businessmisusers) {
		return businessmisusersPersistence.update(businessmisusers);
	}

	/**
	 * Returns the businessmisdetails local service.
	 *
	 * @return the businessmisdetails local service
	 */
	public com.chola.businessmis.service.businessmisdetailsLocalService getbusinessmisdetailsLocalService() {
		return businessmisdetailsLocalService;
	}

	/**
	 * Sets the businessmisdetails local service.
	 *
	 * @param businessmisdetailsLocalService the businessmisdetails local service
	 */
	public void setbusinessmisdetailsLocalService(
		com.chola.businessmis.service.businessmisdetailsLocalService businessmisdetailsLocalService) {
		this.businessmisdetailsLocalService = businessmisdetailsLocalService;
	}

	/**
	 * Returns the businessmisdetails persistence.
	 *
	 * @return the businessmisdetails persistence
	 */
	public businessmisdetailsPersistence getbusinessmisdetailsPersistence() {
		return businessmisdetailsPersistence;
	}

	/**
	 * Sets the businessmisdetails persistence.
	 *
	 * @param businessmisdetailsPersistence the businessmisdetails persistence
	 */
	public void setbusinessmisdetailsPersistence(
		businessmisdetailsPersistence businessmisdetailsPersistence) {
		this.businessmisdetailsPersistence = businessmisdetailsPersistence;
	}

	/**
	 * Returns the businessmisdetails finder.
	 *
	 * @return the businessmisdetails finder
	 */
	public businessmisdetailsFinder getbusinessmisdetailsFinder() {
		return businessmisdetailsFinder;
	}

	/**
	 * Sets the businessmisdetails finder.
	 *
	 * @param businessmisdetailsFinder the businessmisdetails finder
	 */
	public void setbusinessmisdetailsFinder(
		businessmisdetailsFinder businessmisdetailsFinder) {
		this.businessmisdetailsFinder = businessmisdetailsFinder;
	}

	/**
	 * Returns the businessmisusers local service.
	 *
	 * @return the businessmisusers local service
	 */
	public businessmisusersLocalService getbusinessmisusersLocalService() {
		return businessmisusersLocalService;
	}

	/**
	 * Sets the businessmisusers local service.
	 *
	 * @param businessmisusersLocalService the businessmisusers local service
	 */
	public void setbusinessmisusersLocalService(
		businessmisusersLocalService businessmisusersLocalService) {
		this.businessmisusersLocalService = businessmisusersLocalService;
	}

	/**
	 * Returns the businessmisusers persistence.
	 *
	 * @return the businessmisusers persistence
	 */
	public businessmisusersPersistence getbusinessmisusersPersistence() {
		return businessmisusersPersistence;
	}

	/**
	 * Sets the businessmisusers persistence.
	 *
	 * @param businessmisusersPersistence the businessmisusers persistence
	 */
	public void setbusinessmisusersPersistence(
		businessmisusersPersistence businessmisusersPersistence) {
		this.businessmisusersPersistence = businessmisusersPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.chola.businessmis.model.businessmisusers",
			businessmisusersLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.chola.businessmis.model.businessmisusers");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return businessmisusersLocalService.class.getName();
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return businessmisusers.class;
	}

	protected String getModelClassName() {
		return businessmisusers.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = businessmisusersPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.chola.businessmis.service.businessmisdetailsLocalService.class)
	protected com.chola.businessmis.service.businessmisdetailsLocalService businessmisdetailsLocalService;
	@BeanReference(type = businessmisdetailsPersistence.class)
	protected businessmisdetailsPersistence businessmisdetailsPersistence;
	@BeanReference(type = businessmisdetailsFinder.class)
	protected businessmisdetailsFinder businessmisdetailsFinder;
	@BeanReference(type = businessmisusersLocalService.class)
	protected businessmisusersLocalService businessmisusersLocalService;
	@BeanReference(type = businessmisusersPersistence.class)
	protected businessmisusersPersistence businessmisusersPersistence;
	@BeanReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@BeanReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@BeanReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private ClassLoader _classLoader;
	private businessmisusersLocalServiceClpInvoker _clpInvoker = new businessmisusersLocalServiceClpInvoker();
}