/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.chola.imagegallery.service.base;

import aQute.bnd.annotation.ProviderType;

import com.chola.imagegallery.model.imagegallery;
import com.chola.imagegallery.service.imagegalleryLocalService;
import com.chola.imagegallery.service.persistence.imagegalleryPersistence;
import com.chola.imagegallery.service.persistence.imagegallerypathPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the imagegallery local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.chola.imagegallery.service.impl.imagegalleryLocalServiceImpl}.
 * </p>
 *
 * @author CloverLiferay02
 * @see com.chola.imagegallery.service.impl.imagegalleryLocalServiceImpl
 * @see com.chola.imagegallery.service.imagegalleryLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class imagegalleryLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements imagegalleryLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.chola.imagegallery.service.imagegalleryLocalServiceUtil} to access the imagegallery local service.
	 */

	/**
	 * Adds the imagegallery to the database. Also notifies the appropriate model listeners.
	 *
	 * @param imagegallery the imagegallery
	 * @return the imagegallery that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public imagegallery addimagegallery(imagegallery imagegallery) {
		imagegallery.setNew(true);

		return imagegalleryPersistence.update(imagegallery);
	}

	/**
	 * Creates a new imagegallery with the primary key. Does not add the imagegallery to the database.
	 *
	 * @param id the primary key for the new imagegallery
	 * @return the new imagegallery
	 */
	@Override
	public imagegallery createimagegallery(long id) {
		return imagegalleryPersistence.create(id);
	}

	/**
	 * Deletes the imagegallery with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param id the primary key of the imagegallery
	 * @return the imagegallery that was removed
	 * @throws PortalException if a imagegallery with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public imagegallery deleteimagegallery(long id) throws PortalException {
		return imagegalleryPersistence.remove(id);
	}

	/**
	 * Deletes the imagegallery from the database. Also notifies the appropriate model listeners.
	 *
	 * @param imagegallery the imagegallery
	 * @return the imagegallery that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public imagegallery deleteimagegallery(imagegallery imagegallery) {
		return imagegalleryPersistence.remove(imagegallery);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(imagegallery.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return imagegalleryPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.chola.imagegallery.model.impl.imagegalleryModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return imagegalleryPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.chola.imagegallery.model.impl.imagegalleryModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return imagegalleryPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return imagegalleryPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return imagegalleryPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public imagegallery fetchimagegallery(long id) {
		return imagegalleryPersistence.fetchByPrimaryKey(id);
	}

	/**
	 * Returns the imagegallery with the primary key.
	 *
	 * @param id the primary key of the imagegallery
	 * @return the imagegallery
	 * @throws PortalException if a imagegallery with the primary key could not be found
	 */
	@Override
	public imagegallery getimagegallery(long id) throws PortalException {
		return imagegalleryPersistence.findByPrimaryKey(id);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(imagegalleryLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(imagegallery.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(imagegalleryLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(imagegallery.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(imagegalleryLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(imagegallery.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return imagegalleryLocalService.deleteimagegallery((imagegallery)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return imagegalleryPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the imagegalleries.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.chola.imagegallery.model.impl.imagegalleryModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of imagegalleries
	 * @param end the upper bound of the range of imagegalleries (not inclusive)
	 * @return the range of imagegalleries
	 */
	@Override
	public List<imagegallery> getimagegalleries(int start, int end) {
		return imagegalleryPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of imagegalleries.
	 *
	 * @return the number of imagegalleries
	 */
	@Override
	public int getimagegalleriesCount() {
		return imagegalleryPersistence.countAll();
	}

	/**
	 * Updates the imagegallery in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param imagegallery the imagegallery
	 * @return the imagegallery that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public imagegallery updateimagegallery(imagegallery imagegallery) {
		return imagegalleryPersistence.update(imagegallery);
	}

	/**
	 * Returns the imagegallery local service.
	 *
	 * @return the imagegallery local service
	 */
	public imagegalleryLocalService getimagegalleryLocalService() {
		return imagegalleryLocalService;
	}

	/**
	 * Sets the imagegallery local service.
	 *
	 * @param imagegalleryLocalService the imagegallery local service
	 */
	public void setimagegalleryLocalService(
		imagegalleryLocalService imagegalleryLocalService) {
		this.imagegalleryLocalService = imagegalleryLocalService;
	}

	/**
	 * Returns the imagegallery persistence.
	 *
	 * @return the imagegallery persistence
	 */
	public imagegalleryPersistence getimagegalleryPersistence() {
		return imagegalleryPersistence;
	}

	/**
	 * Sets the imagegallery persistence.
	 *
	 * @param imagegalleryPersistence the imagegallery persistence
	 */
	public void setimagegalleryPersistence(
		imagegalleryPersistence imagegalleryPersistence) {
		this.imagegalleryPersistence = imagegalleryPersistence;
	}

	/**
	 * Returns the imagegallerypath local service.
	 *
	 * @return the imagegallerypath local service
	 */
	public com.chola.imagegallery.service.imagegallerypathLocalService getimagegallerypathLocalService() {
		return imagegallerypathLocalService;
	}

	/**
	 * Sets the imagegallerypath local service.
	 *
	 * @param imagegallerypathLocalService the imagegallerypath local service
	 */
	public void setimagegallerypathLocalService(
		com.chola.imagegallery.service.imagegallerypathLocalService imagegallerypathLocalService) {
		this.imagegallerypathLocalService = imagegallerypathLocalService;
	}

	/**
	 * Returns the imagegallerypath persistence.
	 *
	 * @return the imagegallerypath persistence
	 */
	public imagegallerypathPersistence getimagegallerypathPersistence() {
		return imagegallerypathPersistence;
	}

	/**
	 * Sets the imagegallerypath persistence.
	 *
	 * @param imagegallerypathPersistence the imagegallerypath persistence
	 */
	public void setimagegallerypathPersistence(
		imagegallerypathPersistence imagegallerypathPersistence) {
		this.imagegallerypathPersistence = imagegallerypathPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.chola.imagegallery.model.imagegallery",
			imagegalleryLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.chola.imagegallery.model.imagegallery");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return imagegalleryLocalService.class.getName();
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return imagegallery.class;
	}

	protected String getModelClassName() {
		return imagegallery.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = imagegalleryPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = imagegalleryLocalService.class)
	protected imagegalleryLocalService imagegalleryLocalService;
	@BeanReference(type = imagegalleryPersistence.class)
	protected imagegalleryPersistence imagegalleryPersistence;
	@BeanReference(type = com.chola.imagegallery.service.imagegallerypathLocalService.class)
	protected com.chola.imagegallery.service.imagegallerypathLocalService imagegallerypathLocalService;
	@BeanReference(type = imagegallerypathPersistence.class)
	protected imagegallerypathPersistence imagegallerypathPersistence;
	@BeanReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@BeanReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@BeanReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private ClassLoader _classLoader;
	private imagegalleryLocalServiceClpInvoker _clpInvoker = new imagegalleryLocalServiceClpInvoker();
}