package com.chola.promotion;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import javax.portlet.ActionRequest;
import javax.portlet.ActionResponse;
import javax.portlet.PortletConfig;
import javax.portlet.PortletRequest;
import javax.portlet.PortletURL;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFDateUtil;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;

import com.chola.promotion.model.users;
import com.chola.promotion.service.usersLocalServiceUtil;
import com.liferay.counter.kernel.service.CounterLocalServiceUtil;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.portlet.PortletURLFactoryUtil;
import com.liferay.portal.kernel.portlet.bridges.mvc.MVCPortlet;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.theme.ThemeDisplay;
import com.liferay.portal.kernel.upload.UploadPortletRequest;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.WebKeys;

public class Promotion extends MVCPortlet{
	private static Log _log = LogFactoryUtil.getLog(Promotion.class);
	public void uploadData(ActionRequest actionRequest,ActionResponse actionResponse) throws ParseException, InvalidFormatException, IOException
	{
		try
		{
		_log.info("Inside Upload Method");
		UploadPortletRequest uploadPortletRequest = PortalUtil.getUploadPortletRequest(actionRequest);
		File userFile = uploadPortletRequest.getFile("uploadedFile");
		InputStream inputStream = new FileInputStream (userFile);
		
		_log.info("Promotion File Name : "+userFile.getName());
		
		Workbook workbook = WorkbookFactory.create(inputStream);
		Sheet mySheet = workbook.getSheetAt(0);
		 ArrayList<List<Cell>> cellVectorHolder = new ArrayList<List<Cell>>();
		 SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
	     
		 
	        	  for (int i = 1; i <= mySheet.getPhysicalNumberOfRows()-1; i++) {
	        		  List list = new ArrayList();
	              for (int j = 0; j <= 4; j++) {    
	        	  Row row = mySheet.getRow(i);
	              Cell cell = row.getCell(j);
	              String val = handleCell(cell.getCellType(), cell);
	        	  list.add(val);
	        	  
	          }
	              _log.info(list);
	              cellVectorHolder.add(list);
	              
	        	  }
	        	  _log.info(cellVectorHolder);
	        	  for (Iterator iterator = cellVectorHolder.iterator(); iterator.hasNext();) {
	                  List list = (List) iterator.next();
	                  
	              _log.info("Inside vector  : "+list);
	        		
	              users details=usersLocalServiceUtil.createusers(CounterLocalServiceUtil.getCountersCount());
	        		details.setEmpId(list.get(1).toString());
	        		details.setEmpName(list.get(2).toString());
	        		details.setWriteUp(list.get(3).toString());
	        		details.setAwardedDate(sdf.parse(list.get(4).toString()));
	        		details = usersLocalServiceUtil.addusers(details);
	        		_log.info("SR NO created in DB : "+details.getId());
	        		
	            }
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	private static String handleCell(int type, Cell cell) {
	    String cell_value = null;
	    if (type == HSSFCell.CELL_TYPE_STRING) {
	        cell_value = (cell.getStringCellValue());
	    } else if (type == HSSFCell.CELL_TYPE_NUMERIC) {
	        cell_value = String.valueOf(cell.getNumericCellValue());
	        if (HSSFDateUtil.isCellDateFormatted(cell)) {
	            SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
	            cell_value = sdf.format(cell.getDateCellValue());
	        }
	    } else if (type == HSSFCell.CELL_TYPE_BOOLEAN) {
	        cell_value = String.valueOf(cell.getNumericCellValue());
	    } else if (type == HSSFCell.CELL_TYPE_FORMULA) {
	        switch (cell.getCachedFormulaResultType()) {
	            case Cell.CELL_TYPE_NUMERIC:
	                cell_value = String.valueOf(cell.getNumericCellValue());
	                break;
	            case Cell.CELL_TYPE_STRING:
	                cell_value = String.valueOf(cell.getRichStringCellValue());
	                break;
	        }

	    } else {
	        cell_value = String.valueOf("");
	    }
	    return cell_value;
	}
	
	public void postMessage(ActionRequest actionRequest,ActionResponse actionResponse) throws IOException, PortalException {
		try
		{
		ThemeDisplay themeDisplay = (ThemeDisplay)actionRequest.getAttribute(WebKeys.THEME_DISPLAY);
		      
		_log.info("Inside Save");
		
		String message = actionRequest.getParameter("message");
		String empId = actionRequest.getParameter("empId");
		
		User user = UserLocalServiceUtil.getUserByScreenName(themeDisplay.getCompanyId(), empId);
		
		_log.info("Message : "+message);
		
		_log.info("Posted By : "+themeDisplay.getUserId());
		
		_log.info("Posted On : "+empId);
		
		PortletConfig portletConfig = (PortletConfig) actionRequest.getAttribute("javax.portlet.config");

		String portletName = portletConfig.getPortletName();
		
		boolean flag = usersLocalServiceUtil.insertData(message,String.valueOf(themeDisplay.getUserId()),String.valueOf(user.getUserId()));

		if(flag)
		{
			_log.info("Success");
		}
		else
		{
			_log.error("Failed");
		}
		
		PortletURL successPageURL = PortletURLFactoryUtil.create(actionRequest,
				portletName + "_WAR_" + portletName + "portlet",
				themeDisplay.getPlid(), PortletRequest.RENDER_PHASE);

		successPageURL.setParameter("jspPage", "/view.jsp");
		actionResponse.sendRedirect(successPageURL.toString());
		}
		catch (Exception e) {
			_log.error(e.getMessage());
		}
	}
	
	public void addComment(ActionRequest actionRequest, ActionResponse actionResponse) {
		_log.info("Comment=======");

		try {
			invokeTaglibDiscussion(actionRequest, actionResponse);
			_log.info("Comment Successfull");
		} catch (Exception e) {
			_log.error(e.getMessage());
		}
	}
	
}
