/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.chola.promotion.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.chola.promotion.model.users;
import com.chola.promotion.model.usersModel;
import com.chola.promotion.model.usersSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the users service. Represents a row in the &quot;promotion_users&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link usersModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link usersImpl}.
 * </p>
 *
 * @author CloverLiferay02
 * @see usersImpl
 * @see users
 * @see usersModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class usersModelImpl extends BaseModelImpl<users> implements usersModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a users model instance should use the {@link users} interface instead.
	 */
	public static final String TABLE_NAME = "promotion_users";
	public static final Object[][] TABLE_COLUMNS = {
			{ "Id", Types.BIGINT },
			{ "empId", Types.VARCHAR },
			{ "empName", Types.VARCHAR },
			{ "empImagePath", Types.VARCHAR },
			{ "writeUp", Types.VARCHAR },
			{ "awardedDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("Id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("empId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("empName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("empImagePath", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("writeUp", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("awardedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table promotion_users (Id LONG not null primary key,empId VARCHAR(75) null,empName VARCHAR(75) null,empImagePath VARCHAR(75) null,writeUp TEXT null,awardedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table promotion_users";
	public static final String ORDER_BY_JPQL = " ORDER BY users.Id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY promotion_users.Id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.chola.promotion.model.users"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.chola.promotion.model.users"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static users toModel(usersSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		users model = new usersImpl();

		model.setId(soapModel.getId());
		model.setEmpId(soapModel.getEmpId());
		model.setEmpName(soapModel.getEmpName());
		model.setEmpImagePath(soapModel.getEmpImagePath());
		model.setWriteUp(soapModel.getWriteUp());
		model.setAwardedDate(soapModel.getAwardedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<users> toModels(usersSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<users> models = new ArrayList<users>(soapModels.length);

		for (usersSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.chola.promotion.model.users"));

	public usersModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _Id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _Id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return users.class;
	}

	@Override
	public String getModelClassName() {
		return users.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("Id", getId());
		attributes.put("empId", getEmpId());
		attributes.put("empName", getEmpName());
		attributes.put("empImagePath", getEmpImagePath());
		attributes.put("writeUp", getWriteUp());
		attributes.put("awardedDate", getAwardedDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long Id = (Long)attributes.get("Id");

		if (Id != null) {
			setId(Id);
		}

		String empId = (String)attributes.get("empId");

		if (empId != null) {
			setEmpId(empId);
		}

		String empName = (String)attributes.get("empName");

		if (empName != null) {
			setEmpName(empName);
		}

		String empImagePath = (String)attributes.get("empImagePath");

		if (empImagePath != null) {
			setEmpImagePath(empImagePath);
		}

		String writeUp = (String)attributes.get("writeUp");

		if (writeUp != null) {
			setWriteUp(writeUp);
		}

		Date awardedDate = (Date)attributes.get("awardedDate");

		if (awardedDate != null) {
			setAwardedDate(awardedDate);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _Id;
	}

	@Override
	public void setId(long Id) {
		_Id = Id;
	}

	@JSON
	@Override
	public String getEmpId() {
		if (_empId == null) {
			return StringPool.BLANK;
		}
		else {
			return _empId;
		}
	}

	@Override
	public void setEmpId(String empId) {
		_empId = empId;
	}

	@JSON
	@Override
	public String getEmpName() {
		if (_empName == null) {
			return StringPool.BLANK;
		}
		else {
			return _empName;
		}
	}

	@Override
	public void setEmpName(String empName) {
		_empName = empName;
	}

	@JSON
	@Override
	public String getEmpImagePath() {
		if (_empImagePath == null) {
			return StringPool.BLANK;
		}
		else {
			return _empImagePath;
		}
	}

	@Override
	public void setEmpImagePath(String empImagePath) {
		_empImagePath = empImagePath;
	}

	@JSON
	@Override
	public String getWriteUp() {
		if (_writeUp == null) {
			return StringPool.BLANK;
		}
		else {
			return _writeUp;
		}
	}

	@Override
	public void setWriteUp(String writeUp) {
		_writeUp = writeUp;
	}

	@JSON
	@Override
	public Date getAwardedDate() {
		return _awardedDate;
	}

	@Override
	public void setAwardedDate(Date awardedDate) {
		_awardedDate = awardedDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			users.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public users toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (users)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		usersImpl usersImpl = new usersImpl();

		usersImpl.setId(getId());
		usersImpl.setEmpId(getEmpId());
		usersImpl.setEmpName(getEmpName());
		usersImpl.setEmpImagePath(getEmpImagePath());
		usersImpl.setWriteUp(getWriteUp());
		usersImpl.setAwardedDate(getAwardedDate());

		usersImpl.resetOriginalValues();

		return usersImpl;
	}

	@Override
	public int compareTo(users users) {
		long primaryKey = users.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof users)) {
			return false;
		}

		users users = (users)obj;

		long primaryKey = users.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<users> toCacheModel() {
		usersCacheModel usersCacheModel = new usersCacheModel();

		usersCacheModel.Id = getId();

		usersCacheModel.empId = getEmpId();

		String empId = usersCacheModel.empId;

		if ((empId != null) && (empId.length() == 0)) {
			usersCacheModel.empId = null;
		}

		usersCacheModel.empName = getEmpName();

		String empName = usersCacheModel.empName;

		if ((empName != null) && (empName.length() == 0)) {
			usersCacheModel.empName = null;
		}

		usersCacheModel.empImagePath = getEmpImagePath();

		String empImagePath = usersCacheModel.empImagePath;

		if ((empImagePath != null) && (empImagePath.length() == 0)) {
			usersCacheModel.empImagePath = null;
		}

		usersCacheModel.writeUp = getWriteUp();

		String writeUp = usersCacheModel.writeUp;

		if ((writeUp != null) && (writeUp.length() == 0)) {
			usersCacheModel.writeUp = null;
		}

		Date awardedDate = getAwardedDate();

		if (awardedDate != null) {
			usersCacheModel.awardedDate = awardedDate.getTime();
		}
		else {
			usersCacheModel.awardedDate = Long.MIN_VALUE;
		}

		return usersCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{Id=");
		sb.append(getId());
		sb.append(", empId=");
		sb.append(getEmpId());
		sb.append(", empName=");
		sb.append(getEmpName());
		sb.append(", empImagePath=");
		sb.append(getEmpImagePath());
		sb.append(", writeUp=");
		sb.append(getWriteUp());
		sb.append(", awardedDate=");
		sb.append(getAwardedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.chola.promotion.model.users");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>Id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>empId</column-name><column-value><![CDATA[");
		sb.append(getEmpId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>empName</column-name><column-value><![CDATA[");
		sb.append(getEmpName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>empImagePath</column-name><column-value><![CDATA[");
		sb.append(getEmpImagePath());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>writeUp</column-name><column-value><![CDATA[");
		sb.append(getWriteUp());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>awardedDate</column-name><column-value><![CDATA[");
		sb.append(getAwardedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = users.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			users.class
		};
	private long _Id;
	private String _empId;
	private String _empName;
	private String _empImagePath;
	private String _writeUp;
	private Date _awardedDate;
	private users _escapedModel;
}