/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.chola.productbuysell.service.base;

import aQute.bnd.annotation.ProviderType;

import com.chola.productbuysell.model.BuySell;
import com.chola.productbuysell.service.BuySellLocalService;
import com.chola.productbuysell.service.persistence.BuySellFinder;
import com.chola.productbuysell.service.persistence.BuySellPersistence;
import com.chola.productbuysell.service.persistence.BuySellProductsImagesPersistence;
import com.chola.productbuysell.service.persistence.BuySellProductsPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the buy sell local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.chola.productbuysell.service.impl.BuySellLocalServiceImpl}.
 * </p>
 *
 * @author CloverLiferay03
 * @see com.chola.productbuysell.service.impl.BuySellLocalServiceImpl
 * @see com.chola.productbuysell.service.BuySellLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class BuySellLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements BuySellLocalService, IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.chola.productbuysell.service.BuySellLocalServiceUtil} to access the buy sell local service.
	 */

	/**
	 * Adds the buy sell to the database. Also notifies the appropriate model listeners.
	 *
	 * @param buySell the buy sell
	 * @return the buy sell that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public BuySell addBuySell(BuySell buySell) {
		buySell.setNew(true);

		return buySellPersistence.update(buySell);
	}

	/**
	 * Creates a new buy sell with the primary key. Does not add the buy sell to the database.
	 *
	 * @param id the primary key for the new buy sell
	 * @return the new buy sell
	 */
	@Override
	public BuySell createBuySell(long id) {
		return buySellPersistence.create(id);
	}

	/**
	 * Deletes the buy sell with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param id the primary key of the buy sell
	 * @return the buy sell that was removed
	 * @throws PortalException if a buy sell with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public BuySell deleteBuySell(long id) throws PortalException {
		return buySellPersistence.remove(id);
	}

	/**
	 * Deletes the buy sell from the database. Also notifies the appropriate model listeners.
	 *
	 * @param buySell the buy sell
	 * @return the buy sell that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public BuySell deleteBuySell(BuySell buySell) {
		return buySellPersistence.remove(buySell);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(BuySell.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return buySellPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.chola.productbuysell.model.impl.BuySellModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return buySellPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.chola.productbuysell.model.impl.BuySellModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return buySellPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return buySellPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return buySellPersistence.countWithDynamicQuery(dynamicQuery, projection);
	}

	@Override
	public BuySell fetchBuySell(long id) {
		return buySellPersistence.fetchByPrimaryKey(id);
	}

	/**
	 * Returns the buy sell with the primary key.
	 *
	 * @param id the primary key of the buy sell
	 * @return the buy sell
	 * @throws PortalException if a buy sell with the primary key could not be found
	 */
	@Override
	public BuySell getBuySell(long id) throws PortalException {
		return buySellPersistence.findByPrimaryKey(id);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(buySellLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(BuySell.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(buySellLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(BuySell.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(buySellLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(BuySell.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return buySellLocalService.deleteBuySell((BuySell)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return buySellPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the buy sells.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.chola.productbuysell.model.impl.BuySellModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of buy sells
	 * @param end the upper bound of the range of buy sells (not inclusive)
	 * @return the range of buy sells
	 */
	@Override
	public List<BuySell> getBuySells(int start, int end) {
		return buySellPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of buy sells.
	 *
	 * @return the number of buy sells
	 */
	@Override
	public int getBuySellsCount() {
		return buySellPersistence.countAll();
	}

	/**
	 * Updates the buy sell in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param buySell the buy sell
	 * @return the buy sell that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public BuySell updateBuySell(BuySell buySell) {
		return buySellPersistence.update(buySell);
	}

	/**
	 * Returns the buy sell local service.
	 *
	 * @return the buy sell local service
	 */
	public BuySellLocalService getBuySellLocalService() {
		return buySellLocalService;
	}

	/**
	 * Sets the buy sell local service.
	 *
	 * @param buySellLocalService the buy sell local service
	 */
	public void setBuySellLocalService(BuySellLocalService buySellLocalService) {
		this.buySellLocalService = buySellLocalService;
	}

	/**
	 * Returns the buy sell persistence.
	 *
	 * @return the buy sell persistence
	 */
	public BuySellPersistence getBuySellPersistence() {
		return buySellPersistence;
	}

	/**
	 * Sets the buy sell persistence.
	 *
	 * @param buySellPersistence the buy sell persistence
	 */
	public void setBuySellPersistence(BuySellPersistence buySellPersistence) {
		this.buySellPersistence = buySellPersistence;
	}

	/**
	 * Returns the buy sell finder.
	 *
	 * @return the buy sell finder
	 */
	public BuySellFinder getBuySellFinder() {
		return buySellFinder;
	}

	/**
	 * Sets the buy sell finder.
	 *
	 * @param buySellFinder the buy sell finder
	 */
	public void setBuySellFinder(BuySellFinder buySellFinder) {
		this.buySellFinder = buySellFinder;
	}

	/**
	 * Returns the buy sell products local service.
	 *
	 * @return the buy sell products local service
	 */
	public com.chola.productbuysell.service.BuySellProductsLocalService getBuySellProductsLocalService() {
		return buySellProductsLocalService;
	}

	/**
	 * Sets the buy sell products local service.
	 *
	 * @param buySellProductsLocalService the buy sell products local service
	 */
	public void setBuySellProductsLocalService(
		com.chola.productbuysell.service.BuySellProductsLocalService buySellProductsLocalService) {
		this.buySellProductsLocalService = buySellProductsLocalService;
	}

	/**
	 * Returns the buy sell products persistence.
	 *
	 * @return the buy sell products persistence
	 */
	public BuySellProductsPersistence getBuySellProductsPersistence() {
		return buySellProductsPersistence;
	}

	/**
	 * Sets the buy sell products persistence.
	 *
	 * @param buySellProductsPersistence the buy sell products persistence
	 */
	public void setBuySellProductsPersistence(
		BuySellProductsPersistence buySellProductsPersistence) {
		this.buySellProductsPersistence = buySellProductsPersistence;
	}

	/**
	 * Returns the buy sell products images local service.
	 *
	 * @return the buy sell products images local service
	 */
	public com.chola.productbuysell.service.BuySellProductsImagesLocalService getBuySellProductsImagesLocalService() {
		return buySellProductsImagesLocalService;
	}

	/**
	 * Sets the buy sell products images local service.
	 *
	 * @param buySellProductsImagesLocalService the buy sell products images local service
	 */
	public void setBuySellProductsImagesLocalService(
		com.chola.productbuysell.service.BuySellProductsImagesLocalService buySellProductsImagesLocalService) {
		this.buySellProductsImagesLocalService = buySellProductsImagesLocalService;
	}

	/**
	 * Returns the buy sell products images persistence.
	 *
	 * @return the buy sell products images persistence
	 */
	public BuySellProductsImagesPersistence getBuySellProductsImagesPersistence() {
		return buySellProductsImagesPersistence;
	}

	/**
	 * Sets the buy sell products images persistence.
	 *
	 * @param buySellProductsImagesPersistence the buy sell products images persistence
	 */
	public void setBuySellProductsImagesPersistence(
		BuySellProductsImagesPersistence buySellProductsImagesPersistence) {
		this.buySellProductsImagesPersistence = buySellProductsImagesPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.chola.productbuysell.model.BuySell",
			buySellLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.chola.productbuysell.model.BuySell");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return BuySellLocalService.class.getName();
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return BuySell.class;
	}

	protected String getModelClassName() {
		return BuySell.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = buySellPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = BuySellLocalService.class)
	protected BuySellLocalService buySellLocalService;
	@BeanReference(type = BuySellPersistence.class)
	protected BuySellPersistence buySellPersistence;
	@BeanReference(type = BuySellFinder.class)
	protected BuySellFinder buySellFinder;
	@BeanReference(type = com.chola.productbuysell.service.BuySellProductsLocalService.class)
	protected com.chola.productbuysell.service.BuySellProductsLocalService buySellProductsLocalService;
	@BeanReference(type = BuySellProductsPersistence.class)
	protected BuySellProductsPersistence buySellProductsPersistence;
	@BeanReference(type = com.chola.productbuysell.service.BuySellProductsImagesLocalService.class)
	protected com.chola.productbuysell.service.BuySellProductsImagesLocalService buySellProductsImagesLocalService;
	@BeanReference(type = BuySellProductsImagesPersistence.class)
	protected BuySellProductsImagesPersistence buySellProductsImagesPersistence;
	@BeanReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@BeanReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@BeanReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private ClassLoader _classLoader;
	private BuySellLocalServiceClpInvoker _clpInvoker = new BuySellLocalServiceClpInvoker();
}