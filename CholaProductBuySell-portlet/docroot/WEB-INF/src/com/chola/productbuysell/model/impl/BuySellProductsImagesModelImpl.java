/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.chola.productbuysell.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.chola.productbuysell.model.BuySellProductsImages;
import com.chola.productbuysell.model.BuySellProductsImagesModel;
import com.chola.productbuysell.model.BuySellProductsImagesSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the BuySellProductsImages service. Represents a row in the &quot;chola_BuySellProductsImages&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link BuySellProductsImagesModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BuySellProductsImagesImpl}.
 * </p>
 *
 * @author CloverLiferay03
 * @see BuySellProductsImagesImpl
 * @see BuySellProductsImages
 * @see BuySellProductsImagesModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class BuySellProductsImagesModelImpl extends BaseModelImpl<BuySellProductsImages>
	implements BuySellProductsImagesModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a buy sell products images model instance should use the {@link BuySellProductsImages} interface instead.
	 */
	public static final String TABLE_NAME = "chola_BuySellProductsImages";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "content_id", Types.BIGINT },
			{ "image_name", Types.VARCHAR },
			{ "image_path", Types.VARCHAR },
			{ "product_id", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("content_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("image_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("image_path", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("product_id", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table chola_BuySellProductsImages (id_ LONG not null primary key,content_id LONG,image_name VARCHAR(75) null,image_path VARCHAR(75) null,product_id LONG)";
	public static final String TABLE_SQL_DROP = "drop table chola_BuySellProductsImages";
	public static final String ORDER_BY_JPQL = " ORDER BY buySellProductsImages.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY chola_BuySellProductsImages.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.chola.productbuysell.model.BuySellProductsImages"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.chola.productbuysell.model.BuySellProductsImages"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.chola.productbuysell.model.BuySellProductsImages"),
			true);
	public static final long PRODUCT_ID_COLUMN_BITMASK = 1L;
	public static final long ID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static BuySellProductsImages toModel(
		BuySellProductsImagesSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		BuySellProductsImages model = new BuySellProductsImagesImpl();

		model.setId(soapModel.getId());
		model.setContent_id(soapModel.getContent_id());
		model.setImage_name(soapModel.getImage_name());
		model.setImage_path(soapModel.getImage_path());
		model.setProduct_id(soapModel.getProduct_id());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<BuySellProductsImages> toModels(
		BuySellProductsImagesSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<BuySellProductsImages> models = new ArrayList<BuySellProductsImages>(soapModels.length);

		for (BuySellProductsImagesSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.chola.productbuysell.model.BuySellProductsImages"));

	public BuySellProductsImagesModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return BuySellProductsImages.class;
	}

	@Override
	public String getModelClassName() {
		return BuySellProductsImages.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("content_id", getContent_id());
		attributes.put("image_name", getImage_name());
		attributes.put("image_path", getImage_path());
		attributes.put("product_id", getProduct_id());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long content_id = (Long)attributes.get("content_id");

		if (content_id != null) {
			setContent_id(content_id);
		}

		String image_name = (String)attributes.get("image_name");

		if (image_name != null) {
			setImage_name(image_name);
		}

		String image_path = (String)attributes.get("image_path");

		if (image_path != null) {
			setImage_path(image_path);
		}

		Long product_id = (Long)attributes.get("product_id");

		if (product_id != null) {
			setProduct_id(product_id);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public long getContent_id() {
		return _content_id;
	}

	@Override
	public void setContent_id(long content_id) {
		_content_id = content_id;
	}

	@JSON
	@Override
	public String getImage_name() {
		if (_image_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _image_name;
		}
	}

	@Override
	public void setImage_name(String image_name) {
		_image_name = image_name;
	}

	@JSON
	@Override
	public String getImage_path() {
		if (_image_path == null) {
			return StringPool.BLANK;
		}
		else {
			return _image_path;
		}
	}

	@Override
	public void setImage_path(String image_path) {
		_image_path = image_path;
	}

	@JSON
	@Override
	public long getProduct_id() {
		return _product_id;
	}

	@Override
	public void setProduct_id(long product_id) {
		_columnBitmask |= PRODUCT_ID_COLUMN_BITMASK;

		if (!_setOriginalProduct_id) {
			_setOriginalProduct_id = true;

			_originalProduct_id = _product_id;
		}

		_product_id = product_id;
	}

	public long getOriginalProduct_id() {
		return _originalProduct_id;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			BuySellProductsImages.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public BuySellProductsImages toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (BuySellProductsImages)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BuySellProductsImagesImpl buySellProductsImagesImpl = new BuySellProductsImagesImpl();

		buySellProductsImagesImpl.setId(getId());
		buySellProductsImagesImpl.setContent_id(getContent_id());
		buySellProductsImagesImpl.setImage_name(getImage_name());
		buySellProductsImagesImpl.setImage_path(getImage_path());
		buySellProductsImagesImpl.setProduct_id(getProduct_id());

		buySellProductsImagesImpl.resetOriginalValues();

		return buySellProductsImagesImpl;
	}

	@Override
	public int compareTo(BuySellProductsImages buySellProductsImages) {
		long primaryKey = buySellProductsImages.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof BuySellProductsImages)) {
			return false;
		}

		BuySellProductsImages buySellProductsImages = (BuySellProductsImages)obj;

		long primaryKey = buySellProductsImages.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		BuySellProductsImagesModelImpl buySellProductsImagesModelImpl = this;

		buySellProductsImagesModelImpl._originalProduct_id = buySellProductsImagesModelImpl._product_id;

		buySellProductsImagesModelImpl._setOriginalProduct_id = false;

		buySellProductsImagesModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<BuySellProductsImages> toCacheModel() {
		BuySellProductsImagesCacheModel buySellProductsImagesCacheModel = new BuySellProductsImagesCacheModel();

		buySellProductsImagesCacheModel.id = getId();

		buySellProductsImagesCacheModel.content_id = getContent_id();

		buySellProductsImagesCacheModel.image_name = getImage_name();

		String image_name = buySellProductsImagesCacheModel.image_name;

		if ((image_name != null) && (image_name.length() == 0)) {
			buySellProductsImagesCacheModel.image_name = null;
		}

		buySellProductsImagesCacheModel.image_path = getImage_path();

		String image_path = buySellProductsImagesCacheModel.image_path;

		if ((image_path != null) && (image_path.length() == 0)) {
			buySellProductsImagesCacheModel.image_path = null;
		}

		buySellProductsImagesCacheModel.product_id = getProduct_id();

		return buySellProductsImagesCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", content_id=");
		sb.append(getContent_id());
		sb.append(", image_name=");
		sb.append(getImage_name());
		sb.append(", image_path=");
		sb.append(getImage_path());
		sb.append(", product_id=");
		sb.append(getProduct_id());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.chola.productbuysell.model.BuySellProductsImages");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>content_id</column-name><column-value><![CDATA[");
		sb.append(getContent_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>image_name</column-name><column-value><![CDATA[");
		sb.append(getImage_name());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>image_path</column-name><column-value><![CDATA[");
		sb.append(getImage_path());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>product_id</column-name><column-value><![CDATA[");
		sb.append(getProduct_id());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = BuySellProductsImages.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			BuySellProductsImages.class
		};
	private long _id;
	private long _content_id;
	private String _image_name;
	private String _image_path;
	private long _product_id;
	private long _originalProduct_id;
	private boolean _setOriginalProduct_id;
	private long _columnBitmask;
	private BuySellProductsImages _escapedModel;
}