/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.chola.listbranch.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.chola.listbranch.model.mapping;
import com.chola.listbranch.model.mappingModel;
import com.chola.listbranch.model.mappingSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the mapping service. Represents a row in the &quot;branch_mapping&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link mappingModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link mappingImpl}.
 * </p>
 *
 * @author adms.java1
 * @see mappingImpl
 * @see mapping
 * @see mappingModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class mappingModelImpl extends BaseModelImpl<mapping>
	implements mappingModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a mapping model instance should use the {@link mapping} interface instead.
	 */
	public static final String TABLE_NAME = "branch_mapping";
	public static final Object[][] TABLE_COLUMNS = {
			{ "mapping_id", Types.BIGINT },
			{ "product_id", Types.BIGINT },
			{ "state_id", Types.BIGINT },
			{ "city_id", Types.BIGINT },
			{ "branch_id", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mapping_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("product_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("state_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("city_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("branch_id", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table branch_mapping (mapping_id LONG not null primary key,product_id LONG,state_id LONG,city_id LONG,branch_id LONG)";
	public static final String TABLE_SQL_DROP = "drop table branch_mapping";
	public static final String ORDER_BY_JPQL = " ORDER BY mapping.mapping_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY branch_mapping.mapping_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.chola.listbranch.model.mapping"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.chola.listbranch.model.mapping"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static mapping toModel(mappingSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		mapping model = new mappingImpl();

		model.setMapping_id(soapModel.getMapping_id());
		model.setProduct_id(soapModel.getProduct_id());
		model.setState_id(soapModel.getState_id());
		model.setCity_id(soapModel.getCity_id());
		model.setBranch_id(soapModel.getBranch_id());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<mapping> toModels(mappingSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<mapping> models = new ArrayList<mapping>(soapModels.length);

		for (mappingSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.chola.listbranch.model.mapping"));

	public mappingModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _mapping_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMapping_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _mapping_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return mapping.class;
	}

	@Override
	public String getModelClassName() {
		return mapping.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("mapping_id", getMapping_id());
		attributes.put("product_id", getProduct_id());
		attributes.put("state_id", getState_id());
		attributes.put("city_id", getCity_id());
		attributes.put("branch_id", getBranch_id());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long mapping_id = (Long)attributes.get("mapping_id");

		if (mapping_id != null) {
			setMapping_id(mapping_id);
		}

		Long product_id = (Long)attributes.get("product_id");

		if (product_id != null) {
			setProduct_id(product_id);
		}

		Long state_id = (Long)attributes.get("state_id");

		if (state_id != null) {
			setState_id(state_id);
		}

		Long city_id = (Long)attributes.get("city_id");

		if (city_id != null) {
			setCity_id(city_id);
		}

		Long branch_id = (Long)attributes.get("branch_id");

		if (branch_id != null) {
			setBranch_id(branch_id);
		}
	}

	@JSON
	@Override
	public long getMapping_id() {
		return _mapping_id;
	}

	@Override
	public void setMapping_id(long mapping_id) {
		_mapping_id = mapping_id;
	}

	@JSON
	@Override
	public long getProduct_id() {
		return _product_id;
	}

	@Override
	public void setProduct_id(long product_id) {
		_product_id = product_id;
	}

	@JSON
	@Override
	public long getState_id() {
		return _state_id;
	}

	@Override
	public void setState_id(long state_id) {
		_state_id = state_id;
	}

	@JSON
	@Override
	public long getCity_id() {
		return _city_id;
	}

	@Override
	public void setCity_id(long city_id) {
		_city_id = city_id;
	}

	@JSON
	@Override
	public long getBranch_id() {
		return _branch_id;
	}

	@Override
	public void setBranch_id(long branch_id) {
		_branch_id = branch_id;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			mapping.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public mapping toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (mapping)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		mappingImpl mappingImpl = new mappingImpl();

		mappingImpl.setMapping_id(getMapping_id());
		mappingImpl.setProduct_id(getProduct_id());
		mappingImpl.setState_id(getState_id());
		mappingImpl.setCity_id(getCity_id());
		mappingImpl.setBranch_id(getBranch_id());

		mappingImpl.resetOriginalValues();

		return mappingImpl;
	}

	@Override
	public int compareTo(mapping mapping) {
		long primaryKey = mapping.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof mapping)) {
			return false;
		}

		mapping mapping = (mapping)obj;

		long primaryKey = mapping.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<mapping> toCacheModel() {
		mappingCacheModel mappingCacheModel = new mappingCacheModel();

		mappingCacheModel.mapping_id = getMapping_id();

		mappingCacheModel.product_id = getProduct_id();

		mappingCacheModel.state_id = getState_id();

		mappingCacheModel.city_id = getCity_id();

		mappingCacheModel.branch_id = getBranch_id();

		return mappingCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{mapping_id=");
		sb.append(getMapping_id());
		sb.append(", product_id=");
		sb.append(getProduct_id());
		sb.append(", state_id=");
		sb.append(getState_id());
		sb.append(", city_id=");
		sb.append(getCity_id());
		sb.append(", branch_id=");
		sb.append(getBranch_id());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.chola.listbranch.model.mapping");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>mapping_id</column-name><column-value><![CDATA[");
		sb.append(getMapping_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>product_id</column-name><column-value><![CDATA[");
		sb.append(getProduct_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>state_id</column-name><column-value><![CDATA[");
		sb.append(getState_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>city_id</column-name><column-value><![CDATA[");
		sb.append(getCity_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>branch_id</column-name><column-value><![CDATA[");
		sb.append(getBranch_id());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = mapping.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			mapping.class
		};
	private long _mapping_id;
	private long _product_id;
	private long _state_id;
	private long _city_id;
	private long _branch_id;
	private mapping _escapedModel;
}