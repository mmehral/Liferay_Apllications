/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.contest.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.contest.model.CholaContest;
import com.contest.model.CholaContestModel;
import com.contest.model.CholaContestSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the CholaContest service. Represents a row in the &quot;chola_CholaContest&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CholaContestModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CholaContestImpl}.
 * </p>
 *
 * @author CloverLiferay01
 * @see CholaContestImpl
 * @see CholaContest
 * @see CholaContestModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class CholaContestModelImpl extends BaseModelImpl<CholaContest>
	implements CholaContestModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a chola contest model instance should use the {@link CholaContest} interface instead.
	 */
	public static final String TABLE_NAME = "chola_CholaContest";
	public static final Object[][] TABLE_COLUMNS = {
			{ "Id", Types.BIGINT },
			{ "content_id", Types.BIGINT },
			{ "content", Types.VARCHAR },
			{ "startdate", Types.TIMESTAMP },
			{ "enddate", Types.TIMESTAMP },
			{ "feedback", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "contest_code", Types.INTEGER },
			{ "contest_val", Types.INTEGER },
			{ "contest_desc", Types.VARCHAR },
			{ "contest_doc", Types.VARCHAR },
			{ "contest_path", Types.VARCHAR },
			{ "contest_title", Types.VARCHAR },
			{ "user_id", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("Id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("content_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("content", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("startdate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("enddate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("feedback", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("contest_code", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("contest_val", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("contest_desc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contest_doc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contest_path", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contest_title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("user_id", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table chola_CholaContest (Id LONG not null primary key,content_id LONG,content VARCHAR(75) null,startdate DATE null,enddate DATE null,feedback VARCHAR(75) null,createDate DATE null,contest_code INTEGER,contest_val INTEGER,contest_desc VARCHAR(75) null,contest_doc VARCHAR(75) null,contest_path VARCHAR(75) null,contest_title VARCHAR(75) null,user_id VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table chola_CholaContest";
	public static final String ORDER_BY_JPQL = " ORDER BY cholaContest.Id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY chola_CholaContest.Id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.contest.model.CholaContest"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.contest.model.CholaContest"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.contest.model.CholaContest"),
			true);
	public static final long CONTENT_ID_COLUMN_BITMASK = 1L;
	public static final long ID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CholaContest toModel(CholaContestSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CholaContest model = new CholaContestImpl();

		model.setId(soapModel.getId());
		model.setContent_id(soapModel.getContent_id());
		model.setContent(soapModel.getContent());
		model.setStartdate(soapModel.getStartdate());
		model.setEnddate(soapModel.getEnddate());
		model.setFeedback(soapModel.getFeedback());
		model.setCreateDate(soapModel.getCreateDate());
		model.setContest_code(soapModel.getContest_code());
		model.setContest_val(soapModel.getContest_val());
		model.setContest_desc(soapModel.getContest_desc());
		model.setContest_doc(soapModel.getContest_doc());
		model.setContest_path(soapModel.getContest_path());
		model.setContest_title(soapModel.getContest_title());
		model.setUser_id(soapModel.getUser_id());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CholaContest> toModels(CholaContestSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CholaContest> models = new ArrayList<CholaContest>(soapModels.length);

		for (CholaContestSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.contest.model.CholaContest"));

	public CholaContestModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _Id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _Id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CholaContest.class;
	}

	@Override
	public String getModelClassName() {
		return CholaContest.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("Id", getId());
		attributes.put("content_id", getContent_id());
		attributes.put("content", getContent());
		attributes.put("startdate", getStartdate());
		attributes.put("enddate", getEnddate());
		attributes.put("feedback", getFeedback());
		attributes.put("createDate", getCreateDate());
		attributes.put("contest_code", getContest_code());
		attributes.put("contest_val", getContest_val());
		attributes.put("contest_desc", getContest_desc());
		attributes.put("contest_doc", getContest_doc());
		attributes.put("contest_path", getContest_path());
		attributes.put("contest_title", getContest_title());
		attributes.put("user_id", getUser_id());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long Id = (Long)attributes.get("Id");

		if (Id != null) {
			setId(Id);
		}

		Long content_id = (Long)attributes.get("content_id");

		if (content_id != null) {
			setContent_id(content_id);
		}

		String content = (String)attributes.get("content");

		if (content != null) {
			setContent(content);
		}

		Date startdate = (Date)attributes.get("startdate");

		if (startdate != null) {
			setStartdate(startdate);
		}

		Date enddate = (Date)attributes.get("enddate");

		if (enddate != null) {
			setEnddate(enddate);
		}

		String feedback = (String)attributes.get("feedback");

		if (feedback != null) {
			setFeedback(feedback);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Integer contest_code = (Integer)attributes.get("contest_code");

		if (contest_code != null) {
			setContest_code(contest_code);
		}

		Integer contest_val = (Integer)attributes.get("contest_val");

		if (contest_val != null) {
			setContest_val(contest_val);
		}

		String contest_desc = (String)attributes.get("contest_desc");

		if (contest_desc != null) {
			setContest_desc(contest_desc);
		}

		String contest_doc = (String)attributes.get("contest_doc");

		if (contest_doc != null) {
			setContest_doc(contest_doc);
		}

		String contest_path = (String)attributes.get("contest_path");

		if (contest_path != null) {
			setContest_path(contest_path);
		}

		String contest_title = (String)attributes.get("contest_title");

		if (contest_title != null) {
			setContest_title(contest_title);
		}

		String user_id = (String)attributes.get("user_id");

		if (user_id != null) {
			setUser_id(user_id);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _Id;
	}

	@Override
	public void setId(long Id) {
		_Id = Id;
	}

	@JSON
	@Override
	public long getContent_id() {
		return _content_id;
	}

	@Override
	public void setContent_id(long content_id) {
		_columnBitmask |= CONTENT_ID_COLUMN_BITMASK;

		if (!_setOriginalContent_id) {
			_setOriginalContent_id = true;

			_originalContent_id = _content_id;
		}

		_content_id = content_id;
	}

	public long getOriginalContent_id() {
		return _originalContent_id;
	}

	@JSON
	@Override
	public String getContent() {
		if (_content == null) {
			return StringPool.BLANK;
		}
		else {
			return _content;
		}
	}

	@Override
	public void setContent(String content) {
		_content = content;
	}

	@JSON
	@Override
	public Date getStartdate() {
		return _startdate;
	}

	@Override
	public void setStartdate(Date startdate) {
		_startdate = startdate;
	}

	@JSON
	@Override
	public Date getEnddate() {
		return _enddate;
	}

	@Override
	public void setEnddate(Date enddate) {
		_enddate = enddate;
	}

	@JSON
	@Override
	public String getFeedback() {
		if (_feedback == null) {
			return StringPool.BLANK;
		}
		else {
			return _feedback;
		}
	}

	@Override
	public void setFeedback(String feedback) {
		_feedback = feedback;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public int getContest_code() {
		return _contest_code;
	}

	@Override
	public void setContest_code(int contest_code) {
		_contest_code = contest_code;
	}

	@JSON
	@Override
	public int getContest_val() {
		return _contest_val;
	}

	@Override
	public void setContest_val(int contest_val) {
		_contest_val = contest_val;
	}

	@JSON
	@Override
	public String getContest_desc() {
		if (_contest_desc == null) {
			return StringPool.BLANK;
		}
		else {
			return _contest_desc;
		}
	}

	@Override
	public void setContest_desc(String contest_desc) {
		_contest_desc = contest_desc;
	}

	@JSON
	@Override
	public String getContest_doc() {
		if (_contest_doc == null) {
			return StringPool.BLANK;
		}
		else {
			return _contest_doc;
		}
	}

	@Override
	public void setContest_doc(String contest_doc) {
		_contest_doc = contest_doc;
	}

	@JSON
	@Override
	public String getContest_path() {
		if (_contest_path == null) {
			return StringPool.BLANK;
		}
		else {
			return _contest_path;
		}
	}

	@Override
	public void setContest_path(String contest_path) {
		_contest_path = contest_path;
	}

	@JSON
	@Override
	public String getContest_title() {
		if (_contest_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _contest_title;
		}
	}

	@Override
	public void setContest_title(String contest_title) {
		_contest_title = contest_title;
	}

	@JSON
	@Override
	public String getUser_id() {
		if (_user_id == null) {
			return StringPool.BLANK;
		}
		else {
			return _user_id;
		}
	}

	@Override
	public void setUser_id(String user_id) {
		_user_id = user_id;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			CholaContest.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CholaContest toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CholaContest)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CholaContestImpl cholaContestImpl = new CholaContestImpl();

		cholaContestImpl.setId(getId());
		cholaContestImpl.setContent_id(getContent_id());
		cholaContestImpl.setContent(getContent());
		cholaContestImpl.setStartdate(getStartdate());
		cholaContestImpl.setEnddate(getEnddate());
		cholaContestImpl.setFeedback(getFeedback());
		cholaContestImpl.setCreateDate(getCreateDate());
		cholaContestImpl.setContest_code(getContest_code());
		cholaContestImpl.setContest_val(getContest_val());
		cholaContestImpl.setContest_desc(getContest_desc());
		cholaContestImpl.setContest_doc(getContest_doc());
		cholaContestImpl.setContest_path(getContest_path());
		cholaContestImpl.setContest_title(getContest_title());
		cholaContestImpl.setUser_id(getUser_id());

		cholaContestImpl.resetOriginalValues();

		return cholaContestImpl;
	}

	@Override
	public int compareTo(CholaContest cholaContest) {
		long primaryKey = cholaContest.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CholaContest)) {
			return false;
		}

		CholaContest cholaContest = (CholaContest)obj;

		long primaryKey = cholaContest.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CholaContestModelImpl cholaContestModelImpl = this;

		cholaContestModelImpl._originalContent_id = cholaContestModelImpl._content_id;

		cholaContestModelImpl._setOriginalContent_id = false;

		cholaContestModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CholaContest> toCacheModel() {
		CholaContestCacheModel cholaContestCacheModel = new CholaContestCacheModel();

		cholaContestCacheModel.Id = getId();

		cholaContestCacheModel.content_id = getContent_id();

		cholaContestCacheModel.content = getContent();

		String content = cholaContestCacheModel.content;

		if ((content != null) && (content.length() == 0)) {
			cholaContestCacheModel.content = null;
		}

		Date startdate = getStartdate();

		if (startdate != null) {
			cholaContestCacheModel.startdate = startdate.getTime();
		}
		else {
			cholaContestCacheModel.startdate = Long.MIN_VALUE;
		}

		Date enddate = getEnddate();

		if (enddate != null) {
			cholaContestCacheModel.enddate = enddate.getTime();
		}
		else {
			cholaContestCacheModel.enddate = Long.MIN_VALUE;
		}

		cholaContestCacheModel.feedback = getFeedback();

		String feedback = cholaContestCacheModel.feedback;

		if ((feedback != null) && (feedback.length() == 0)) {
			cholaContestCacheModel.feedback = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			cholaContestCacheModel.createDate = createDate.getTime();
		}
		else {
			cholaContestCacheModel.createDate = Long.MIN_VALUE;
		}

		cholaContestCacheModel.contest_code = getContest_code();

		cholaContestCacheModel.contest_val = getContest_val();

		cholaContestCacheModel.contest_desc = getContest_desc();

		String contest_desc = cholaContestCacheModel.contest_desc;

		if ((contest_desc != null) && (contest_desc.length() == 0)) {
			cholaContestCacheModel.contest_desc = null;
		}

		cholaContestCacheModel.contest_doc = getContest_doc();

		String contest_doc = cholaContestCacheModel.contest_doc;

		if ((contest_doc != null) && (contest_doc.length() == 0)) {
			cholaContestCacheModel.contest_doc = null;
		}

		cholaContestCacheModel.contest_path = getContest_path();

		String contest_path = cholaContestCacheModel.contest_path;

		if ((contest_path != null) && (contest_path.length() == 0)) {
			cholaContestCacheModel.contest_path = null;
		}

		cholaContestCacheModel.contest_title = getContest_title();

		String contest_title = cholaContestCacheModel.contest_title;

		if ((contest_title != null) && (contest_title.length() == 0)) {
			cholaContestCacheModel.contest_title = null;
		}

		cholaContestCacheModel.user_id = getUser_id();

		String user_id = cholaContestCacheModel.user_id;

		if ((user_id != null) && (user_id.length() == 0)) {
			cholaContestCacheModel.user_id = null;
		}

		return cholaContestCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{Id=");
		sb.append(getId());
		sb.append(", content_id=");
		sb.append(getContent_id());
		sb.append(", content=");
		sb.append(getContent());
		sb.append(", startdate=");
		sb.append(getStartdate());
		sb.append(", enddate=");
		sb.append(getEnddate());
		sb.append(", feedback=");
		sb.append(getFeedback());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", contest_code=");
		sb.append(getContest_code());
		sb.append(", contest_val=");
		sb.append(getContest_val());
		sb.append(", contest_desc=");
		sb.append(getContest_desc());
		sb.append(", contest_doc=");
		sb.append(getContest_doc());
		sb.append(", contest_path=");
		sb.append(getContest_path());
		sb.append(", contest_title=");
		sb.append(getContest_title());
		sb.append(", user_id=");
		sb.append(getUser_id());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("com.contest.model.CholaContest");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>Id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>content_id</column-name><column-value><![CDATA[");
		sb.append(getContent_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>content</column-name><column-value><![CDATA[");
		sb.append(getContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startdate</column-name><column-value><![CDATA[");
		sb.append(getStartdate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>enddate</column-name><column-value><![CDATA[");
		sb.append(getEnddate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>feedback</column-name><column-value><![CDATA[");
		sb.append(getFeedback());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contest_code</column-name><column-value><![CDATA[");
		sb.append(getContest_code());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contest_val</column-name><column-value><![CDATA[");
		sb.append(getContest_val());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contest_desc</column-name><column-value><![CDATA[");
		sb.append(getContest_desc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contest_doc</column-name><column-value><![CDATA[");
		sb.append(getContest_doc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contest_path</column-name><column-value><![CDATA[");
		sb.append(getContest_path());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contest_title</column-name><column-value><![CDATA[");
		sb.append(getContest_title());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>user_id</column-name><column-value><![CDATA[");
		sb.append(getUser_id());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = CholaContest.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			CholaContest.class
		};
	private long _Id;
	private long _content_id;
	private long _originalContent_id;
	private boolean _setOriginalContent_id;
	private String _content;
	private Date _startdate;
	private Date _enddate;
	private String _feedback;
	private Date _createDate;
	private int _contest_code;
	private int _contest_val;
	private String _contest_desc;
	private String _contest_doc;
	private String _contest_path;
	private String _contest_title;
	private String _user_id;
	private long _columnBitmask;
	private CholaContest _escapedModel;
}