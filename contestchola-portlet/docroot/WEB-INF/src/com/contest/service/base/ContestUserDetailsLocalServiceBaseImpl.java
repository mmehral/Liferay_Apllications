/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.contest.service.base;

import aQute.bnd.annotation.ProviderType;

import com.contest.model.ContestUserDetails;

import com.contest.service.ContestUserDetailsLocalService;
import com.contest.service.persistence.CholaContestFinder;
import com.contest.service.persistence.CholaContestPersistence;
import com.contest.service.persistence.ContestUserDetailsPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the contest user details local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.contest.service.impl.ContestUserDetailsLocalServiceImpl}.
 * </p>
 *
 * @author CloverLiferay01
 * @see com.contest.service.impl.ContestUserDetailsLocalServiceImpl
 * @see com.contest.service.ContestUserDetailsLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class ContestUserDetailsLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements ContestUserDetailsLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.contest.service.ContestUserDetailsLocalServiceUtil} to access the contest user details local service.
	 */

	/**
	 * Adds the contest user details to the database. Also notifies the appropriate model listeners.
	 *
	 * @param contestUserDetails the contest user details
	 * @return the contest user details that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ContestUserDetails addContestUserDetails(
		ContestUserDetails contestUserDetails) {
		contestUserDetails.setNew(true);

		return contestUserDetailsPersistence.update(contestUserDetails);
	}

	/**
	 * Creates a new contest user details with the primary key. Does not add the contest user details to the database.
	 *
	 * @param id the primary key for the new contest user details
	 * @return the new contest user details
	 */
	@Override
	public ContestUserDetails createContestUserDetails(long id) {
		return contestUserDetailsPersistence.create(id);
	}

	/**
	 * Deletes the contest user details with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param id the primary key of the contest user details
	 * @return the contest user details that was removed
	 * @throws PortalException if a contest user details with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ContestUserDetails deleteContestUserDetails(long id)
		throws PortalException {
		return contestUserDetailsPersistence.remove(id);
	}

	/**
	 * Deletes the contest user details from the database. Also notifies the appropriate model listeners.
	 *
	 * @param contestUserDetails the contest user details
	 * @return the contest user details that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ContestUserDetails deleteContestUserDetails(
		ContestUserDetails contestUserDetails) {
		return contestUserDetailsPersistence.remove(contestUserDetails);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(ContestUserDetails.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return contestUserDetailsPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.contest.model.impl.ContestUserDetailsModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return contestUserDetailsPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.contest.model.impl.ContestUserDetailsModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return contestUserDetailsPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return contestUserDetailsPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return contestUserDetailsPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public ContestUserDetails fetchContestUserDetails(long id) {
		return contestUserDetailsPersistence.fetchByPrimaryKey(id);
	}

	/**
	 * Returns the contest user details with the primary key.
	 *
	 * @param id the primary key of the contest user details
	 * @return the contest user details
	 * @throws PortalException if a contest user details with the primary key could not be found
	 */
	@Override
	public ContestUserDetails getContestUserDetails(long id)
		throws PortalException {
		return contestUserDetailsPersistence.findByPrimaryKey(id);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(contestUserDetailsLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(ContestUserDetails.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(contestUserDetailsLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(ContestUserDetails.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(contestUserDetailsLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(ContestUserDetails.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return contestUserDetailsLocalService.deleteContestUserDetails((ContestUserDetails)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return contestUserDetailsPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the contest user detailses.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.contest.model.impl.ContestUserDetailsModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of contest user detailses
	 * @param end the upper bound of the range of contest user detailses (not inclusive)
	 * @return the range of contest user detailses
	 */
	@Override
	public List<ContestUserDetails> getContestUserDetailses(int start, int end) {
		return contestUserDetailsPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of contest user detailses.
	 *
	 * @return the number of contest user detailses
	 */
	@Override
	public int getContestUserDetailsesCount() {
		return contestUserDetailsPersistence.countAll();
	}

	/**
	 * Updates the contest user details in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param contestUserDetails the contest user details
	 * @return the contest user details that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ContestUserDetails updateContestUserDetails(
		ContestUserDetails contestUserDetails) {
		return contestUserDetailsPersistence.update(contestUserDetails);
	}

	/**
	 * Returns the chola contest local service.
	 *
	 * @return the chola contest local service
	 */
	public com.contest.service.CholaContestLocalService getCholaContestLocalService() {
		return cholaContestLocalService;
	}

	/**
	 * Sets the chola contest local service.
	 *
	 * @param cholaContestLocalService the chola contest local service
	 */
	public void setCholaContestLocalService(
		com.contest.service.CholaContestLocalService cholaContestLocalService) {
		this.cholaContestLocalService = cholaContestLocalService;
	}

	/**
	 * Returns the chola contest persistence.
	 *
	 * @return the chola contest persistence
	 */
	public CholaContestPersistence getCholaContestPersistence() {
		return cholaContestPersistence;
	}

	/**
	 * Sets the chola contest persistence.
	 *
	 * @param cholaContestPersistence the chola contest persistence
	 */
	public void setCholaContestPersistence(
		CholaContestPersistence cholaContestPersistence) {
		this.cholaContestPersistence = cholaContestPersistence;
	}

	/**
	 * Returns the chola contest finder.
	 *
	 * @return the chola contest finder
	 */
	public CholaContestFinder getCholaContestFinder() {
		return cholaContestFinder;
	}

	/**
	 * Sets the chola contest finder.
	 *
	 * @param cholaContestFinder the chola contest finder
	 */
	public void setCholaContestFinder(CholaContestFinder cholaContestFinder) {
		this.cholaContestFinder = cholaContestFinder;
	}

	/**
	 * Returns the contest user details local service.
	 *
	 * @return the contest user details local service
	 */
	public ContestUserDetailsLocalService getContestUserDetailsLocalService() {
		return contestUserDetailsLocalService;
	}

	/**
	 * Sets the contest user details local service.
	 *
	 * @param contestUserDetailsLocalService the contest user details local service
	 */
	public void setContestUserDetailsLocalService(
		ContestUserDetailsLocalService contestUserDetailsLocalService) {
		this.contestUserDetailsLocalService = contestUserDetailsLocalService;
	}

	/**
	 * Returns the contest user details persistence.
	 *
	 * @return the contest user details persistence
	 */
	public ContestUserDetailsPersistence getContestUserDetailsPersistence() {
		return contestUserDetailsPersistence;
	}

	/**
	 * Sets the contest user details persistence.
	 *
	 * @param contestUserDetailsPersistence the contest user details persistence
	 */
	public void setContestUserDetailsPersistence(
		ContestUserDetailsPersistence contestUserDetailsPersistence) {
		this.contestUserDetailsPersistence = contestUserDetailsPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.contest.model.ContestUserDetails",
			contestUserDetailsLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.contest.model.ContestUserDetails");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return ContestUserDetailsLocalService.class.getName();
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return ContestUserDetails.class;
	}

	protected String getModelClassName() {
		return ContestUserDetails.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = contestUserDetailsPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.contest.service.CholaContestLocalService.class)
	protected com.contest.service.CholaContestLocalService cholaContestLocalService;
	@BeanReference(type = CholaContestPersistence.class)
	protected CholaContestPersistence cholaContestPersistence;
	@BeanReference(type = CholaContestFinder.class)
	protected CholaContestFinder cholaContestFinder;
	@BeanReference(type = ContestUserDetailsLocalService.class)
	protected ContestUserDetailsLocalService contestUserDetailsLocalService;
	@BeanReference(type = ContestUserDetailsPersistence.class)
	protected ContestUserDetailsPersistence contestUserDetailsPersistence;
	@BeanReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@BeanReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@BeanReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private ClassLoader _classLoader;
	private ContestUserDetailsLocalServiceClpInvoker _clpInvoker = new ContestUserDetailsLocalServiceClpInvoker();
}