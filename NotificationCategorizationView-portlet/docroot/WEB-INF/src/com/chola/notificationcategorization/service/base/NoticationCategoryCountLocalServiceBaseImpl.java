/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.chola.notificationcategorization.service.base;

import aQute.bnd.annotation.ProviderType;

import com.chola.notificationcategorization.model.NoticationCategoryCount;
import com.chola.notificationcategorization.service.NoticationCategoryCountLocalService;
import com.chola.notificationcategorization.service.persistence.NoticationCategoryCountFinder;
import com.chola.notificationcategorization.service.persistence.NoticationCategoryCountPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the notication category count local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.chola.notificationcategorization.service.impl.NoticationCategoryCountLocalServiceImpl}.
 * </p>
 *
 * @author cloverliferay03
 * @see com.chola.notificationcategorization.service.impl.NoticationCategoryCountLocalServiceImpl
 * @see com.chola.notificationcategorization.service.NoticationCategoryCountLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class NoticationCategoryCountLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements NoticationCategoryCountLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.chola.notificationcategorization.service.NoticationCategoryCountLocalServiceUtil} to access the notication category count local service.
	 */

	/**
	 * Adds the notication category count to the database. Also notifies the appropriate model listeners.
	 *
	 * @param noticationCategoryCount the notication category count
	 * @return the notication category count that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public NoticationCategoryCount addNoticationCategoryCount(
		NoticationCategoryCount noticationCategoryCount) {
		noticationCategoryCount.setNew(true);

		return noticationCategoryCountPersistence.update(noticationCategoryCount);
	}

	/**
	 * Creates a new notication category count with the primary key. Does not add the notication category count to the database.
	 *
	 * @param eventId the primary key for the new notication category count
	 * @return the new notication category count
	 */
	@Override
	public NoticationCategoryCount createNoticationCategoryCount(long eventId) {
		return noticationCategoryCountPersistence.create(eventId);
	}

	/**
	 * Deletes the notication category count with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param eventId the primary key of the notication category count
	 * @return the notication category count that was removed
	 * @throws PortalException if a notication category count with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public NoticationCategoryCount deleteNoticationCategoryCount(long eventId)
		throws PortalException {
		return noticationCategoryCountPersistence.remove(eventId);
	}

	/**
	 * Deletes the notication category count from the database. Also notifies the appropriate model listeners.
	 *
	 * @param noticationCategoryCount the notication category count
	 * @return the notication category count that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public NoticationCategoryCount deleteNoticationCategoryCount(
		NoticationCategoryCount noticationCategoryCount) {
		return noticationCategoryCountPersistence.remove(noticationCategoryCount);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(NoticationCategoryCount.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return noticationCategoryCountPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.chola.notificationcategorization.model.impl.NoticationCategoryCountModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return noticationCategoryCountPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.chola.notificationcategorization.model.impl.NoticationCategoryCountModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return noticationCategoryCountPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return noticationCategoryCountPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return noticationCategoryCountPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public NoticationCategoryCount fetchNoticationCategoryCount(long eventId) {
		return noticationCategoryCountPersistence.fetchByPrimaryKey(eventId);
	}

	/**
	 * Returns the notication category count with the primary key.
	 *
	 * @param eventId the primary key of the notication category count
	 * @return the notication category count
	 * @throws PortalException if a notication category count with the primary key could not be found
	 */
	@Override
	public NoticationCategoryCount getNoticationCategoryCount(long eventId)
		throws PortalException {
		return noticationCategoryCountPersistence.findByPrimaryKey(eventId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(noticationCategoryCountLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(NoticationCategoryCount.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("eventId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(noticationCategoryCountLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(NoticationCategoryCount.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("eventId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(noticationCategoryCountLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(NoticationCategoryCount.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("eventId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return noticationCategoryCountLocalService.deleteNoticationCategoryCount((NoticationCategoryCount)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return noticationCategoryCountPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the notication category counts.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.chola.notificationcategorization.model.impl.NoticationCategoryCountModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of notication category counts
	 * @param end the upper bound of the range of notication category counts (not inclusive)
	 * @return the range of notication category counts
	 */
	@Override
	public List<NoticationCategoryCount> getNoticationCategoryCounts(
		int start, int end) {
		return noticationCategoryCountPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of notication category counts.
	 *
	 * @return the number of notication category counts
	 */
	@Override
	public int getNoticationCategoryCountsCount() {
		return noticationCategoryCountPersistence.countAll();
	}

	/**
	 * Updates the notication category count in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param noticationCategoryCount the notication category count
	 * @return the notication category count that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public NoticationCategoryCount updateNoticationCategoryCount(
		NoticationCategoryCount noticationCategoryCount) {
		return noticationCategoryCountPersistence.update(noticationCategoryCount);
	}

	/**
	 * Returns the notication category count local service.
	 *
	 * @return the notication category count local service
	 */
	public NoticationCategoryCountLocalService getNoticationCategoryCountLocalService() {
		return noticationCategoryCountLocalService;
	}

	/**
	 * Sets the notication category count local service.
	 *
	 * @param noticationCategoryCountLocalService the notication category count local service
	 */
	public void setNoticationCategoryCountLocalService(
		NoticationCategoryCountLocalService noticationCategoryCountLocalService) {
		this.noticationCategoryCountLocalService = noticationCategoryCountLocalService;
	}

	/**
	 * Returns the notication category count persistence.
	 *
	 * @return the notication category count persistence
	 */
	public NoticationCategoryCountPersistence getNoticationCategoryCountPersistence() {
		return noticationCategoryCountPersistence;
	}

	/**
	 * Sets the notication category count persistence.
	 *
	 * @param noticationCategoryCountPersistence the notication category count persistence
	 */
	public void setNoticationCategoryCountPersistence(
		NoticationCategoryCountPersistence noticationCategoryCountPersistence) {
		this.noticationCategoryCountPersistence = noticationCategoryCountPersistence;
	}

	/**
	 * Returns the notication category count finder.
	 *
	 * @return the notication category count finder
	 */
	public NoticationCategoryCountFinder getNoticationCategoryCountFinder() {
		return noticationCategoryCountFinder;
	}

	/**
	 * Sets the notication category count finder.
	 *
	 * @param noticationCategoryCountFinder the notication category count finder
	 */
	public void setNoticationCategoryCountFinder(
		NoticationCategoryCountFinder noticationCategoryCountFinder) {
		this.noticationCategoryCountFinder = noticationCategoryCountFinder;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.chola.notificationcategorization.model.NoticationCategoryCount",
			noticationCategoryCountLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.chola.notificationcategorization.model.NoticationCategoryCount");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return NoticationCategoryCountLocalService.class.getName();
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return NoticationCategoryCount.class;
	}

	protected String getModelClassName() {
		return NoticationCategoryCount.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = noticationCategoryCountPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = NoticationCategoryCountLocalService.class)
	protected NoticationCategoryCountLocalService noticationCategoryCountLocalService;
	@BeanReference(type = NoticationCategoryCountPersistence.class)
	protected NoticationCategoryCountPersistence noticationCategoryCountPersistence;
	@BeanReference(type = NoticationCategoryCountFinder.class)
	protected NoticationCategoryCountFinder noticationCategoryCountFinder;
	@BeanReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@BeanReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@BeanReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private ClassLoader _classLoader;
	private NoticationCategoryCountLocalServiceClpInvoker _clpInvoker = new NoticationCategoryCountLocalServiceClpInvoker();
}