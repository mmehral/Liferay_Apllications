/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.branchdetails.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.branchdetails.model.product;
import com.branchdetails.model.productModel;
import com.branchdetails.model.productSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the product service. Represents a row in the &quot;branch_product&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link productModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link productImpl}.
 * </p>
 *
 * @author adms.java1
 * @see productImpl
 * @see product
 * @see productModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class productModelImpl extends BaseModelImpl<product>
	implements productModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a product model instance should use the {@link product} interface instead.
	 */
	public static final String TABLE_NAME = "branch_product";
	public static final Object[][] TABLE_COLUMNS = {
			{ "product_id", Types.BIGINT },
			{ "product_name", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("product_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("product_name", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table branch_product (product_id LONG not null primary key,product_name VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table branch_product";
	public static final String ORDER_BY_JPQL = " ORDER BY product.product_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY branch_product.product_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.branchdetails.model.product"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.branchdetails.model.product"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static product toModel(productSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		product model = new productImpl();

		model.setProduct_id(soapModel.getProduct_id());
		model.setProduct_name(soapModel.getProduct_name());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<product> toModels(productSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<product> models = new ArrayList<product>(soapModels.length);

		for (productSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.branchdetails.model.product"));

	public productModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _product_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProduct_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _product_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return product.class;
	}

	@Override
	public String getModelClassName() {
		return product.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("product_id", getProduct_id());
		attributes.put("product_name", getProduct_name());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long product_id = (Long)attributes.get("product_id");

		if (product_id != null) {
			setProduct_id(product_id);
		}

		String product_name = (String)attributes.get("product_name");

		if (product_name != null) {
			setProduct_name(product_name);
		}
	}

	@JSON
	@Override
	public long getProduct_id() {
		return _product_id;
	}

	@Override
	public void setProduct_id(long product_id) {
		_product_id = product_id;
	}

	@JSON
	@Override
	public String getProduct_name() {
		if (_product_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _product_name;
		}
	}

	@Override
	public void setProduct_name(String product_name) {
		_product_name = product_name;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			product.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public product toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (product)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		productImpl productImpl = new productImpl();

		productImpl.setProduct_id(getProduct_id());
		productImpl.setProduct_name(getProduct_name());

		productImpl.resetOriginalValues();

		return productImpl;
	}

	@Override
	public int compareTo(product product) {
		long primaryKey = product.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof product)) {
			return false;
		}

		product product = (product)obj;

		long primaryKey = product.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<product> toCacheModel() {
		productCacheModel productCacheModel = new productCacheModel();

		productCacheModel.product_id = getProduct_id();

		productCacheModel.product_name = getProduct_name();

		String product_name = productCacheModel.product_name;

		if ((product_name != null) && (product_name.length() == 0)) {
			productCacheModel.product_name = null;
		}

		return productCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{product_id=");
		sb.append(getProduct_id());
		sb.append(", product_name=");
		sb.append(getProduct_name());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.branchdetails.model.product");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>product_id</column-name><column-value><![CDATA[");
		sb.append(getProduct_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>product_name</column-name><column-value><![CDATA[");
		sb.append(getProduct_name());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = product.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			product.class
		};
	private long _product_id;
	private String _product_name;
	private product _escapedModel;
}