/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.branchdetails.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.branchdetails.model.city;
import com.branchdetails.model.cityModel;
import com.branchdetails.model.citySoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the city service. Represents a row in the &quot;branch_city&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link cityModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link cityImpl}.
 * </p>
 *
 * @author adms.java1
 * @see cityImpl
 * @see city
 * @see cityModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class cityModelImpl extends BaseModelImpl<city> implements cityModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a city model instance should use the {@link city} interface instead.
	 */
	public static final String TABLE_NAME = "branch_city";
	public static final Object[][] TABLE_COLUMNS = {
			{ "city_id", Types.BIGINT },
			{ "city_name", Types.VARCHAR },
			{ "state_id", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("city_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("city_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("state_id", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table branch_city (city_id LONG not null primary key,city_name VARCHAR(75) null,state_id LONG)";
	public static final String TABLE_SQL_DROP = "drop table branch_city";
	public static final String ORDER_BY_JPQL = " ORDER BY city.city_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY branch_city.city_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.branchdetails.model.city"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.branchdetails.model.city"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static city toModel(citySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		city model = new cityImpl();

		model.setCity_id(soapModel.getCity_id());
		model.setCity_name(soapModel.getCity_name());
		model.setState_id(soapModel.getState_id());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<city> toModels(citySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<city> models = new ArrayList<city>(soapModels.length);

		for (citySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.branchdetails.model.city"));

	public cityModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _city_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCity_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _city_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return city.class;
	}

	@Override
	public String getModelClassName() {
		return city.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("city_id", getCity_id());
		attributes.put("city_name", getCity_name());
		attributes.put("state_id", getState_id());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long city_id = (Long)attributes.get("city_id");

		if (city_id != null) {
			setCity_id(city_id);
		}

		String city_name = (String)attributes.get("city_name");

		if (city_name != null) {
			setCity_name(city_name);
		}

		Long state_id = (Long)attributes.get("state_id");

		if (state_id != null) {
			setState_id(state_id);
		}
	}

	@JSON
	@Override
	public long getCity_id() {
		return _city_id;
	}

	@Override
	public void setCity_id(long city_id) {
		_city_id = city_id;
	}

	@JSON
	@Override
	public String getCity_name() {
		if (_city_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _city_name;
		}
	}

	@Override
	public void setCity_name(String city_name) {
		_city_name = city_name;
	}

	@JSON
	@Override
	public long getState_id() {
		return _state_id;
	}

	@Override
	public void setState_id(long state_id) {
		_state_id = state_id;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			city.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public city toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (city)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		cityImpl cityImpl = new cityImpl();

		cityImpl.setCity_id(getCity_id());
		cityImpl.setCity_name(getCity_name());
		cityImpl.setState_id(getState_id());

		cityImpl.resetOriginalValues();

		return cityImpl;
	}

	@Override
	public int compareTo(city city) {
		long primaryKey = city.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof city)) {
			return false;
		}

		city city = (city)obj;

		long primaryKey = city.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<city> toCacheModel() {
		cityCacheModel cityCacheModel = new cityCacheModel();

		cityCacheModel.city_id = getCity_id();

		cityCacheModel.city_name = getCity_name();

		String city_name = cityCacheModel.city_name;

		if ((city_name != null) && (city_name.length() == 0)) {
			cityCacheModel.city_name = null;
		}

		cityCacheModel.state_id = getState_id();

		return cityCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{city_id=");
		sb.append(getCity_id());
		sb.append(", city_name=");
		sb.append(getCity_name());
		sb.append(", state_id=");
		sb.append(getState_id());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.branchdetails.model.city");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>city_id</column-name><column-value><![CDATA[");
		sb.append(getCity_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>city_name</column-name><column-value><![CDATA[");
		sb.append(getCity_name());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>state_id</column-name><column-value><![CDATA[");
		sb.append(getState_id());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = city.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			city.class
		};
	private long _city_id;
	private String _city_name;
	private long _state_id;
	private city _escapedModel;
}