/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.chola.personalisedparameters.service.base;

import aQute.bnd.annotation.ProviderType;

import com.chola.personalisedparameters.model.bsopdetails;
import com.chola.personalisedparameters.service.bsopdetailsLocalService;
import com.chola.personalisedparameters.service.persistence.bsopdetailsFinder;
import com.chola.personalisedparameters.service.persistence.bsopdetailsPersistence;
import com.chola.personalisedparameters.service.persistence.bsoppathPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the bsopdetails local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.chola.personalisedparameters.service.impl.bsopdetailsLocalServiceImpl}.
 * </p>
 *
 * @author cloverliferay01
 * @see com.chola.personalisedparameters.service.impl.bsopdetailsLocalServiceImpl
 * @see com.chola.personalisedparameters.service.bsopdetailsLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class bsopdetailsLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements bsopdetailsLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.chola.personalisedparameters.service.bsopdetailsLocalServiceUtil} to access the bsopdetails local service.
	 */

	/**
	 * Adds the bsopdetails to the database. Also notifies the appropriate model listeners.
	 *
	 * @param bsopdetails the bsopdetails
	 * @return the bsopdetails that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public bsopdetails addbsopdetails(bsopdetails bsopdetails) {
		bsopdetails.setNew(true);

		return bsopdetailsPersistence.update(bsopdetails);
	}

	/**
	 * Creates a new bsopdetails with the primary key. Does not add the bsopdetails to the database.
	 *
	 * @param id the primary key for the new bsopdetails
	 * @return the new bsopdetails
	 */
	@Override
	public bsopdetails createbsopdetails(long id) {
		return bsopdetailsPersistence.create(id);
	}

	/**
	 * Deletes the bsopdetails with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param id the primary key of the bsopdetails
	 * @return the bsopdetails that was removed
	 * @throws PortalException if a bsopdetails with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public bsopdetails deletebsopdetails(long id) throws PortalException {
		return bsopdetailsPersistence.remove(id);
	}

	/**
	 * Deletes the bsopdetails from the database. Also notifies the appropriate model listeners.
	 *
	 * @param bsopdetails the bsopdetails
	 * @return the bsopdetails that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public bsopdetails deletebsopdetails(bsopdetails bsopdetails) {
		return bsopdetailsPersistence.remove(bsopdetails);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(bsopdetails.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return bsopdetailsPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.chola.personalisedparameters.model.impl.bsopdetailsModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return bsopdetailsPersistence.findWithDynamicQuery(dynamicQuery, start,
			end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.chola.personalisedparameters.model.impl.bsopdetailsModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return bsopdetailsPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return bsopdetailsPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return bsopdetailsPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public bsopdetails fetchbsopdetails(long id) {
		return bsopdetailsPersistence.fetchByPrimaryKey(id);
	}

	/**
	 * Returns the bsopdetails with the primary key.
	 *
	 * @param id the primary key of the bsopdetails
	 * @return the bsopdetails
	 * @throws PortalException if a bsopdetails with the primary key could not be found
	 */
	@Override
	public bsopdetails getbsopdetails(long id) throws PortalException {
		return bsopdetailsPersistence.findByPrimaryKey(id);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(bsopdetailsLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(bsopdetails.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(bsopdetailsLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(bsopdetails.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(bsopdetailsLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(bsopdetails.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return bsopdetailsLocalService.deletebsopdetails((bsopdetails)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return bsopdetailsPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the bsopdetailses.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.chola.personalisedparameters.model.impl.bsopdetailsModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of bsopdetailses
	 * @param end the upper bound of the range of bsopdetailses (not inclusive)
	 * @return the range of bsopdetailses
	 */
	@Override
	public List<bsopdetails> getbsopdetailses(int start, int end) {
		return bsopdetailsPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of bsopdetailses.
	 *
	 * @return the number of bsopdetailses
	 */
	@Override
	public int getbsopdetailsesCount() {
		return bsopdetailsPersistence.countAll();
	}

	/**
	 * Updates the bsopdetails in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param bsopdetails the bsopdetails
	 * @return the bsopdetails that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public bsopdetails updatebsopdetails(bsopdetails bsopdetails) {
		return bsopdetailsPersistence.update(bsopdetails);
	}

	/**
	 * Returns the bsopdetails local service.
	 *
	 * @return the bsopdetails local service
	 */
	public bsopdetailsLocalService getbsopdetailsLocalService() {
		return bsopdetailsLocalService;
	}

	/**
	 * Sets the bsopdetails local service.
	 *
	 * @param bsopdetailsLocalService the bsopdetails local service
	 */
	public void setbsopdetailsLocalService(
		bsopdetailsLocalService bsopdetailsLocalService) {
		this.bsopdetailsLocalService = bsopdetailsLocalService;
	}

	/**
	 * Returns the bsopdetails persistence.
	 *
	 * @return the bsopdetails persistence
	 */
	public bsopdetailsPersistence getbsopdetailsPersistence() {
		return bsopdetailsPersistence;
	}

	/**
	 * Sets the bsopdetails persistence.
	 *
	 * @param bsopdetailsPersistence the bsopdetails persistence
	 */
	public void setbsopdetailsPersistence(
		bsopdetailsPersistence bsopdetailsPersistence) {
		this.bsopdetailsPersistence = bsopdetailsPersistence;
	}

	/**
	 * Returns the bsopdetails finder.
	 *
	 * @return the bsopdetails finder
	 */
	public bsopdetailsFinder getbsopdetailsFinder() {
		return bsopdetailsFinder;
	}

	/**
	 * Sets the bsopdetails finder.
	 *
	 * @param bsopdetailsFinder the bsopdetails finder
	 */
	public void setbsopdetailsFinder(bsopdetailsFinder bsopdetailsFinder) {
		this.bsopdetailsFinder = bsopdetailsFinder;
	}

	/**
	 * Returns the bsoppath local service.
	 *
	 * @return the bsoppath local service
	 */
	public com.chola.personalisedparameters.service.bsoppathLocalService getbsoppathLocalService() {
		return bsoppathLocalService;
	}

	/**
	 * Sets the bsoppath local service.
	 *
	 * @param bsoppathLocalService the bsoppath local service
	 */
	public void setbsoppathLocalService(
		com.chola.personalisedparameters.service.bsoppathLocalService bsoppathLocalService) {
		this.bsoppathLocalService = bsoppathLocalService;
	}

	/**
	 * Returns the bsoppath persistence.
	 *
	 * @return the bsoppath persistence
	 */
	public bsoppathPersistence getbsoppathPersistence() {
		return bsoppathPersistence;
	}

	/**
	 * Sets the bsoppath persistence.
	 *
	 * @param bsoppathPersistence the bsoppath persistence
	 */
	public void setbsoppathPersistence(bsoppathPersistence bsoppathPersistence) {
		this.bsoppathPersistence = bsoppathPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.chola.personalisedparameters.model.bsopdetails",
			bsopdetailsLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.chola.personalisedparameters.model.bsopdetails");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return bsopdetailsLocalService.class.getName();
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return bsopdetails.class;
	}

	protected String getModelClassName() {
		return bsopdetails.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = bsopdetailsPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = bsopdetailsLocalService.class)
	protected bsopdetailsLocalService bsopdetailsLocalService;
	@BeanReference(type = bsopdetailsPersistence.class)
	protected bsopdetailsPersistence bsopdetailsPersistence;
	@BeanReference(type = bsopdetailsFinder.class)
	protected bsopdetailsFinder bsopdetailsFinder;
	@BeanReference(type = com.chola.personalisedparameters.service.bsoppathLocalService.class)
	protected com.chola.personalisedparameters.service.bsoppathLocalService bsoppathLocalService;
	@BeanReference(type = bsoppathPersistence.class)
	protected bsoppathPersistence bsoppathPersistence;
	@BeanReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@BeanReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@BeanReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private ClassLoader _classLoader;
	private bsopdetailsLocalServiceClpInvoker _clpInvoker = new bsopdetailsLocalServiceClpInvoker();
}