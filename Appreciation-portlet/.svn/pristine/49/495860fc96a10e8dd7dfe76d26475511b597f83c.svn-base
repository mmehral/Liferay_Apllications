/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.chola.appcorner.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.chola.appcorner.model.post;
import com.chola.appcorner.model.postModel;
import com.chola.appcorner.model.postSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the post service. Represents a row in the &quot;appcorner_post&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link postModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link postImpl}.
 * </p>
 *
 * @author CloverLiferay02
 * @see postImpl
 * @see post
 * @see postModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class postModelImpl extends BaseModelImpl<post> implements postModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a post model instance should use the {@link post} interface instead.
	 */
	public static final String TABLE_NAME = "appcorner_post";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "appTo", Types.BIGINT },
			{ "appBy", Types.BIGINT },
			{ "appMessage", Types.VARCHAR },
			{ "appDate", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("appTo", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("appBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("appMessage", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("appDate", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table appcorner_post (id_ LONG not null primary key,appTo LONG,appBy LONG,appMessage TEXT null,appDate VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table appcorner_post";
	public static final String ORDER_BY_JPQL = " ORDER BY post.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY appcorner_post.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.chola.appcorner.model.post"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.chola.appcorner.model.post"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.chola.appcorner.model.post"),
			true);
	public static final long APPTO_COLUMN_BITMASK = 1L;
	public static final long ID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static post toModel(postSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		post model = new postImpl();

		model.setId(soapModel.getId());
		model.setAppTo(soapModel.getAppTo());
		model.setAppBy(soapModel.getAppBy());
		model.setAppMessage(soapModel.getAppMessage());
		model.setAppDate(soapModel.getAppDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<post> toModels(postSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<post> models = new ArrayList<post>(soapModels.length);

		for (postSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.chola.appcorner.model.post"));

	public postModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return post.class;
	}

	@Override
	public String getModelClassName() {
		return post.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("appTo", getAppTo());
		attributes.put("appBy", getAppBy());
		attributes.put("appMessage", getAppMessage());
		attributes.put("appDate", getAppDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long appTo = (Long)attributes.get("appTo");

		if (appTo != null) {
			setAppTo(appTo);
		}

		Long appBy = (Long)attributes.get("appBy");

		if (appBy != null) {
			setAppBy(appBy);
		}

		String appMessage = (String)attributes.get("appMessage");

		if (appMessage != null) {
			setAppMessage(appMessage);
		}

		String appDate = (String)attributes.get("appDate");

		if (appDate != null) {
			setAppDate(appDate);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public long getAppTo() {
		return _appTo;
	}

	@Override
	public void setAppTo(long appTo) {
		_columnBitmask |= APPTO_COLUMN_BITMASK;

		if (!_setOriginalAppTo) {
			_setOriginalAppTo = true;

			_originalAppTo = _appTo;
		}

		_appTo = appTo;
	}

	public long getOriginalAppTo() {
		return _originalAppTo;
	}

	@JSON
	@Override
	public long getAppBy() {
		return _appBy;
	}

	@Override
	public void setAppBy(long appBy) {
		_appBy = appBy;
	}

	@JSON
	@Override
	public String getAppMessage() {
		if (_appMessage == null) {
			return StringPool.BLANK;
		}
		else {
			return _appMessage;
		}
	}

	@Override
	public void setAppMessage(String appMessage) {
		_appMessage = appMessage;
	}

	@JSON
	@Override
	public String getAppDate() {
		if (_appDate == null) {
			return StringPool.BLANK;
		}
		else {
			return _appDate;
		}
	}

	@Override
	public void setAppDate(String appDate) {
		_appDate = appDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			post.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public post toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (post)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		postImpl postImpl = new postImpl();

		postImpl.setId(getId());
		postImpl.setAppTo(getAppTo());
		postImpl.setAppBy(getAppBy());
		postImpl.setAppMessage(getAppMessage());
		postImpl.setAppDate(getAppDate());

		postImpl.resetOriginalValues();

		return postImpl;
	}

	@Override
	public int compareTo(post post) {
		long primaryKey = post.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof post)) {
			return false;
		}

		post post = (post)obj;

		long primaryKey = post.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		postModelImpl postModelImpl = this;

		postModelImpl._originalAppTo = postModelImpl._appTo;

		postModelImpl._setOriginalAppTo = false;

		postModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<post> toCacheModel() {
		postCacheModel postCacheModel = new postCacheModel();

		postCacheModel.id = getId();

		postCacheModel.appTo = getAppTo();

		postCacheModel.appBy = getAppBy();

		postCacheModel.appMessage = getAppMessage();

		String appMessage = postCacheModel.appMessage;

		if ((appMessage != null) && (appMessage.length() == 0)) {
			postCacheModel.appMessage = null;
		}

		postCacheModel.appDate = getAppDate();

		String appDate = postCacheModel.appDate;

		if ((appDate != null) && (appDate.length() == 0)) {
			postCacheModel.appDate = null;
		}

		return postCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", appTo=");
		sb.append(getAppTo());
		sb.append(", appBy=");
		sb.append(getAppBy());
		sb.append(", appMessage=");
		sb.append(getAppMessage());
		sb.append(", appDate=");
		sb.append(getAppDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.chola.appcorner.model.post");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>appTo</column-name><column-value><![CDATA[");
		sb.append(getAppTo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>appBy</column-name><column-value><![CDATA[");
		sb.append(getAppBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>appMessage</column-name><column-value><![CDATA[");
		sb.append(getAppMessage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>appDate</column-name><column-value><![CDATA[");
		sb.append(getAppDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = post.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			post.class
		};
	private long _id;
	private long _appTo;
	private long _originalAppTo;
	private boolean _setOriginalAppTo;
	private long _appBy;
	private String _appMessage;
	private String _appDate;
	private long _columnBitmask;
	private post _escapedModel;
}