/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.chola.popularlinks.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.chola.popularlinks.model.popularlinks;
import com.chola.popularlinks.model.popularlinksModel;
import com.chola.popularlinks.model.popularlinksSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the popularlinks service. Represents a row in the &quot;url_popularlinks&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link popularlinksModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link popularlinksImpl}.
 * </p>
 *
 * @author adms.java1
 * @see popularlinksImpl
 * @see popularlinks
 * @see popularlinksModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class popularlinksModelImpl extends BaseModelImpl<popularlinks>
	implements popularlinksModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a popularlinks model instance should use the {@link popularlinks} interface instead.
	 */
	public static final String TABLE_NAME = "url_popularlinks";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "userid", Types.BIGINT },
			{ "url", Types.VARCHAR },
			{ "tag", Types.VARCHAR },
			{ "count", Types.BIGINT },
			{ "flag", Types.INTEGER },
			{ "createDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userid", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("url", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tag", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("count", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("flag", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table url_popularlinks (id_ LONG not null primary key,userid LONG,url VARCHAR(75) null,tag VARCHAR(75) null,count LONG,flag INTEGER,createDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table url_popularlinks";
	public static final String ORDER_BY_JPQL = " ORDER BY popularlinks.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY url_popularlinks.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.chola.popularlinks.model.popularlinks"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.chola.popularlinks.model.popularlinks"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static popularlinks toModel(popularlinksSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		popularlinks model = new popularlinksImpl();

		model.setId(soapModel.getId());
		model.setUserid(soapModel.getUserid());
		model.setUrl(soapModel.getUrl());
		model.setTag(soapModel.getTag());
		model.setCount(soapModel.getCount());
		model.setFlag(soapModel.getFlag());
		model.setCreateDate(soapModel.getCreateDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<popularlinks> toModels(popularlinksSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<popularlinks> models = new ArrayList<popularlinks>(soapModels.length);

		for (popularlinksSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.chola.popularlinks.model.popularlinks"));

	public popularlinksModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return popularlinks.class;
	}

	@Override
	public String getModelClassName() {
		return popularlinks.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("userid", getUserid());
		attributes.put("url", getUrl());
		attributes.put("tag", getTag());
		attributes.put("count", getCount());
		attributes.put("flag", getFlag());
		attributes.put("createDate", getCreateDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long userid = (Long)attributes.get("userid");

		if (userid != null) {
			setUserid(userid);
		}

		String url = (String)attributes.get("url");

		if (url != null) {
			setUrl(url);
		}

		String tag = (String)attributes.get("tag");

		if (tag != null) {
			setTag(tag);
		}

		Long count = (Long)attributes.get("count");

		if (count != null) {
			setCount(count);
		}

		Integer flag = (Integer)attributes.get("flag");

		if (flag != null) {
			setFlag(flag);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public long getUserid() {
		return _userid;
	}

	@Override
	public void setUserid(long userid) {
		_userid = userid;
	}

	@JSON
	@Override
	public String getUrl() {
		if (_url == null) {
			return StringPool.BLANK;
		}
		else {
			return _url;
		}
	}

	@Override
	public void setUrl(String url) {
		_url = url;
	}

	@JSON
	@Override
	public String getTag() {
		if (_tag == null) {
			return StringPool.BLANK;
		}
		else {
			return _tag;
		}
	}

	@Override
	public void setTag(String tag) {
		_tag = tag;
	}

	@JSON
	@Override
	public long getCount() {
		return _count;
	}

	@Override
	public void setCount(long count) {
		_count = count;
	}

	@JSON
	@Override
	public int getFlag() {
		return _flag;
	}

	@Override
	public void setFlag(int flag) {
		_flag = flag;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			popularlinks.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public popularlinks toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (popularlinks)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		popularlinksImpl popularlinksImpl = new popularlinksImpl();

		popularlinksImpl.setId(getId());
		popularlinksImpl.setUserid(getUserid());
		popularlinksImpl.setUrl(getUrl());
		popularlinksImpl.setTag(getTag());
		popularlinksImpl.setCount(getCount());
		popularlinksImpl.setFlag(getFlag());
		popularlinksImpl.setCreateDate(getCreateDate());

		popularlinksImpl.resetOriginalValues();

		return popularlinksImpl;
	}

	@Override
	public int compareTo(popularlinks popularlinks) {
		long primaryKey = popularlinks.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof popularlinks)) {
			return false;
		}

		popularlinks popularlinks = (popularlinks)obj;

		long primaryKey = popularlinks.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<popularlinks> toCacheModel() {
		popularlinksCacheModel popularlinksCacheModel = new popularlinksCacheModel();

		popularlinksCacheModel.id = getId();

		popularlinksCacheModel.userid = getUserid();

		popularlinksCacheModel.url = getUrl();

		String url = popularlinksCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			popularlinksCacheModel.url = null;
		}

		popularlinksCacheModel.tag = getTag();

		String tag = popularlinksCacheModel.tag;

		if ((tag != null) && (tag.length() == 0)) {
			popularlinksCacheModel.tag = null;
		}

		popularlinksCacheModel.count = getCount();

		popularlinksCacheModel.flag = getFlag();

		Date createDate = getCreateDate();

		if (createDate != null) {
			popularlinksCacheModel.createDate = createDate.getTime();
		}
		else {
			popularlinksCacheModel.createDate = Long.MIN_VALUE;
		}

		return popularlinksCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", userid=");
		sb.append(getUserid());
		sb.append(", url=");
		sb.append(getUrl());
		sb.append(", tag=");
		sb.append(getTag());
		sb.append(", count=");
		sb.append(getCount());
		sb.append(", flag=");
		sb.append(getFlag());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.chola.popularlinks.model.popularlinks");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userid</column-name><column-value><![CDATA[");
		sb.append(getUserid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>url</column-name><column-value><![CDATA[");
		sb.append(getUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tag</column-name><column-value><![CDATA[");
		sb.append(getTag());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>count</column-name><column-value><![CDATA[");
		sb.append(getCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>flag</column-name><column-value><![CDATA[");
		sb.append(getFlag());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = popularlinks.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			popularlinks.class
		};
	private long _id;
	private long _userid;
	private String _url;
	private String _tag;
	private long _count;
	private int _flag;
	private Date _createDate;
	private popularlinks _escapedModel;
}