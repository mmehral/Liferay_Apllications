/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.chola.popularlinks.service.base;

import aQute.bnd.annotation.ProviderType;

import com.chola.popularlinks.model.externallinks;
import com.chola.popularlinks.service.externallinksLocalService;
import com.chola.popularlinks.service.persistence.externallinksPersistence;
import com.chola.popularlinks.service.persistence.popularlinksFinder;
import com.chola.popularlinks.service.persistence.popularlinksPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the externallinks local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.chola.popularlinks.service.impl.externallinksLocalServiceImpl}.
 * </p>
 *
 * @author adms.java1
 * @see com.chola.popularlinks.service.impl.externallinksLocalServiceImpl
 * @see com.chola.popularlinks.service.externallinksLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class externallinksLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements externallinksLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.chola.popularlinks.service.externallinksLocalServiceUtil} to access the externallinks local service.
	 */

	/**
	 * Adds the externallinks to the database. Also notifies the appropriate model listeners.
	 *
	 * @param externallinks the externallinks
	 * @return the externallinks that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public externallinks addexternallinks(externallinks externallinks) {
		externallinks.setNew(true);

		return externallinksPersistence.update(externallinks);
	}

	/**
	 * Creates a new externallinks with the primary key. Does not add the externallinks to the database.
	 *
	 * @param id the primary key for the new externallinks
	 * @return the new externallinks
	 */
	@Override
	public externallinks createexternallinks(long id) {
		return externallinksPersistence.create(id);
	}

	/**
	 * Deletes the externallinks with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param id the primary key of the externallinks
	 * @return the externallinks that was removed
	 * @throws PortalException if a externallinks with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public externallinks deleteexternallinks(long id) throws PortalException {
		return externallinksPersistence.remove(id);
	}

	/**
	 * Deletes the externallinks from the database. Also notifies the appropriate model listeners.
	 *
	 * @param externallinks the externallinks
	 * @return the externallinks that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public externallinks deleteexternallinks(externallinks externallinks) {
		return externallinksPersistence.remove(externallinks);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(externallinks.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return externallinksPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.chola.popularlinks.model.impl.externallinksModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return externallinksPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.chola.popularlinks.model.impl.externallinksModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return externallinksPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return externallinksPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return externallinksPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public externallinks fetchexternallinks(long id) {
		return externallinksPersistence.fetchByPrimaryKey(id);
	}

	/**
	 * Returns the externallinks with the primary key.
	 *
	 * @param id the primary key of the externallinks
	 * @return the externallinks
	 * @throws PortalException if a externallinks with the primary key could not be found
	 */
	@Override
	public externallinks getexternallinks(long id) throws PortalException {
		return externallinksPersistence.findByPrimaryKey(id);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(externallinksLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(externallinks.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(externallinksLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(externallinks.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(externallinksLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(externallinks.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return externallinksLocalService.deleteexternallinks((externallinks)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return externallinksPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the externallinkses.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.chola.popularlinks.model.impl.externallinksModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of externallinkses
	 * @param end the upper bound of the range of externallinkses (not inclusive)
	 * @return the range of externallinkses
	 */
	@Override
	public List<externallinks> getexternallinkses(int start, int end) {
		return externallinksPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of externallinkses.
	 *
	 * @return the number of externallinkses
	 */
	@Override
	public int getexternallinksesCount() {
		return externallinksPersistence.countAll();
	}

	/**
	 * Updates the externallinks in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param externallinks the externallinks
	 * @return the externallinks that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public externallinks updateexternallinks(externallinks externallinks) {
		return externallinksPersistence.update(externallinks);
	}

	/**
	 * Returns the externallinks local service.
	 *
	 * @return the externallinks local service
	 */
	public externallinksLocalService getexternallinksLocalService() {
		return externallinksLocalService;
	}

	/**
	 * Sets the externallinks local service.
	 *
	 * @param externallinksLocalService the externallinks local service
	 */
	public void setexternallinksLocalService(
		externallinksLocalService externallinksLocalService) {
		this.externallinksLocalService = externallinksLocalService;
	}

	/**
	 * Returns the externallinks persistence.
	 *
	 * @return the externallinks persistence
	 */
	public externallinksPersistence getexternallinksPersistence() {
		return externallinksPersistence;
	}

	/**
	 * Sets the externallinks persistence.
	 *
	 * @param externallinksPersistence the externallinks persistence
	 */
	public void setexternallinksPersistence(
		externallinksPersistence externallinksPersistence) {
		this.externallinksPersistence = externallinksPersistence;
	}

	/**
	 * Returns the popularlinks local service.
	 *
	 * @return the popularlinks local service
	 */
	public com.chola.popularlinks.service.popularlinksLocalService getpopularlinksLocalService() {
		return popularlinksLocalService;
	}

	/**
	 * Sets the popularlinks local service.
	 *
	 * @param popularlinksLocalService the popularlinks local service
	 */
	public void setpopularlinksLocalService(
		com.chola.popularlinks.service.popularlinksLocalService popularlinksLocalService) {
		this.popularlinksLocalService = popularlinksLocalService;
	}

	/**
	 * Returns the popularlinks persistence.
	 *
	 * @return the popularlinks persistence
	 */
	public popularlinksPersistence getpopularlinksPersistence() {
		return popularlinksPersistence;
	}

	/**
	 * Sets the popularlinks persistence.
	 *
	 * @param popularlinksPersistence the popularlinks persistence
	 */
	public void setpopularlinksPersistence(
		popularlinksPersistence popularlinksPersistence) {
		this.popularlinksPersistence = popularlinksPersistence;
	}

	/**
	 * Returns the popularlinks finder.
	 *
	 * @return the popularlinks finder
	 */
	public popularlinksFinder getpopularlinksFinder() {
		return popularlinksFinder;
	}

	/**
	 * Sets the popularlinks finder.
	 *
	 * @param popularlinksFinder the popularlinks finder
	 */
	public void setpopularlinksFinder(popularlinksFinder popularlinksFinder) {
		this.popularlinksFinder = popularlinksFinder;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.chola.popularlinks.model.externallinks",
			externallinksLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.chola.popularlinks.model.externallinks");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return externallinksLocalService.class.getName();
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return externallinks.class;
	}

	protected String getModelClassName() {
		return externallinks.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = externallinksPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = externallinksLocalService.class)
	protected externallinksLocalService externallinksLocalService;
	@BeanReference(type = externallinksPersistence.class)
	protected externallinksPersistence externallinksPersistence;
	@BeanReference(type = com.chola.popularlinks.service.popularlinksLocalService.class)
	protected com.chola.popularlinks.service.popularlinksLocalService popularlinksLocalService;
	@BeanReference(type = popularlinksPersistence.class)
	protected popularlinksPersistence popularlinksPersistence;
	@BeanReference(type = popularlinksFinder.class)
	protected popularlinksFinder popularlinksFinder;
	@BeanReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@BeanReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@BeanReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private ClassLoader _classLoader;
	private externallinksLocalServiceClpInvoker _clpInvoker = new externallinksLocalServiceClpInvoker();
}