/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.chola.swagatam.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.chola.swagatam.model.swagatampath;
import com.chola.swagatam.model.swagatampathModel;
import com.chola.swagatam.model.swagatampathSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the swagatampath service. Represents a row in the &quot;cholas_swagatampath&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link swagatampathModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link swagatampathImpl}.
 * </p>
 *
 * @author CloverLiferay02
 * @see swagatampathImpl
 * @see swagatampath
 * @see swagatampathModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class swagatampathModelImpl extends BaseModelImpl<swagatampath>
	implements swagatampathModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a swagatampath model instance should use the {@link swagatampath} interface instead.
	 */
	public static final String TABLE_NAME = "cholas_swagatampath";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "inductionid", Types.VARCHAR },
			{ "videoPath", Types.VARCHAR },
			{ "videoTitle", Types.VARCHAR },
			{ "videoDesc", Types.VARCHAR },
			{ "createdDate", Types.TIMESTAMP },
			{ "createdBy", Types.VARCHAR },
			{ "updatedDate", Types.TIMESTAMP },
			{ "updatedBy", Types.VARCHAR },
			{ "flag", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("inductionid", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("videoPath", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("videoTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("videoDesc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createdBy", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("updatedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("updatedBy", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("flag", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table cholas_swagatampath (id_ LONG not null primary key,inductionid VARCHAR(75) null,videoPath TEXT null,videoTitle VARCHAR(200) null,videoDesc VARCHAR(500) null,createdDate DATE null,createdBy VARCHAR(75) null,updatedDate DATE null,updatedBy VARCHAR(75) null,flag VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table cholas_swagatampath";
	public static final String ORDER_BY_JPQL = " ORDER BY swagatampath.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY cholas_swagatampath.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.chola.swagatam.model.swagatampath"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.chola.swagatam.model.swagatampath"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.chola.swagatam.model.swagatampath"),
			true);
	public static final long INDUCTIONID_COLUMN_BITMASK = 1L;
	public static final long ID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static swagatampath toModel(swagatampathSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		swagatampath model = new swagatampathImpl();

		model.setId(soapModel.getId());
		model.setInductionid(soapModel.getInductionid());
		model.setVideoPath(soapModel.getVideoPath());
		model.setVideoTitle(soapModel.getVideoTitle());
		model.setVideoDesc(soapModel.getVideoDesc());
		model.setCreatedDate(soapModel.getCreatedDate());
		model.setCreatedBy(soapModel.getCreatedBy());
		model.setUpdatedDate(soapModel.getUpdatedDate());
		model.setUpdatedBy(soapModel.getUpdatedBy());
		model.setFlag(soapModel.getFlag());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<swagatampath> toModels(swagatampathSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<swagatampath> models = new ArrayList<swagatampath>(soapModels.length);

		for (swagatampathSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.chola.swagatam.model.swagatampath"));

	public swagatampathModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return swagatampath.class;
	}

	@Override
	public String getModelClassName() {
		return swagatampath.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("inductionid", getInductionid());
		attributes.put("videoPath", getVideoPath());
		attributes.put("videoTitle", getVideoTitle());
		attributes.put("videoDesc", getVideoDesc());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("updatedDate", getUpdatedDate());
		attributes.put("updatedBy", getUpdatedBy());
		attributes.put("flag", getFlag());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String inductionid = (String)attributes.get("inductionid");

		if (inductionid != null) {
			setInductionid(inductionid);
		}

		String videoPath = (String)attributes.get("videoPath");

		if (videoPath != null) {
			setVideoPath(videoPath);
		}

		String videoTitle = (String)attributes.get("videoTitle");

		if (videoTitle != null) {
			setVideoTitle(videoTitle);
		}

		String videoDesc = (String)attributes.get("videoDesc");

		if (videoDesc != null) {
			setVideoDesc(videoDesc);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String createdBy = (String)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Date updatedDate = (Date)attributes.get("updatedDate");

		if (updatedDate != null) {
			setUpdatedDate(updatedDate);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}

		String flag = (String)attributes.get("flag");

		if (flag != null) {
			setFlag(flag);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public String getInductionid() {
		if (_inductionid == null) {
			return StringPool.BLANK;
		}
		else {
			return _inductionid;
		}
	}

	@Override
	public void setInductionid(String inductionid) {
		_columnBitmask |= INDUCTIONID_COLUMN_BITMASK;

		if (_originalInductionid == null) {
			_originalInductionid = _inductionid;
		}

		_inductionid = inductionid;
	}

	public String getOriginalInductionid() {
		return GetterUtil.getString(_originalInductionid);
	}

	@JSON
	@Override
	public String getVideoPath() {
		if (_videoPath == null) {
			return StringPool.BLANK;
		}
		else {
			return _videoPath;
		}
	}

	@Override
	public void setVideoPath(String videoPath) {
		_videoPath = videoPath;
	}

	@JSON
	@Override
	public String getVideoTitle() {
		if (_videoTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _videoTitle;
		}
	}

	@Override
	public void setVideoTitle(String videoTitle) {
		_videoTitle = videoTitle;
	}

	@JSON
	@Override
	public String getVideoDesc() {
		if (_videoDesc == null) {
			return StringPool.BLANK;
		}
		else {
			return _videoDesc;
		}
	}

	@Override
	public void setVideoDesc(String videoDesc) {
		_videoDesc = videoDesc;
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@JSON
	@Override
	public String getCreatedBy() {
		if (_createdBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _createdBy;
		}
	}

	@Override
	public void setCreatedBy(String createdBy) {
		_createdBy = createdBy;
	}

	@JSON
	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		_updatedDate = updatedDate;
	}

	@JSON
	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	@JSON
	@Override
	public String getFlag() {
		if (_flag == null) {
			return StringPool.BLANK;
		}
		else {
			return _flag;
		}
	}

	@Override
	public void setFlag(String flag) {
		_flag = flag;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			swagatampath.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public swagatampath toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (swagatampath)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		swagatampathImpl swagatampathImpl = new swagatampathImpl();

		swagatampathImpl.setId(getId());
		swagatampathImpl.setInductionid(getInductionid());
		swagatampathImpl.setVideoPath(getVideoPath());
		swagatampathImpl.setVideoTitle(getVideoTitle());
		swagatampathImpl.setVideoDesc(getVideoDesc());
		swagatampathImpl.setCreatedDate(getCreatedDate());
		swagatampathImpl.setCreatedBy(getCreatedBy());
		swagatampathImpl.setUpdatedDate(getUpdatedDate());
		swagatampathImpl.setUpdatedBy(getUpdatedBy());
		swagatampathImpl.setFlag(getFlag());

		swagatampathImpl.resetOriginalValues();

		return swagatampathImpl;
	}

	@Override
	public int compareTo(swagatampath swagatampath) {
		long primaryKey = swagatampath.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof swagatampath)) {
			return false;
		}

		swagatampath swagatampath = (swagatampath)obj;

		long primaryKey = swagatampath.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		swagatampathModelImpl swagatampathModelImpl = this;

		swagatampathModelImpl._originalInductionid = swagatampathModelImpl._inductionid;

		swagatampathModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<swagatampath> toCacheModel() {
		swagatampathCacheModel swagatampathCacheModel = new swagatampathCacheModel();

		swagatampathCacheModel.id = getId();

		swagatampathCacheModel.inductionid = getInductionid();

		String inductionid = swagatampathCacheModel.inductionid;

		if ((inductionid != null) && (inductionid.length() == 0)) {
			swagatampathCacheModel.inductionid = null;
		}

		swagatampathCacheModel.videoPath = getVideoPath();

		String videoPath = swagatampathCacheModel.videoPath;

		if ((videoPath != null) && (videoPath.length() == 0)) {
			swagatampathCacheModel.videoPath = null;
		}

		swagatampathCacheModel.videoTitle = getVideoTitle();

		String videoTitle = swagatampathCacheModel.videoTitle;

		if ((videoTitle != null) && (videoTitle.length() == 0)) {
			swagatampathCacheModel.videoTitle = null;
		}

		swagatampathCacheModel.videoDesc = getVideoDesc();

		String videoDesc = swagatampathCacheModel.videoDesc;

		if ((videoDesc != null) && (videoDesc.length() == 0)) {
			swagatampathCacheModel.videoDesc = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			swagatampathCacheModel.createdDate = createdDate.getTime();
		}
		else {
			swagatampathCacheModel.createdDate = Long.MIN_VALUE;
		}

		swagatampathCacheModel.createdBy = getCreatedBy();

		String createdBy = swagatampathCacheModel.createdBy;

		if ((createdBy != null) && (createdBy.length() == 0)) {
			swagatampathCacheModel.createdBy = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			swagatampathCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			swagatampathCacheModel.updatedDate = Long.MIN_VALUE;
		}

		swagatampathCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = swagatampathCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			swagatampathCacheModel.updatedBy = null;
		}

		swagatampathCacheModel.flag = getFlag();

		String flag = swagatampathCacheModel.flag;

		if ((flag != null) && (flag.length() == 0)) {
			swagatampathCacheModel.flag = null;
		}

		return swagatampathCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", inductionid=");
		sb.append(getInductionid());
		sb.append(", videoPath=");
		sb.append(getVideoPath());
		sb.append(", videoTitle=");
		sb.append(getVideoTitle());
		sb.append(", videoDesc=");
		sb.append(getVideoDesc());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", updatedDate=");
		sb.append(getUpdatedDate());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append(", flag=");
		sb.append(getFlag());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.chola.swagatam.model.swagatampath");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inductionid</column-name><column-value><![CDATA[");
		sb.append(getInductionid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>videoPath</column-name><column-value><![CDATA[");
		sb.append(getVideoPath());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>videoTitle</column-name><column-value><![CDATA[");
		sb.append(getVideoTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>videoDesc</column-name><column-value><![CDATA[");
		sb.append(getVideoDesc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedDate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>flag</column-name><column-value><![CDATA[");
		sb.append(getFlag());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = swagatampath.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			swagatampath.class
		};
	private long _id;
	private String _inductionid;
	private String _originalInductionid;
	private String _videoPath;
	private String _videoTitle;
	private String _videoDesc;
	private Date _createdDate;
	private String _createdBy;
	private Date _updatedDate;
	private String _updatedBy;
	private String _flag;
	private long _columnBitmask;
	private swagatampath _escapedModel;
}