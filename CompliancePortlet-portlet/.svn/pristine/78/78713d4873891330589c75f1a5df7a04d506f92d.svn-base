/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.service.compliance.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.service.compliance.model.compliance;
import com.service.compliance.model.complianceModel;
import com.service.compliance.model.complianceSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the compliance service. Represents a row in the &quot;cholacompliance_compliance&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link complianceModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link complianceImpl}.
 * </p>
 *
 * @author adms.java1
 * @see complianceImpl
 * @see compliance
 * @see complianceModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class complianceModelImpl extends BaseModelImpl<compliance>
	implements complianceModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a compliance model instance should use the {@link compliance} interface instead.
	 */
	public static final String TABLE_NAME = "cholacompliance_compliance";
	public static final Object[][] TABLE_COLUMNS = {
			{ "compliance_id", Types.BIGINT },
			{ "compliance_tite", Types.VARCHAR },
			{ "compliance_shortdescription", Types.VARCHAR },
			{ "compliance_description", Types.VARCHAR },
			{ "compliance_document_name", Types.VARCHAR },
			{ "compliance_document_extension", Types.VARCHAR },
			{ "compliance_document_path", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("compliance_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("compliance_tite", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("compliance_shortdescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("compliance_description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("compliance_document_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("compliance_document_extension", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("compliance_document_path", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table cholacompliance_compliance (compliance_id LONG not null primary key,compliance_tite VARCHAR(250) null,compliance_shortdescription VARCHAR(250) null,compliance_description TEXT null,compliance_document_name VARCHAR(250) null,compliance_document_extension VARCHAR(75) null,compliance_document_path VARCHAR(100) null)";
	public static final String TABLE_SQL_DROP = "drop table cholacompliance_compliance";
	public static final String ORDER_BY_JPQL = " ORDER BY compliance.compliance_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY cholacompliance_compliance.compliance_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.service.compliance.model.compliance"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.service.compliance.model.compliance"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static compliance toModel(complianceSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		compliance model = new complianceImpl();

		model.setCompliance_id(soapModel.getCompliance_id());
		model.setCompliance_tite(soapModel.getCompliance_tite());
		model.setCompliance_shortdescription(soapModel.getCompliance_shortdescription());
		model.setCompliance_description(soapModel.getCompliance_description());
		model.setCompliance_document_name(soapModel.getCompliance_document_name());
		model.setCompliance_document_extension(soapModel.getCompliance_document_extension());
		model.setCompliance_document_path(soapModel.getCompliance_document_path());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<compliance> toModels(complianceSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<compliance> models = new ArrayList<compliance>(soapModels.length);

		for (complianceSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.service.compliance.model.compliance"));

	public complianceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _compliance_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCompliance_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _compliance_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return compliance.class;
	}

	@Override
	public String getModelClassName() {
		return compliance.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("compliance_id", getCompliance_id());
		attributes.put("compliance_tite", getCompliance_tite());
		attributes.put("compliance_shortdescription",
			getCompliance_shortdescription());
		attributes.put("compliance_description", getCompliance_description());
		attributes.put("compliance_document_name", getCompliance_document_name());
		attributes.put("compliance_document_extension",
			getCompliance_document_extension());
		attributes.put("compliance_document_path", getCompliance_document_path());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long compliance_id = (Long)attributes.get("compliance_id");

		if (compliance_id != null) {
			setCompliance_id(compliance_id);
		}

		String compliance_tite = (String)attributes.get("compliance_tite");

		if (compliance_tite != null) {
			setCompliance_tite(compliance_tite);
		}

		String compliance_shortdescription = (String)attributes.get(
				"compliance_shortdescription");

		if (compliance_shortdescription != null) {
			setCompliance_shortdescription(compliance_shortdescription);
		}

		String compliance_description = (String)attributes.get(
				"compliance_description");

		if (compliance_description != null) {
			setCompliance_description(compliance_description);
		}

		String compliance_document_name = (String)attributes.get(
				"compliance_document_name");

		if (compliance_document_name != null) {
			setCompliance_document_name(compliance_document_name);
		}

		String compliance_document_extension = (String)attributes.get(
				"compliance_document_extension");

		if (compliance_document_extension != null) {
			setCompliance_document_extension(compliance_document_extension);
		}

		String compliance_document_path = (String)attributes.get(
				"compliance_document_path");

		if (compliance_document_path != null) {
			setCompliance_document_path(compliance_document_path);
		}
	}

	@JSON
	@Override
	public long getCompliance_id() {
		return _compliance_id;
	}

	@Override
	public void setCompliance_id(long compliance_id) {
		_compliance_id = compliance_id;
	}

	@JSON
	@Override
	public String getCompliance_tite() {
		if (_compliance_tite == null) {
			return StringPool.BLANK;
		}
		else {
			return _compliance_tite;
		}
	}

	@Override
	public void setCompliance_tite(String compliance_tite) {
		_compliance_tite = compliance_tite;
	}

	@JSON
	@Override
	public String getCompliance_shortdescription() {
		if (_compliance_shortdescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _compliance_shortdescription;
		}
	}

	@Override
	public void setCompliance_shortdescription(
		String compliance_shortdescription) {
		_compliance_shortdescription = compliance_shortdescription;
	}

	@JSON
	@Override
	public String getCompliance_description() {
		if (_compliance_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _compliance_description;
		}
	}

	@Override
	public void setCompliance_description(String compliance_description) {
		_compliance_description = compliance_description;
	}

	@JSON
	@Override
	public String getCompliance_document_name() {
		if (_compliance_document_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _compliance_document_name;
		}
	}

	@Override
	public void setCompliance_document_name(String compliance_document_name) {
		_compliance_document_name = compliance_document_name;
	}

	@JSON
	@Override
	public String getCompliance_document_extension() {
		if (_compliance_document_extension == null) {
			return StringPool.BLANK;
		}
		else {
			return _compliance_document_extension;
		}
	}

	@Override
	public void setCompliance_document_extension(
		String compliance_document_extension) {
		_compliance_document_extension = compliance_document_extension;
	}

	@JSON
	@Override
	public String getCompliance_document_path() {
		if (_compliance_document_path == null) {
			return StringPool.BLANK;
		}
		else {
			return _compliance_document_path;
		}
	}

	@Override
	public void setCompliance_document_path(String compliance_document_path) {
		_compliance_document_path = compliance_document_path;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			compliance.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public compliance toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (compliance)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		complianceImpl complianceImpl = new complianceImpl();

		complianceImpl.setCompliance_id(getCompliance_id());
		complianceImpl.setCompliance_tite(getCompliance_tite());
		complianceImpl.setCompliance_shortdescription(getCompliance_shortdescription());
		complianceImpl.setCompliance_description(getCompliance_description());
		complianceImpl.setCompliance_document_name(getCompliance_document_name());
		complianceImpl.setCompliance_document_extension(getCompliance_document_extension());
		complianceImpl.setCompliance_document_path(getCompliance_document_path());

		complianceImpl.resetOriginalValues();

		return complianceImpl;
	}

	@Override
	public int compareTo(compliance compliance) {
		long primaryKey = compliance.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof compliance)) {
			return false;
		}

		compliance compliance = (compliance)obj;

		long primaryKey = compliance.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<compliance> toCacheModel() {
		complianceCacheModel complianceCacheModel = new complianceCacheModel();

		complianceCacheModel.compliance_id = getCompliance_id();

		complianceCacheModel.compliance_tite = getCompliance_tite();

		String compliance_tite = complianceCacheModel.compliance_tite;

		if ((compliance_tite != null) && (compliance_tite.length() == 0)) {
			complianceCacheModel.compliance_tite = null;
		}

		complianceCacheModel.compliance_shortdescription = getCompliance_shortdescription();

		String compliance_shortdescription = complianceCacheModel.compliance_shortdescription;

		if ((compliance_shortdescription != null) &&
				(compliance_shortdescription.length() == 0)) {
			complianceCacheModel.compliance_shortdescription = null;
		}

		complianceCacheModel.compliance_description = getCompliance_description();

		String compliance_description = complianceCacheModel.compliance_description;

		if ((compliance_description != null) &&
				(compliance_description.length() == 0)) {
			complianceCacheModel.compliance_description = null;
		}

		complianceCacheModel.compliance_document_name = getCompliance_document_name();

		String compliance_document_name = complianceCacheModel.compliance_document_name;

		if ((compliance_document_name != null) &&
				(compliance_document_name.length() == 0)) {
			complianceCacheModel.compliance_document_name = null;
		}

		complianceCacheModel.compliance_document_extension = getCompliance_document_extension();

		String compliance_document_extension = complianceCacheModel.compliance_document_extension;

		if ((compliance_document_extension != null) &&
				(compliance_document_extension.length() == 0)) {
			complianceCacheModel.compliance_document_extension = null;
		}

		complianceCacheModel.compliance_document_path = getCompliance_document_path();

		String compliance_document_path = complianceCacheModel.compliance_document_path;

		if ((compliance_document_path != null) &&
				(compliance_document_path.length() == 0)) {
			complianceCacheModel.compliance_document_path = null;
		}

		return complianceCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{compliance_id=");
		sb.append(getCompliance_id());
		sb.append(", compliance_tite=");
		sb.append(getCompliance_tite());
		sb.append(", compliance_shortdescription=");
		sb.append(getCompliance_shortdescription());
		sb.append(", compliance_description=");
		sb.append(getCompliance_description());
		sb.append(", compliance_document_name=");
		sb.append(getCompliance_document_name());
		sb.append(", compliance_document_extension=");
		sb.append(getCompliance_document_extension());
		sb.append(", compliance_document_path=");
		sb.append(getCompliance_document_path());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.service.compliance.model.compliance");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>compliance_id</column-name><column-value><![CDATA[");
		sb.append(getCompliance_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>compliance_tite</column-name><column-value><![CDATA[");
		sb.append(getCompliance_tite());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>compliance_shortdescription</column-name><column-value><![CDATA[");
		sb.append(getCompliance_shortdescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>compliance_description</column-name><column-value><![CDATA[");
		sb.append(getCompliance_description());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>compliance_document_name</column-name><column-value><![CDATA[");
		sb.append(getCompliance_document_name());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>compliance_document_extension</column-name><column-value><![CDATA[");
		sb.append(getCompliance_document_extension());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>compliance_document_path</column-name><column-value><![CDATA[");
		sb.append(getCompliance_document_path());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = compliance.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			compliance.class
		};
	private long _compliance_id;
	private String _compliance_tite;
	private String _compliance_shortdescription;
	private String _compliance_description;
	private String _compliance_document_name;
	private String _compliance_document_extension;
	private String _compliance_document_path;
	private compliance _escapedModel;
}