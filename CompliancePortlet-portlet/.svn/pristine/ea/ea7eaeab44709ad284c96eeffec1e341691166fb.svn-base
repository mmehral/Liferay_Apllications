package com.compliance.action;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.portlet.ActionRequest;
import javax.portlet.ActionResponse;
import javax.portlet.PortletException;

import com.liferay.counter.kernel.service.CounterLocalServiceUtil;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.portlet.bridges.mvc.MVCPortlet;
import com.liferay.portal.kernel.theme.ThemeDisplay;
import com.liferay.portal.kernel.upload.UploadPortletRequest;
import com.liferay.portal.kernel.util.FileUtil;
import com.liferay.portal.kernel.util.ParamUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.util.WebKeys;
import com.service.compliance.model.compliance;
import com.service.compliance.service.complianceLocalServiceUtil;

public class Complianceaction extends MVCPortlet
{
	private static Log _log = LogFactoryUtil.getLog(Complianceaction.class);
	
	public void addComment(ActionRequest actionRequest, ActionResponse actionResponse) {
		_log.info("Comment=======");

		try {
			invokeTaglibDiscussion(actionRequest, actionResponse);
			_log.info("Comment added Successfully..............");
		} catch (Exception e) {
			_log.error(e.getMessage());
		}
	}
	
public void submitCompliancehDetails(ActionRequest request,ActionResponse response) throws IOException
{
	String title=request.getParameter("title");
	_log.info("Title.."+title);
	
	String shortdescription=request.getParameter("shortdescription");
	_log.info("shortdescription.."+shortdescription);
	
	String description=request.getParameter("description");
	_log.info("description.."+description);
	
	//String complianceIdstr=request.getParameter("complianceId");
	//_log.info("complianceIdstr.."+complianceIdstr);
	
	long complianceId=ParamUtil.getLong(request, "complianceId");
	_log.info("compliance Id..................."+complianceId);
	
	//long complianceId = ParamUtil.getLong(request, "complianceId");
	//_log.info("complianceId===" + complianceId);
	//long complianceId=Long.parseLong(complianceIdstr);
	

	 UploadPortletRequest uploadRequest =
	 PortalUtil.getUploadPortletRequest(request);
	 
			SimpleDateFormat df2 = new SimpleDateFormat("ddMMyyyyHHmmss");
			Date date = new Date();
			String albumId = df2.format(date);
			File sourceFile = uploadRequest.getFile("fileName");
			String sourceFileName = uploadRequest.getFileName("fileName");
			//_log.info("tomcat path: " + sourceFile);
			_log.info("file name" + sourceFileName);
			
			
			
			String extension = "";

			int i = sourceFileName.lastIndexOf('.');
			_log.info("value of i.."+i);
			if (i > 0) {
			    extension = sourceFileName.substring(i+1);
			}
			String fileName = null;
		if (!sourceFileName.isEmpty())
		{
					_log.info("File selected by user");
					fileName = fileUpload(request, response, uploadRequest, sourceFileName, sourceFile);
		}
		else
		{
					_log.info("File not selected by user");
		}
		_log.info("File name...."+fileName);
		
	
	if(complianceId>=01)
	{
		modifiedcompliancedetails(request, response,complianceId,title,shortdescription,description,sourceFileName,fileName,extension);
		response.setRenderParameter("jspPage","/jsp/editComplianceDetails.jsp");
	}
	else
	{
	compliance com=complianceLocalServiceUtil.createcompliance(CounterLocalServiceUtil.increment());
	com.setCompliance_tite(title);
	com.setCompliance_description(description);
	com .setCompliance_shortdescription(shortdescription);
	com.setCompliance_document_name(sourceFileName);
    com.setCompliance_document_path(fileName);
    com.setCompliance_document_extension(extension);
	//com.setOrganization_image_name(sourceFileName);
	//com.setOrganization_image_path(fileName);
	com=complianceLocalServiceUtil.addcompliance(com);
	}
	_log.info("compliance data saved.....");
	
	
	
	
}

public String fileUpload(ActionRequest request, ActionResponse response, UploadPortletRequest uploadRequest,
		String fileName, File sourceFile) throws IOException
{
	ThemeDisplay themeDisplay = (ThemeDisplay) request.getAttribute(WebKeys.THEME_DISPLAY);
	

	String str = "ComplianceUpload";

	
	String role="admin";
	java.util.Properties properties = PortalUtil.getPortalProperties();
	_log.info("my properties is...." + properties);
	File contestfolder = new File(properties.getProperty("liferay.home") + "/tomcat-8.0.32/webapps/" + str);
	File destinationFile = new File(
			properties.getProperty("liferay.home") + "/tomcat-8.0.32/webapps/" + str + "/" + role);

	if (!contestfolder.exists()) {
		destinationFile.mkdirs();
		_log.info("type directory exists");
	}
	_log.info("my directory is : " + contestfolder);

	if (!destinationFile.exists()) {
		destinationFile.mkdirs();
		_log.info("type directory exists");
	}
	_log.info("my directory is : " + destinationFile);

	
	if (fileName != null) {
		/**************** SAVE THE DOC ********************************/
		if (destinationFile.exists()) {
			fileName.lastIndexOf(".");
			String fileNa = fileName.substring(0, fileName.lastIndexOf("."));
			_log.info("fileName : " + fileNa);
			String fileExtension = fileName.substring(fileName.lastIndexOf("."), fileName.length());
			_log.info("fileExtension : " + fileExtension);
			fileName = fileNa;
			SimpleDateFormat df2 = new SimpleDateFormat("dd_MM_yyyy_HH_mm_ss");
			Date date = new Date();
			String testDateString = df2.format(date);
			fileName = fileName + "_" + testDateString + fileExtension;

			destinationFile = new File(properties.getProperty("liferay.home") + "/tomcat-8.0.32/webapps/" + str
					+ "/" + role + "/" + fileName);

			_log.info("destinationFile : " + destinationFile);

		}
		_log.info("File : " + fileName);
		FileUtil.copyFile(sourceFile, destinationFile);

		String FilePath = destinationFile.toString();
		_log.info("Successfully Saved the Document");
		/*************** ENDED THE SAVING ******************/
		_log.info(FilePath);
	}
	return fileName;
}

private void modifiedcompliancedetails(ActionRequest request, ActionResponse response, long complianceId,String title, String shortdescription,String description,String sourceFileName,String fileName,String extension)
{
	
     _log.info("edit the forms======");
     _log.info("complianceId.."+complianceId);
	
	compliance com = null;
	try
	{
		com = complianceLocalServiceUtil.fetchcompliance(complianceId);
		_log.info(com);
	} 
	catch (SystemException e)
	{
		_log.error(e.getMessage());
	}
	if (Validator.isNotNull(com)) 
	{
		
		com.setCompliance_tite(title);
		com.setCompliance_description(description);
		com.setCompliance_shortdescription(shortdescription);
		com.setCompliance_document_name(sourceFileName);
		com.setCompliance_document_path(fileName);
		com.setCompliance_document_extension(extension);
		
		try 
		{
		
			complianceLocalServiceUtil.updatecompliance(com);
			_log.info("Updated Successfully");
		}
		catch (SystemException e) 
		{
			_log.error(e.getMessage());
		}
	}
}	

public void deletecompliancedetailsreference(ActionRequest actionRequest,
		ActionResponse actionResponse) throws IOException, PortletException
{
	_log.info("Delete Vendor======");
	long complianceId = ParamUtil.getInteger(actionRequest, "complianceId");
	_log.info("complianceId===" + complianceId);
	if (complianceId >= 01) {
	
 	try {
 		complianceLocalServiceUtil.deletecompliance(complianceId);
			_log.info("deleted successfully");
			actionResponse.setRenderParameter("jspPage","/jsp/editComplianceDetails.jsp");
		
		} catch (Exception e) {
			_log.error(e.getMessage());
		} 
			
	}
	
}
}
