/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.chola.annual.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.chola.annual.model.annualreports;
import com.chola.annual.model.annualreportsModel;
import com.chola.annual.model.annualreportsSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the annualreports service. Represents a row in the &quot;chola_annualreports&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link annualreportsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link annualreportsImpl}.
 * </p>
 *
 * @author CloverLiferay02
 * @see annualreportsImpl
 * @see annualreports
 * @see annualreportsModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class annualreportsModelImpl extends BaseModelImpl<annualreports>
	implements annualreportsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a annualreports model instance should use the {@link annualreports} interface instead.
	 */
	public static final String TABLE_NAME = "chola_annualreports";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "details", Types.VARCHAR },
			{ "updatedon", Types.TIMESTAMP },
			{ "updatedby", Types.BIGINT },
			{ "uniquecontentid", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("details", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("updatedon", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("updatedby", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("uniquecontentid", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table chola_annualreports (id_ LONG not null primary key,details TEXT null,updatedon DATE null,updatedby LONG,uniquecontentid LONG)";
	public static final String TABLE_SQL_DROP = "drop table chola_annualreports";
	public static final String ORDER_BY_JPQL = " ORDER BY annualreports.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY chola_annualreports.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.chola.annual.model.annualreports"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.chola.annual.model.annualreports"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static annualreports toModel(annualreportsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		annualreports model = new annualreportsImpl();

		model.setId(soapModel.getId());
		model.setDetails(soapModel.getDetails());
		model.setUpdatedon(soapModel.getUpdatedon());
		model.setUpdatedby(soapModel.getUpdatedby());
		model.setUniquecontentid(soapModel.getUniquecontentid());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<annualreports> toModels(annualreportsSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<annualreports> models = new ArrayList<annualreports>(soapModels.length);

		for (annualreportsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.chola.annual.model.annualreports"));

	public annualreportsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return annualreports.class;
	}

	@Override
	public String getModelClassName() {
		return annualreports.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("details", getDetails());
		attributes.put("updatedon", getUpdatedon());
		attributes.put("updatedby", getUpdatedby());
		attributes.put("uniquecontentid", getUniquecontentid());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String details = (String)attributes.get("details");

		if (details != null) {
			setDetails(details);
		}

		Date updatedon = (Date)attributes.get("updatedon");

		if (updatedon != null) {
			setUpdatedon(updatedon);
		}

		Long updatedby = (Long)attributes.get("updatedby");

		if (updatedby != null) {
			setUpdatedby(updatedby);
		}

		Long uniquecontentid = (Long)attributes.get("uniquecontentid");

		if (uniquecontentid != null) {
			setUniquecontentid(uniquecontentid);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public String getDetails() {
		if (_details == null) {
			return StringPool.BLANK;
		}
		else {
			return _details;
		}
	}

	@Override
	public void setDetails(String details) {
		_details = details;
	}

	@JSON
	@Override
	public Date getUpdatedon() {
		return _updatedon;
	}

	@Override
	public void setUpdatedon(Date updatedon) {
		_updatedon = updatedon;
	}

	@JSON
	@Override
	public long getUpdatedby() {
		return _updatedby;
	}

	@Override
	public void setUpdatedby(long updatedby) {
		_updatedby = updatedby;
	}

	@JSON
	@Override
	public long getUniquecontentid() {
		return _uniquecontentid;
	}

	@Override
	public void setUniquecontentid(long uniquecontentid) {
		_uniquecontentid = uniquecontentid;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			annualreports.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public annualreports toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (annualreports)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		annualreportsImpl annualreportsImpl = new annualreportsImpl();

		annualreportsImpl.setId(getId());
		annualreportsImpl.setDetails(getDetails());
		annualreportsImpl.setUpdatedon(getUpdatedon());
		annualreportsImpl.setUpdatedby(getUpdatedby());
		annualreportsImpl.setUniquecontentid(getUniquecontentid());

		annualreportsImpl.resetOriginalValues();

		return annualreportsImpl;
	}

	@Override
	public int compareTo(annualreports annualreports) {
		long primaryKey = annualreports.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof annualreports)) {
			return false;
		}

		annualreports annualreports = (annualreports)obj;

		long primaryKey = annualreports.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<annualreports> toCacheModel() {
		annualreportsCacheModel annualreportsCacheModel = new annualreportsCacheModel();

		annualreportsCacheModel.id = getId();

		annualreportsCacheModel.details = getDetails();

		String details = annualreportsCacheModel.details;

		if ((details != null) && (details.length() == 0)) {
			annualreportsCacheModel.details = null;
		}

		Date updatedon = getUpdatedon();

		if (updatedon != null) {
			annualreportsCacheModel.updatedon = updatedon.getTime();
		}
		else {
			annualreportsCacheModel.updatedon = Long.MIN_VALUE;
		}

		annualreportsCacheModel.updatedby = getUpdatedby();

		annualreportsCacheModel.uniquecontentid = getUniquecontentid();

		return annualreportsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", details=");
		sb.append(getDetails());
		sb.append(", updatedon=");
		sb.append(getUpdatedon());
		sb.append(", updatedby=");
		sb.append(getUpdatedby());
		sb.append(", uniquecontentid=");
		sb.append(getUniquecontentid());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.chola.annual.model.annualreports");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>details</column-name><column-value><![CDATA[");
		sb.append(getDetails());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedon</column-name><column-value><![CDATA[");
		sb.append(getUpdatedon());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedby</column-name><column-value><![CDATA[");
		sb.append(getUpdatedby());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>uniquecontentid</column-name><column-value><![CDATA[");
		sb.append(getUniquecontentid());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = annualreports.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			annualreports.class
		};
	private long _id;
	private String _details;
	private Date _updatedon;
	private long _updatedby;
	private long _uniquecontentid;
	private annualreports _escapedModel;
}