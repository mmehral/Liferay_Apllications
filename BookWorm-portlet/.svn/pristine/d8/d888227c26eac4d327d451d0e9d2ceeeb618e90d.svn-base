/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.chola.book.service.base;

import aQute.bnd.annotation.ProviderType;

import com.chola.book.model.bookusers;
import com.chola.book.service.bookusersLocalService;
import com.chola.book.service.persistence.bookdetailsFinder;
import com.chola.book.service.persistence.bookdetailsPersistence;
import com.chola.book.service.persistence.bookusersPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the bookusers local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.chola.book.service.impl.bookusersLocalServiceImpl}.
 * </p>
 *
 * @author CloverLiferay02
 * @see com.chola.book.service.impl.bookusersLocalServiceImpl
 * @see com.chola.book.service.bookusersLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class bookusersLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements bookusersLocalService, IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.chola.book.service.bookusersLocalServiceUtil} to access the bookusers local service.
	 */

	/**
	 * Adds the bookusers to the database. Also notifies the appropriate model listeners.
	 *
	 * @param bookusers the bookusers
	 * @return the bookusers that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public bookusers addbookusers(bookusers bookusers) {
		bookusers.setNew(true);

		return bookusersPersistence.update(bookusers);
	}

	/**
	 * Creates a new bookusers with the primary key. Does not add the bookusers to the database.
	 *
	 * @param id the primary key for the new bookusers
	 * @return the new bookusers
	 */
	@Override
	public bookusers createbookusers(long id) {
		return bookusersPersistence.create(id);
	}

	/**
	 * Deletes the bookusers with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param id the primary key of the bookusers
	 * @return the bookusers that was removed
	 * @throws PortalException if a bookusers with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public bookusers deletebookusers(long id) throws PortalException {
		return bookusersPersistence.remove(id);
	}

	/**
	 * Deletes the bookusers from the database. Also notifies the appropriate model listeners.
	 *
	 * @param bookusers the bookusers
	 * @return the bookusers that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public bookusers deletebookusers(bookusers bookusers) {
		return bookusersPersistence.remove(bookusers);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(bookusers.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return bookusersPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.chola.book.model.impl.bookusersModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return bookusersPersistence.findWithDynamicQuery(dynamicQuery, start,
			end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.chola.book.model.impl.bookusersModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return bookusersPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return bookusersPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return bookusersPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public bookusers fetchbookusers(long id) {
		return bookusersPersistence.fetchByPrimaryKey(id);
	}

	/**
	 * Returns the bookusers with the primary key.
	 *
	 * @param id the primary key of the bookusers
	 * @return the bookusers
	 * @throws PortalException if a bookusers with the primary key could not be found
	 */
	@Override
	public bookusers getbookusers(long id) throws PortalException {
		return bookusersPersistence.findByPrimaryKey(id);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(bookusersLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(bookusers.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(bookusersLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(bookusers.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(bookusersLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(bookusers.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return bookusersLocalService.deletebookusers((bookusers)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return bookusersPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the bookuserses.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.chola.book.model.impl.bookusersModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of bookuserses
	 * @param end the upper bound of the range of bookuserses (not inclusive)
	 * @return the range of bookuserses
	 */
	@Override
	public List<bookusers> getbookuserses(int start, int end) {
		return bookusersPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of bookuserses.
	 *
	 * @return the number of bookuserses
	 */
	@Override
	public int getbookusersesCount() {
		return bookusersPersistence.countAll();
	}

	/**
	 * Updates the bookusers in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param bookusers the bookusers
	 * @return the bookusers that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public bookusers updatebookusers(bookusers bookusers) {
		return bookusersPersistence.update(bookusers);
	}

	/**
	 * Returns the bookdetails local service.
	 *
	 * @return the bookdetails local service
	 */
	public com.chola.book.service.bookdetailsLocalService getbookdetailsLocalService() {
		return bookdetailsLocalService;
	}

	/**
	 * Sets the bookdetails local service.
	 *
	 * @param bookdetailsLocalService the bookdetails local service
	 */
	public void setbookdetailsLocalService(
		com.chola.book.service.bookdetailsLocalService bookdetailsLocalService) {
		this.bookdetailsLocalService = bookdetailsLocalService;
	}

	/**
	 * Returns the bookdetails persistence.
	 *
	 * @return the bookdetails persistence
	 */
	public bookdetailsPersistence getbookdetailsPersistence() {
		return bookdetailsPersistence;
	}

	/**
	 * Sets the bookdetails persistence.
	 *
	 * @param bookdetailsPersistence the bookdetails persistence
	 */
	public void setbookdetailsPersistence(
		bookdetailsPersistence bookdetailsPersistence) {
		this.bookdetailsPersistence = bookdetailsPersistence;
	}

	/**
	 * Returns the bookdetails finder.
	 *
	 * @return the bookdetails finder
	 */
	public bookdetailsFinder getbookdetailsFinder() {
		return bookdetailsFinder;
	}

	/**
	 * Sets the bookdetails finder.
	 *
	 * @param bookdetailsFinder the bookdetails finder
	 */
	public void setbookdetailsFinder(bookdetailsFinder bookdetailsFinder) {
		this.bookdetailsFinder = bookdetailsFinder;
	}

	/**
	 * Returns the bookusers local service.
	 *
	 * @return the bookusers local service
	 */
	public bookusersLocalService getbookusersLocalService() {
		return bookusersLocalService;
	}

	/**
	 * Sets the bookusers local service.
	 *
	 * @param bookusersLocalService the bookusers local service
	 */
	public void setbookusersLocalService(
		bookusersLocalService bookusersLocalService) {
		this.bookusersLocalService = bookusersLocalService;
	}

	/**
	 * Returns the bookusers persistence.
	 *
	 * @return the bookusers persistence
	 */
	public bookusersPersistence getbookusersPersistence() {
		return bookusersPersistence;
	}

	/**
	 * Sets the bookusers persistence.
	 *
	 * @param bookusersPersistence the bookusers persistence
	 */
	public void setbookusersPersistence(
		bookusersPersistence bookusersPersistence) {
		this.bookusersPersistence = bookusersPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.chola.book.model.bookusers",
			bookusersLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.chola.book.model.bookusers");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return bookusersLocalService.class.getName();
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return bookusers.class;
	}

	protected String getModelClassName() {
		return bookusers.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = bookusersPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.chola.book.service.bookdetailsLocalService.class)
	protected com.chola.book.service.bookdetailsLocalService bookdetailsLocalService;
	@BeanReference(type = bookdetailsPersistence.class)
	protected bookdetailsPersistence bookdetailsPersistence;
	@BeanReference(type = bookdetailsFinder.class)
	protected bookdetailsFinder bookdetailsFinder;
	@BeanReference(type = bookusersLocalService.class)
	protected bookusersLocalService bookusersLocalService;
	@BeanReference(type = bookusersPersistence.class)
	protected bookusersPersistence bookusersPersistence;
	@BeanReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@BeanReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@BeanReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private ClassLoader _classLoader;
	private bookusersLocalServiceClpInvoker _clpInvoker = new bookusersLocalServiceClpInvoker();
}