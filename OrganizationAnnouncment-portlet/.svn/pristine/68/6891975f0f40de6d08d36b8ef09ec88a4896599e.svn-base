/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.organizationAnnouncement.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.organizationAnnouncement.model.organization;
import com.organizationAnnouncement.model.organizationModel;
import com.organizationAnnouncement.model.organizationSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the organization service. Represents a row in the &quot;organizationAnnouncement_organization&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link organizationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link organizationImpl}.
 * </p>
 *
 * @author adms.java1
 * @see organizationImpl
 * @see organization
 * @see organizationModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class organizationModelImpl extends BaseModelImpl<organization>
	implements organizationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a organization model instance should use the {@link organization} interface instead.
	 */
	public static final String TABLE_NAME = "organizationAnnouncement_organization";
	public static final Object[][] TABLE_COLUMNS = {
			{ "organization_id", Types.BIGINT },
			{ "organization_tite", Types.VARCHAR },
			{ "organization_description", Types.VARCHAR },
			{ "organization_image_name", Types.VARCHAR },
			{ "organization_image_path", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("organization_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("organization_tite", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("organization_description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("organization_image_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("organization_image_path", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table organizationAnnouncement_organization (organization_id LONG not null primary key,organization_tite VARCHAR(100) null,organization_description TEXT null,organization_image_name VARCHAR(75) null,organization_image_path VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table organizationAnnouncement_organization";
	public static final String ORDER_BY_JPQL = " ORDER BY organization.organization_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY organizationAnnouncement_organization.organization_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.organizationAnnouncement.model.organization"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.organizationAnnouncement.model.organization"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static organization toModel(organizationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		organization model = new organizationImpl();

		model.setOrganization_id(soapModel.getOrganization_id());
		model.setOrganization_tite(soapModel.getOrganization_tite());
		model.setOrganization_description(soapModel.getOrganization_description());
		model.setOrganization_image_name(soapModel.getOrganization_image_name());
		model.setOrganization_image_path(soapModel.getOrganization_image_path());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<organization> toModels(organizationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<organization> models = new ArrayList<organization>(soapModels.length);

		for (organizationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.organizationAnnouncement.model.organization"));

	public organizationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _organization_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setOrganization_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _organization_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return organization.class;
	}

	@Override
	public String getModelClassName() {
		return organization.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("organization_id", getOrganization_id());
		attributes.put("organization_tite", getOrganization_tite());
		attributes.put("organization_description", getOrganization_description());
		attributes.put("organization_image_name", getOrganization_image_name());
		attributes.put("organization_image_path", getOrganization_image_path());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long organization_id = (Long)attributes.get("organization_id");

		if (organization_id != null) {
			setOrganization_id(organization_id);
		}

		String organization_tite = (String)attributes.get("organization_tite");

		if (organization_tite != null) {
			setOrganization_tite(organization_tite);
		}

		String organization_description = (String)attributes.get(
				"organization_description");

		if (organization_description != null) {
			setOrganization_description(organization_description);
		}

		String organization_image_name = (String)attributes.get(
				"organization_image_name");

		if (organization_image_name != null) {
			setOrganization_image_name(organization_image_name);
		}

		String organization_image_path = (String)attributes.get(
				"organization_image_path");

		if (organization_image_path != null) {
			setOrganization_image_path(organization_image_path);
		}
	}

	@JSON
	@Override
	public long getOrganization_id() {
		return _organization_id;
	}

	@Override
	public void setOrganization_id(long organization_id) {
		_organization_id = organization_id;
	}

	@JSON
	@Override
	public String getOrganization_tite() {
		if (_organization_tite == null) {
			return StringPool.BLANK;
		}
		else {
			return _organization_tite;
		}
	}

	@Override
	public void setOrganization_tite(String organization_tite) {
		_organization_tite = organization_tite;
	}

	@JSON
	@Override
	public String getOrganization_description() {
		if (_organization_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _organization_description;
		}
	}

	@Override
	public void setOrganization_description(String organization_description) {
		_organization_description = organization_description;
	}

	@JSON
	@Override
	public String getOrganization_image_name() {
		if (_organization_image_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _organization_image_name;
		}
	}

	@Override
	public void setOrganization_image_name(String organization_image_name) {
		_organization_image_name = organization_image_name;
	}

	@JSON
	@Override
	public String getOrganization_image_path() {
		if (_organization_image_path == null) {
			return StringPool.BLANK;
		}
		else {
			return _organization_image_path;
		}
	}

	@Override
	public void setOrganization_image_path(String organization_image_path) {
		_organization_image_path = organization_image_path;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			organization.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public organization toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (organization)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		organizationImpl organizationImpl = new organizationImpl();

		organizationImpl.setOrganization_id(getOrganization_id());
		organizationImpl.setOrganization_tite(getOrganization_tite());
		organizationImpl.setOrganization_description(getOrganization_description());
		organizationImpl.setOrganization_image_name(getOrganization_image_name());
		organizationImpl.setOrganization_image_path(getOrganization_image_path());

		organizationImpl.resetOriginalValues();

		return organizationImpl;
	}

	@Override
	public int compareTo(organization organization) {
		long primaryKey = organization.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof organization)) {
			return false;
		}

		organization organization = (organization)obj;

		long primaryKey = organization.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<organization> toCacheModel() {
		organizationCacheModel organizationCacheModel = new organizationCacheModel();

		organizationCacheModel.organization_id = getOrganization_id();

		organizationCacheModel.organization_tite = getOrganization_tite();

		String organization_tite = organizationCacheModel.organization_tite;

		if ((organization_tite != null) && (organization_tite.length() == 0)) {
			organizationCacheModel.organization_tite = null;
		}

		organizationCacheModel.organization_description = getOrganization_description();

		String organization_description = organizationCacheModel.organization_description;

		if ((organization_description != null) &&
				(organization_description.length() == 0)) {
			organizationCacheModel.organization_description = null;
		}

		organizationCacheModel.organization_image_name = getOrganization_image_name();

		String organization_image_name = organizationCacheModel.organization_image_name;

		if ((organization_image_name != null) &&
				(organization_image_name.length() == 0)) {
			organizationCacheModel.organization_image_name = null;
		}

		organizationCacheModel.organization_image_path = getOrganization_image_path();

		String organization_image_path = organizationCacheModel.organization_image_path;

		if ((organization_image_path != null) &&
				(organization_image_path.length() == 0)) {
			organizationCacheModel.organization_image_path = null;
		}

		return organizationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{organization_id=");
		sb.append(getOrganization_id());
		sb.append(", organization_tite=");
		sb.append(getOrganization_tite());
		sb.append(", organization_description=");
		sb.append(getOrganization_description());
		sb.append(", organization_image_name=");
		sb.append(getOrganization_image_name());
		sb.append(", organization_image_path=");
		sb.append(getOrganization_image_path());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.organizationAnnouncement.model.organization");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>organization_id</column-name><column-value><![CDATA[");
		sb.append(getOrganization_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>organization_tite</column-name><column-value><![CDATA[");
		sb.append(getOrganization_tite());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>organization_description</column-name><column-value><![CDATA[");
		sb.append(getOrganization_description());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>organization_image_name</column-name><column-value><![CDATA[");
		sb.append(getOrganization_image_name());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>organization_image_path</column-name><column-value><![CDATA[");
		sb.append(getOrganization_image_path());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = organization.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			organization.class
		};
	private long _organization_id;
	private String _organization_tite;
	private String _organization_description;
	private String _organization_image_name;
	private String _organization_image_path;
	private organization _escapedModel;
}